#
# .github/workflows/codeql-analysis.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of ttauri-project.
#

name: "CodeQL Analysis"

# Trigger workflow on push or pull request, only for the main branch.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '00 12 * * Sun' # At 12:00 on Sunday.

jobs:

# ---------------------------------------------------------------------------------------

  codeql-analyze:

# ---------------------------------------------------------------------------------------

    name: CodeQL Report ‚ûî ${{ matrix.config.VCPKG_TARGET_TRIPLET }}
    needs: install-vulkan-sdk-and-runtime
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - { VCPKG_TARGET_TRIPLET: x64-windows-static, BUILD_SHARED_LIBS: OFF}

    env:
      BUILD_TYPE: RelWithDebInfo
      PLATFORM: x64
      VCPKG_ROOT: C:\vcpkg
      VULKAN_SDK: ${{ needs.install-vulkan-sdk-and-runtime.outputs.VULKAN_SDK }}

    defaults:
      run:
        shell: cmd

    steps:
      - name: ü§ò Checkout Code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      - name: ‚Ñπ Show Tool Versions
        run: |
          date /T
          time /T
          curl -V
          cmake --version
          msbuild /version
          vcpkg version
          echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%

      - name: üéØ Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v1 # https://github.com/actions/cache
        with:
          path: ${{ env.VULKAN_SDK }}
          key: use-wrong-cache-key-to-trigger-partial-matching-of-restore-keys
          restore-keys: cache-windows-vulkan

      - name: üîΩ Install Visual Studio Components for C++, CMake, Win10SDK
        shell: pwsh
        run: |
          $VSConfig = Resolve-Path ".\.github\.vsconfig" | select -ExpandProperty Path
          cd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
          $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "$InstallPath", '--config', "$VSConfig", '--quiet', '--norestart', '--nocache')
          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
          $process.ExitCode

      - name: üì• Setup VC Environment (‚Üí vcvarsall)
        run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM%

      - name: üîΩ Update VCPKG
        run: |
          cd C:\vcpkg
          git pull --quiet
          bootstrap-vcpkg.bat -disableMetrics
          vcpkg integrate install --triplet=${{ matrix.config.VCPKG_TARGET_TRIPLET }} --feature-flags=manifests
          vcpkg version

      - name: üéØ Cache VCPKG
        id: cache-vcpkg
        uses: actions/cache@v1 # https://github.com/actions/cache
        with:
          #path: ..\build\vcpkg_installed
          path: ~\AppData\Local\vcpkg
          key: cache-windows-vcpkg-${{ matrix.config.VCPKG_TARGET_TRIPLET }}-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            cache-windows-vcpkg-${{ matrix.config.VCPKG_TARGET_TRIPLET }}-${{ github.ref }}
            cache-windows-vcpkg-${{ matrix.config.VCPKG_TARGET_TRIPLET }}

      - name: ‚ùî CHECK important folders, to see if everything is present (before building).
        run: |
          dir %VULKAN_SDK%\Bin
          dir %VULKAN_SDK%\runtime\%PLATFORM%
          dir %LocalAppData%\vcpkg

      - name: ‚úè CMake ‚ûî Configure (including VCPKG ‚Üí Install Dependencies)
        run: |
          cmake -G "Visual Studio 16 2019" -A ${{ env.PLATFORM }}                           ^
                -S ${{ github.workspace }} -B ../build                                      ^
                -DCMAKE_BUILD_TYPE=%BUILD_TYPE%                                             ^
                -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake            ^
                -DVCPKG_TARGET_TRIPLET=${{ matrix.config.VCPKG_TARGET_TRIPLET }}            ^
                -DBUILD_SHARED_LIBS=${{ matrix.config.BUILD_SHARED_LIBS }}                  ^
                -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: üìà CodeQL ‚ûî Setup Scanner
        uses: github/codeql-action/init@v1
        with:
          languages: 'cpp'
          config-file: ./.github/codeql/codeql-config.yml

      - name: üôè CMake ‚Üí Build
        run: |
          cd ..\build
          cmake --build . --config %BUILD_TYPE% -j %NUMBER_OF_PROCESSORS%

      - name: üìà CodeQL ‚ûî Perform Analysis
        uses: github/codeql-action/analyze@v1

# ---------------------------------------------------------------------------------------

  install-vulkan-sdk-and-runtime:

# ---------------------------------------------------------------------------------------

    name: "Install Vulkan SDK & Runtime [x64]"
    runs-on: windows-latest
    if: success() || failure() # don't run job, if skipped
    defaults:
      run:
        shell: cmd

    outputs:
      VULKAN_SDK: ${{ steps.vulkan-output.outputs.VULKAN_SDK }}

    env:
      VULKAN_VERSION: 1.2.176.1

    steps:
      - name: üì• Setup Environment Variables
        shell: pwsh
        run: |
          echo VULKAN_SDK=C:\VulkanSDK\${{ env.VULKAN_VERSION }} >> $env:GITHUB_ENV
          $env:BASE_URL="https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/windows"
          echo VULKAN_SDK_URL=$env:BASE_URL/VulkanSDK-${{ env.VULKAN_VERSION }}-Installer.exe?Human=true >> $env:GITHUB_ENV
          echo VULKAN_RUN_URL=$env:BASE_URL/vulkan-runtime-components.zip?Human=true >> $env:GITHUB_ENV

      - name: üéØ Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v1 # https://github.com/actions/cache
        with:
          path: ${{ env.VULKAN_SDK }}
          key: cache-windows-vulkan-${{ env.VULKAN_VERSION }}

      - name: üîΩ Install VULKAN_SDK
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          curl -L --silent --show-error --output VulkanSDK.exe %VULKAN_SDK_URL%
          VulkanSDK.exe /S

      - name: üîΩ Install VULKAN Runtime (‚Üí vulkan-1.dll)
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          curl -L --silent --show-error --output vulkan-runtime.zip %VULKAN_RUN_URL%
          7z e vulkan-runtime.zip -o%VULKAN_SDK%\runtime\x64 */x64

      - name: ‚ùî CHECK important folders, to see if everything is present (after downloading)
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          dir /S /B ${{ env.VULKAN_SDK }}

      - name: ‚úÇ Reduce VULKAN_SDK size before caching
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cd ${{ env.VULKAN_SDK }}
          "Folder size before: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)
          Remove-Item -Recurse -Force "Bin32"
          Remove-Item -Recurse -Force "Demos"
          Remove-Item -Recurse -Force "Lib32"
          Remove-Item -Recurse -Force "samples"
          Remove-Item -Recurse -Force "Templates"
          Remove-Item -Recurse -Force "Third-Party"
          Remove-Item -Recurse -Force "Tools"
          Remove-Item -Recurse -Force "Tools32"
          "Folder size after: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)

      - name: üì§ Set outputs
        id: vulkan-output
        run: |
         echo ::set-output name=VULKAN_SDK::${{ env.VULKAN_SDK }}
