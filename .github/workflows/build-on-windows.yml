#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of hikogui.
#

name: "Build on Windows"
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

# improve CI concurrency by automatically cancelling outdated jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:

# ---------------------------------------------------------------------------------------

  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        CMAKE_BUILD_TYPE: ["Debug", "Release"]
        CMAKE_CXX_COMPILER: ["cl", "clang-cl"]

    name: x64-windows ${{matrix.CMAKE_BUILD_TYPE}} ${{matrix.CMAKE_CXX_COMPILER}}

    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
    runs-on: windows-2022

    env:
      MATRIX_ID: ${{matrix.CMAKE_BUILD_TYPE}}-${{matrix.CMAKE_CXX_COMPILER}}
      BUILD_DIR: ${{github.workspace}}/build
      INSTALL_DIR: ${{github.workspace}}/install

    defaults:
      run:
        shell: cmd

    steps:
      - name: ü§ò Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      # https://community.chocolatey.org/packages/ninja
      # https://community.chocolatey.org/packages/ccache
      - name: üîΩ Install Ninja
        run: choco install ninja ccache

      - name: üõ†Ô∏è Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
    
      - name: üîΩ Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1.0.1 # https://github.com/jakoch/install-vulkan-sdk-action/
        with: 
          vulkan_version: latest
          optional_components: com.lunarg.vulkan.vma
          install_runtime: true
          cache: true
          stripdown: true

      # Reminder: This step requires that the CMakePresets for CI contain
      # "CMAKE_CXX_COMPILER_LAUNCHER": "sccache".
      - name: üéØ Setup Build Cache
        uses: hendrikmuhs/ccache-action@main # https://github.com/hendrikmuhs/ccache-action/
        with:
          variant: sccache
          key: win-ci-build-${{github.ref}}-${{env.MATRIX_ID}}
          restore-keys: |
            win-ci-build-${{github.ref}}-${{env.MATRIX_ID}}
            win-ci-build-${{github.ref}}
            win-ci-build-refs/heads/main
            win-ci-build-

      # Build Artifact Name: hikogui-0.3.0-0cda6a2-x64-windows-Debug-cl
      - name: ‚úè Fetch Versioning Data & Set Artifact Name
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json)
          $VERSION=$(jq -r .version vcpkg.json)
          $SHORT_HASH=$($env:GITHUB_SHA.substring(0,7))
          $ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-x64-windows-${{env.MATRIX_ID}}"
          echo "Artifact Name:" $ARTIFACT_NAME
          echo "ARTIFACT_NAME=$($ARTIFACT_NAME)" >> $env:GITHUB_ENV
          echo "VERSION=$($VERSION)" >> $env:GITHUB_ENV

      - name: ‚úè CMake ‚ûî Make Build Directory
        shell: pwsh
        run: mkdir "${{env.BUILD_DIR}}"
    
      # The Vulkan Runtime is normally to be found in "C:\windows\systems32", but it's not a system library on CI.
      - name: üîΩ Install Vulkan Runtime in build directory
        working-directory: ${{env.BUILD_DIR}}
        run: copy ${{env.VULKAN_SDK}}\runtime\x64\vulkan-1.* .

      - name: ‚úè CMake ‚ûî Configure
        working-directory: ${{env.BUILD_DIR}}
        shell: pwsh
        run: >
          cmake
          -G Ninja
          "-DCMAKE_BUILD_TYPE=${{matrix.CMAKE_BUILD_TYPE}}"
          "-DCMAKE_C_COMPILER=${{matrix.CMAKE_CXX_COMPILER}}
          "-DCMAKE_CXX_COMPILER=${{matrix.CMAKE_CXX_COMPILER}}
          "-DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}}"
          ..

      - name: üôè CMake ‚ûî Build
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --parallel 1
  
      - name: üì¶ CMake ‚ûî Install
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --install .

      - name: ‚ùî CHECK important folders, to see if everything is present (after building)
        run: |
          dir /S /B build
          dir /S /B install

      - name: ‚úî ‚ùå‚úîÔ∏è Test
        working-directory: ${{env.BUILD_DIR}}
        run: |
          ctest --extra-verbose --output-junit "${{github.workspace}}\test_results_${{env.MATRIX_ID}}.xml"
          type "${{github.workspace}}\build\Testing\Temporary\LastTest.log"
          if exist "${{github.workspace}}\build\Testing\Temporary\LastTestsFailed.log" (
            type "${{github.workspace}}\build\Testing\Temporary\LastTestsFailed.log"
          )

      # We upload multiple files into the same artifact file (zip).
      # Each file is differently named by adding the job name of the matrix as a suffix.
      # This enables the "Unit Test Result" display to show all individual test runs of the matrix.
      # The tests are published after all matrix runs finished (from job: "publish-test-results").
      - name: üîº Upload Test Results
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: test-results
          path: test_results_*.xml

      - name: üìë Generate CodeCoverage Report (Debug)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.MATRIX_ID == 'Debug-cl'
        run: |
          curl -L -O https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe
          OpenCppCoverageSetup-x64-0.9.9.0.exe /VERYSILENT /DIR=.\bin\coverage
          .\bin\coverage\OpenCppCoverage.exe ^
          --sources=src ^
          --excluded_sources=src\*_tests.cpp ^
          --excluded_sources=src\*\*_tests.cpp ^
          --excluded_sources=build\_deps ^
          --export_type=cobertura:hikogui_coverage.xml ^
          --working_dir=.\\build ^
          --cover_children ^
          -- ctest.exe

      # retry uploading to codecov with limit to workaround flaky upload issue
      - name: üì¶ üöÄ Upload CodeCoverage Report to codecov.io (Debug)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.MATRIX_ID == 'Debug-cl'
        uses: wandalen/wretry.action@v1 # https://github.com/wandalen/wretry.action
        with:
          attempt_limit: 10
          action: codecov/codecov-action@v3 # https://github.com/codecov/codecov-action
          with: |
            files: ./hikogui_coverage.xml

    # In the future we can do this when building dynamic libraries without whole-program-optimization.
    #
    #  # Double ZIP issue: https://github.com/actions/upload-artifact#zipped-artifact-downloads
    #  # We can either zip an already zipped file; or send all files to a zip service, possibly creating a 503.
    #  - name: üì¶ Package
    #    run: |
    #       cd build
    #       7z a -tzip -mx9 "${{env.ARTIFACT_NAME}}.zip" ./hikogui-${{env.VERSION}}
    #
    #  # To ensure that jobs don't overwrite existing artifacts, use a different "name" per job/run.
    #  - name: üì¶ üöÄ Upload Artifact
    #    uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
    #    with:
    #      name: ${{env.ARTIFACT_NAME}}
    #      path: build/${{env.ARTIFACT_NAME}}.zip

# ---------------------------------------------------------------------------------------

  publish-test-results:
    # Only publish test results, when the action runs in your repository's context.
    # In other words: this disables publishing tests results from pull requests.
    # PR test results are published from the standalone workflow "publish-PR-test-results.yml".

    name: "Publish Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always() && ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )

    steps:
      - name: üîΩ Download Artifacts
        uses: actions/download-artifact@v3 # https://github.com/actions/download-artifact
        with:
          path: artifacts

      - name: üëå Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2 # https://github.com/EnricoMi/publish-unit-test-result-action
        if: always()
        with:
          junit_files: artifacts/**/test_results*.xml
