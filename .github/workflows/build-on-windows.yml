#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of hikogui.
#

name: "Build on Windows"
on: [push, pull_request]
jobs:

# ---------------------------------------------------------------------------------------

  build-and-test:
    name: ${{ matrix.config.NAME }}
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
    runs-on: ${{ matrix.config.OS }}

    strategy:
      fail-fast: false
      matrix:
        # Each entry in config has a:
        # - NAME: The name used as the suffix in files, directories and artifacts.
        #         If the name ends with "-debug" code-coverage is being uploaded.
        # - OS: The operating system to run the job on.
        # - VCPKG_TARGET_TRIPLET: The vcpkg target triplet, or empty if cmake should use fetch.
        config:
          - {
              NAME: "vc17-x64-windows-static",
              OS: windows-2022,
              VCPKG_TARGET_TRIPLET: "",
            }

    env:
      PLATFORM: x64
      VCPKG_ROOT: C:\tools\vcpkg

    defaults:
      run:
        shell: cmd

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      - name: ℹ Show Tool Versions
        run: |
          date /T
          time /T
          curl -V
          cmake --version
          msbuild /version
          vcpkg version

      # Build Artifact Name: hikogui-0.3.0-0cda6a2-MSVC19-x64-static-RelWithDebInfo
      - name: ✏ Fetch Versioning Data & Set Artifact Name
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json)
          $VERSION=$(jq -r .version vcpkg.json)
          $SHORT_HASH=$($env:GITHUB_SHA.substring(0,7))
          $ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-${{matrix.config.NAME}}"
          echo "Artifact Name:" $ARTIFACT_NAME
          echo "ARTIFACT_NAME=$($ARTIFACT_NAME)" >> $env:GITHUB_ENV
          echo "VERSION=$($VERSION)" >> $env:GITHUB_ENV

      - name: 📝 Get Vulkan SDK version number
        id: vulkan-version
        uses: hikogui/install-vulkan-sdk-action/sdk-version@v3

      - name: 🎯 Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v1
        with:
          path: ${{steps.vulkan-version.outputs.VULKAN_SDK}}
          key: cache-windows-vulkan-${{steps.vulkan-version.outputs.VULKAN_VERSION}}-2

      - name: 🔽 Install Vulkan SDK
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        uses: hikogui/install-vulkan-sdk-action/install-sdk@v3
        with:
          VULKAN_VERSION: ${{steps.vulkan-version.outputs.VULKAN_VERSION}}
          VULKAN_SDK: ${{steps.vulkan-version.outputs.VULKAN_SDK}}

      - name: 📝 Set VULKAN_SDK
        shell: pwsh
        run: |
          echo "VULKAN_SDK=${{steps.vulkan-version.outputs.VULKAN_SDK}}" >> $env:GITHUB_ENV
          dir ${{env.VULKAN_SDK}}\Include
          dir ${{env.VULKAN_SDK}}\Bin
          dir ${{env.VULKAN_SDK}}\runtime\${{env.PLATFORM}}

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: 🔽 Update VCPKG
        if: matrix.config.VCPKG_TARGET_TRIPLET != ''
        shell: pwsh
        run: |
          git clone -b master --single-branch --depth 1 --quiet https://github.com/microsoft/vcpkg.git "${{env.VCPKG_ROOT}}"
          cd "${{env.VCPKG_ROOT}}"
          .\bootstrap-vcpkg.bat -disableMetrics
          .\vcpkg integrate install --feature-flags=manifests
          .\vcpkg version

      - name: ✏ CMake ➔ Configure (Debug)
        run: cmake --preset=vc17-x64-windows-static-dbg-local

      - name: ✏ CMake ➔ Configure (Release)
        run: cmake --preset=vc17-x64-windows-static-rel-local

      - name: 🙏 CMake ➔ Build (Debug)
        run: cmake --build build-dbg --parallel 1

      - name: 🙏 CMake ➔ Build unit-tests (Debug)
        run: cmake --build build-dbg  --parallel 1 --target=hikogui_tests

      - name: 📦 CMake ➔ Install (Debug)
        run: cmake --install build-dbg

      - name: 🙏 CMake ➔ Build (Release)
        run: cmake --build build-rel --parallel 1

      - name: 🙏 CMake ➔ Build examples (Release)
        run: cmake --build build-rel  --parallel 1 --target=examples

      - name: 📦 CMake ➔ Install (Release)
        run: cmake --install build-rel

      - name: 📦 CMake ➔ Install examples (Release)
        run: cmake --install build-rel --component=examples

      - name: ❔ CHECK important folders, to see if everything is present (after building)
        run: |
          dir /S /B build-dbg
          dir /S /B build-rel
          dir /S /B install

      # The Vulkan Runtime is normally to be found in "C:\windows\systems32", but it's not a system library on CI.
      - name: ✔ ❌✔️ Test
        working-directory: build-dbg
        run: |
          copy ${{env.VULKAN_SDK}}\runtime\${{env.PLATFORM}}\vulkan-1.* .
          hikogui_tests.exe --gtest_output=xml:test_results_gtest.xml

      - name: ♻ Transform Test Results (gtest ➔ junit)
        working-directory: build-dbg
        shell: pwsh
        run: |
          $xsl = New-Object System.Xml.Xsl.XslCompiledTransform
          $xsl.Load("${{github.workspace}}\.github\gtest_to_junit.xsl")
          $xsl.Transform((Resolve-Path .\test_results_gtest.xml), "${{github.workspace}}\test_results_${{matrix.config.NAME}}.xml")

      # We upload multiple files into the same artifact file (zip).
      # Each file is differently named by adding the job name of the matrix as a suffix.
      # This enables the "Unit Test Result" display to show all individual test runs of the matrix.
      # The tests are published after all matrix runs finished (from job: "publish-test-results").
      - name: 🔼 Upload Test Results
        uses: actions/upload-artifact@v2 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: test-results
          path: test_results_*.xml

      - name: 🔽 Install 'OpenCppCoverage' and 'codecov.io Report Uploader'
        if: endsWith(matrix.config.NAME, '-debug') && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          curl -L -O https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe
          OpenCppCoverageSetup-x64-0.9.9.0.exe /VERYSILENT /DIR=.\bin\coverage
          curl -L https://uploader.codecov.io/latest/windows/codecov.exe --output bin\coverage\codecov.exe

      - name: 📑 Generate CodeCoverage Report
        if: endsWith(matrix.config.NAME, '-debug') && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          .\bin\coverage\OpenCppCoverage.exe --sources=src ^
          --excluded_sources=src\*_tests.cpp ^
          --excluded_sources=src\*\*_tests.cpp ^
          --excluded_sources=build-rel\_deps ^
          --excluded_sources=build-dbg\_deps ^
          --export_type=cobertura:hikogui_coverage.xml ^
          --working_dir=.\\build-dbg ^
          -- ".\\build-dbg\\hikogui_tests.exe"

      - name: 📦 🚀 Upload CodeCoverage Report to codecov.io
        if: endsWith(matrix.config.NAME, '-debug') && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v2 # https://github.com/codecov/codecov-action
        with:
          files: ./hikogui_coverage.xml

    # In the future we can do this when building dynamic libraries without whole-program-optimization.
    #
    #  # Double ZIP issue: https://github.com/actions/upload-artifact#zipped-artifact-downloads
    #  # We can either zip an already zipped file; or send all files to a zip service, possibly creating a 503.
    #  - name: 📦 Package
    #    run: |
    #       cd build
    #       7z a -tzip -mx9 "${{env.ARTIFACT_NAME}}.zip" ./hikogui-${{env.VERSION}}
    #
    #  # To ensure that jobs don't overwrite existing artifacts, use a different "name" per job/run.
    #  - name: 📦 🚀 Upload Artifact
    #    uses: actions/upload-artifact@v2 # https://github.com/actions/upload-artifact
    #    with:
    #      name: ${{env.ARTIFACT_NAME}}
    #      path: build/${{env.ARTIFACT_NAME}}.zip

# ---------------------------------------------------------------------------------------

  publish-test-results:
    # Only publish test results, when the action runs in your repository's context.
    # In other words: this disables publishing tests results from pull requests.
    # PR test results are published from the standalone workflow "publish-PR-test-results.yml".

    name: "Publish Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always() && ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )

    steps:
      - name: 🔽 Download Artifacts
        uses: actions/download-artifact@v2 # https://github.com/actions/download-artifact
        with:
          path: artifacts

      - name: 👌 Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1 # https://github.com/EnricoMi/publish-unit-test-result-action
        if: always()
        with:
          files: artifacts/**/test_results*.xml
