#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of hikogui.
#

name: "Build on Windows"
on: [push, pull_request]

# improve CI concurrency by automatically cancelling outdated jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:

# ---------------------------------------------------------------------------------------

  build-and-test:
    name: ${{ matrix.config.NAME }}
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        config:
            - { NAME: "Release", PRESET: "vc17-x64-windows-static-rel-ci" }
            - { NAME: "Debug",   PRESET: "vc17-x64-windows-static-dbg-ci" }

    env:
      PLATFORM: x64
      VCPKG_ROOT: C:\tools\vcpkg

    defaults:
      run:
        shell: cmd

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      # https://community.chocolatey.org/packages/ninja
      # https://community.chocolatey.org/packages/ccache
      - name: 🔽 Install Ninja
        run: choco install ninja ccache

      - name: 🛠️ Show Tool Versions
        run: |
          date /T
          time /T
          cmake --version
          vcpkg --version
          ninja --version
          ccache --version

      # Reminder: This step requires that the CMakePresets for CI contain
      # "CMAKE_CXX_COMPILER_LAUNCHER": "sccache".
      - name: 🎯 Setup Build Cache
        uses: hendrikmuhs/ccache-action@main # https://github.com/hendrikmuhs/ccache-action/
        with:
          variant: sccache
          key: win-ci-build-${{github.ref}}-${{matrix.config.PRESET}}
          restore-keys: |
            win-ci-build-${{github.ref}}-${{matrix.config.PRESET}}
            win-ci-build-${{github.ref}}
            win-ci-build-refs/heads/main
            win-ci-build-

      # Build Artifact Name: hikogui-0.3.0-0cda6a2-vc17-x64-windows-static
      - name: ✏ Fetch Versioning Data & Set Artifact Name
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json)
          $VERSION=$(jq -r .version vcpkg.json)
          $SHORT_HASH=$($env:GITHUB_SHA.substring(0,7))
          $ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-${{matrix.config.PRESET}}"
          echo "Artifact Name:" $ARTIFACT_NAME
          echo "ARTIFACT_NAME=$($ARTIFACT_NAME)" >> $env:GITHUB_ENV
          echo "VERSION=$($VERSION)" >> $env:GITHUB_ENV

      - name: 📝 Get Vulkan SDK version number
        id: vulkan-version
        uses: hikogui/install-vulkan-sdk-action/sdk-version@v4

      - name: 🎯 Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v3
        with:
          path: ${{steps.vulkan-version.outputs.VULKAN_SDK}}
          key: cache-windows-vulkan-${{steps.vulkan-version.outputs.VULKAN_VERSION}}-0

      - name: 🔽 Install Vulkan SDK
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        uses: hikogui/install-vulkan-sdk-action/install-sdk@v4
        with:
          VULKAN_VERSION: ${{steps.vulkan-version.outputs.VULKAN_VERSION}}
          VULKAN_SDK: ${{steps.vulkan-version.outputs.VULKAN_SDK}}

      - name: 📝 Set VULKAN_SDK
        shell: pwsh
        run: |
          echo "VULKAN_SDK=${{steps.vulkan-version.outputs.VULKAN_SDK}}" >> $env:GITHUB_ENV
          dir ${{steps.vulkan-version.outputs.VULKAN_SDK}}\Include
          dir ${{steps.vulkan-version.outputs.VULKAN_SDK}}\Bin
          dir ${{steps.vulkan-version.outputs.VULKAN_SDK}}\runtime\${{env.PLATFORM}}

      - name: 🛠️ Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: ✏ CMake ➔ Configure
        run: cmake --preset=${{matrix.config.PRESET}}

      - name: 🙏 CMake ➔ Build
        run: cmake --build build --parallel 1

      - name: 🙏 CMake ➔ Build unit-tests (Debug)
        if: contains(matrix.config.PRESET, 'deb')
        run: cmake --build build --parallel 1 --target=hikogui_tests

      - name: 🙏 CMake ➔ Build examples (Release)
        if: contains(matrix.config.PRESET, 'rel')
        run: cmake --build build --parallel 1 --target=examples

      - name: 📦 CMake ➔ Install
        run: cmake --install build

      - name: 📦 CMake ➔ Install examples (Release)
        if: contains(matrix.config.PRESET, 'rel')
        run: cmake --install build --component=examples

      # The Vulkan Runtime is normally to be found in "C:\windows\systems32", but it's not a system library on CI.
      - name: 🔽 Install Vulkan Runtime
        working-directory: build
        run: |
          copy ${{env.VULKAN_SDK}}\runtime\${{env.PLATFORM}}\vulkan-1.* .

      - name: ❔ CHECK important folders, to see if everything is present (after building)
        run: |
          dir /S /B build
          dir /S /B install

      - name: ✔ ❌✔️ Test
        working-directory: build
        run: |
          ctest --extra-verbose --output-junit "${{github.workspace}}\test_results_${{matrix.config.PRESET}}.xml"
          type "${{github.workspace}}\build\Testing\Temporary\LastTest.log"
          if exist "${{github.workspace}}\build\Testing\Temporary\LastTestsFailed.log" (
            type "${{github.workspace}}\build\Testing\Temporary\LastTestsFailed.log"
          )

      # We upload multiple files into the same artifact file (zip).
      # Each file is differently named by adding the job name of the matrix as a suffix.
      # This enables the "Unit Test Result" display to show all individual test runs of the matrix.
      # The tests are published after all matrix runs finished (from job: "publish-test-results").
      - name: 🔼 Upload Test Results
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: test-results
          path: test_results_*.xml

      - name: 📑 Generate CodeCoverage Report (Debug)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(matrix.config.PRESET, 'deb')
        run: |
          curl -L -O https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe
          OpenCppCoverageSetup-x64-0.9.9.0.exe /VERYSILENT /DIR=.\bin\coverage
          .\bin\coverage\OpenCppCoverage.exe ^
          --sources=src ^
          --excluded_sources=src\*_tests.cpp ^
          --excluded_sources=src\*\*_tests.cpp ^
          --excluded_sources=build\_deps ^
          --export_type=cobertura:hikogui_coverage.xml ^
          --working_dir=.\\build ^
          --cover_children ^
          -- ctest.exe

      - name: 📦 🚀 Upload CodeCoverage Report to codecov.io (Debug)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(matrix.config.PRESET, 'deb')
        uses: codecov/codecov-action@v3 # https://github.com/codecov/codecov-action
        with:
          files: ./hikogui_coverage.xml

    # In the future we can do this when building dynamic libraries without whole-program-optimization.
    #
    #  # Double ZIP issue: https://github.com/actions/upload-artifact#zipped-artifact-downloads
    #  # We can either zip an already zipped file; or send all files to a zip service, possibly creating a 503.
    #  - name: 📦 Package
    #    run: |
    #       cd build
    #       7z a -tzip -mx9 "${{env.ARTIFACT_NAME}}.zip" ./hikogui-${{env.VERSION}}
    #
    #  # To ensure that jobs don't overwrite existing artifacts, use a different "name" per job/run.
    #  - name: 📦 🚀 Upload Artifact
    #    uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
    #    with:
    #      name: ${{env.ARTIFACT_NAME}}
    #      path: build/${{env.ARTIFACT_NAME}}.zip

# ---------------------------------------------------------------------------------------

  publish-test-results:
    # Only publish test results, when the action runs in your repository's context.
    # In other words: this disables publishing tests results from pull requests.
    # PR test results are published from the standalone workflow "publish-PR-test-results.yml".

    name: "Publish Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always() && ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )

    steps:
      - name: 🔽 Download Artifacts
        uses: actions/download-artifact@v3 # https://github.com/actions/download-artifact
        with:
          path: artifacts

      - name: 👌 Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2 # https://github.com/EnricoMi/publish-unit-test-result-action
        if: always()
        with:
          junit_files: artifacts/**/test_results*.xml
