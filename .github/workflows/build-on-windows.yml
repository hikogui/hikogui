#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of ttauri-project.
#

name: "Build on Windows"

on: [push, pull_request]

jobs:

# ---------------------------------------------------------------------------------------

  build-and-test:

# ---------------------------------------------------------------------------------------

    name: ${{ matrix.config.VCPKG_TARGET_TRIPLET }} PCH:${{ matrix.config.TT_BUILD_PCH }}
    needs: install-vulkan-sdk-and-runtime
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - { BUILD_TYPE: RelWithDebInfo, VCPKG_TARGET_TRIPLET: x64-windows-static, TT_BUILD_PCH: OFF}
          - { BUILD_TYPE: RelWithDebInfo, VCPKG_TARGET_TRIPLET: x64-windows-static, TT_BUILD_PCH: ON}
          - { BUILD_TYPE: Debug,          VCPKG_TARGET_TRIPLET: x64-windows-static, TT_BUILD_PCH: ON}

    env:
      PLATFORM: x64
      VCPKG_ROOT: C:\vcpkg
      VULKAN_SDK: ${{ needs.install-vulkan-sdk-and-runtime.outputs.VULKAN_SDK }}

    defaults:
      run:
        shell: cmd

    steps:
      - name: ü§ò Checkout Code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      - name: ‚Ñπ Show Tool Versions
        run: |
          date /T
          time /T
          curl -V
          cmake --version
          msbuild /version
          vcpkg version
          echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%

      # Build Artifact Name: ttauri-0.3.0-0cda6a2-MSVC19-x64-static-RelWithDebInfo
      - name: ‚úè Fetch Versioning Data & Set Artifact Name
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json)
          $VERSION=$(jq -r .version vcpkg.json)
          $SHORT_HASH=$($env:GITHUB_SHA.substring(0,7))
          $COMPILER="MSVC19"
          $TRIPLET="${{ matrix.config.VCPKG_TARGET_TRIPLET }}"
          $BUILD_TYPE="$env:BUILD_TYPE"
          $ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-$COMPILER-$TRIPLET-$BUILD_TYPE"
          echo "Artifact Name:" $ARTIFACT_NAME
          echo "ARTIFACT_NAME=$($ARTIFACT_NAME)" >> $env:GITHUB_ENV
          echo "VERSION=$($VERSION)" >> $env:GITHUB_ENV

      - name: üéØ Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v1 # https://github.com/actions/cache
        with:
          path: ${{ env.VULKAN_SDK }}
          key: use-wrong-cache-key-to-trigger-partial-matching-of-restore-keys
          restore-keys: cache-windows-vulkan

      - name: üîΩ Install Visual Studio Components for C++, CMake, Win10SDK
        shell: pwsh
        run: |
          $VSConfig = Resolve-Path ".\.github\.vsconfig" | select -ExpandProperty Path
          cd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
          $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "$InstallPath", '--config', "$VSConfig", '--quiet', '--norestart', '--nocache')
          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
          $process.ExitCode

      - name: üì• Setup VC Environment (‚ûî vcvarsall)
        run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM%

      - name: üîΩ Update VCPKG
        run: |
          cd C:\vcpkg
          git pull --quiet
          bootstrap-vcpkg.bat -disableMetrics
          vcpkg integrate install --triplet=${{ matrix.config.VCPKG_TARGET_TRIPLET }} --feature-flags=manifests
          vcpkg version

      - name: üéØ Cache VCPKG
        id: cache-vcpkg
        uses: actions/cache@v1 # https://github.com/actions/cache
        with:
          path: ~\AppData\Local\vcpkg
          key: cache-windows-vcpkg-${{ matrix.config.VCPKG_TARGET_TRIPLET }}-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            cache-windows-vcpkg-${{ matrix.config.VCPKG_TARGET_TRIPLET }}-${{ github.ref }}
            cache-windows-vcpkg-${{ matrix.config.VCPKG_TARGET_TRIPLET }}

      - name: ‚ùî CHECK important folders, to see if everything is present (before building)
        run: |
          dir %VULKAN_SDK%\Bin
          dir %VULKAN_SDK%\runtime\%PLATFORM%
          dir %LocalAppData%\vcpkg

      - name: ‚úè CMake ‚ûî Configure (including VCPKG ‚ûî Install Dependencies)
        run: |
          mkdir build && cd build
          cmake -G "Visual Studio 16 2019" -A ${{ env.PLATFORM }} ..                        ^
                -DCMAKE_BUILD_TYPE=%BUILD_TYPE%                                             ^
                -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake            ^
                -DVCPKG_TARGET_TRIPLET=${{ matrix.config.VCPKG_TARGET_TRIPLET }}            ^
                -DTT_BUILD_PCH=${{ matrix.config.TT_BUILD_PCH }}                            ^
                -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: üôè CMake ‚ûî Build
        run: cmake --build build --config %BUILD_TYPE% -j %NUMBER_OF_PROCESSORS%

      - name: üì¶ CMake ‚ûî Install
        run: cmake --install build --config %BUILD_TYPE% --prefix build/ttauri-%VERSION% --verbose

      - name: ‚ùî CHECK important folders, to see if everything is present (after building)
        run: |
          dir build
          dir /S /B build\vcpkg_installed\${{ matrix.config.VCPKG_TARGET_TRIPLET }}
          dir /S /B build\ttauri-%VERSION%

      # The Vulkan Runtime is normally to be found in "C:\windows\systems32", but it's not a system library on CI.
      - name: Copy Vulkan Runtime (vulkan-1.dll)
        run: |
          copy %VULKAN_SDK%\runtime\%PLATFORM%\vulkan-1.* build\ttauri-%VERSION%\tests
          copy %VULKAN_SDK%\runtime\%PLATFORM%\vulkan-1.* build\ttauri-%VERSION%\examples\ttauri_demo

      - name: ‚úî ‚ùå‚úîÔ∏è Test
        run: |
          cd build\ttauri-%VERSION%\tests
          cd
          ttauri_tests.exe --gtest_output=xml:test_results_gtest.xml

      - name: ‚ôª Transform Test Results (gtest ‚ûî junit)
        shell: pwsh
        run: |
          cd build\ttauri-${{ env.VERSION }}\tests
          $xsl = New-Object System.Xml.Xsl.XslCompiledTransform
          $xsl.Load("${{ github.workspace }}\.github\gtest_to_junit.xsl")
          $xsl.Transform((Resolve-Path .\test_results_gtest.xml), "${{ github.workspace }}\test_results.xml")
          cd ${{ github.workspace }}
          ren test_results.xml test_results_${{ matrix.config.VCPKG_TARGET_TRIPLET }}_PCH_${{ matrix.config.TT_BUILD_PCH }}.xml

      # We upload multiple files into the same artifact file (zip).
      # Each file is differently named by adding the job name of the matrix as a suffix.
      # This enables the "Unit Test Result" display to show all individual test runs of the matrix.
      # The tests are published after all matrix runs finished (from job: "publish-test-results").
      - name: üîº Upload Test Results
        uses: actions/upload-artifact@v2 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: test-results
          path: test_results_*.xml

      - name: üîΩ Install 'OpenCppCoverage' and 'codecov.io Report Uploader'
        if: ${{ matrix.config.BUILD_TYPE == 'Debug' }}
        run: |
          curl -L -O https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe
          OpenCppCoverageSetup-x64-0.9.9.0.exe /VERYSILENT /DIR=.\bin\coverage
          curl -L https://uploader.codecov.io/latest/windows/codecov.exe --output bin\coverage\codecov.exe

      - name: üìë Generate CodeCoverage Report
        if: ${{ matrix.config.BUILD_TYPE == 'Debug' }}
        run: |
          .\bin\coverage\OpenCppCoverage.exe --sources=src        ^
          --excluded_sources=src\*_tests.cpp                      ^
          --excluded_sources=src\*\*_tests.cpp                    ^
          --excluded_sources=build\_deps                          ^
          --export_type=cobertura:ttauri_coverage.xml             ^
          --working_dir=.\\build\ttauri-%VERSION%\tests           ^
          -- ".\\build\ttauri-%VERSION%\tests\\ttauri_tests.exe"

      - name: üì¶ üöÄ Upload CodeCoverage Report to codecov.io
        if: ${{ matrix.config.BUILD_TYPE == 'Debug' }}
        uses: codecov/codecov-action@v2 # https://github.com/codecov/codecov-action
        with:
          files: ./ttauri_coverage.xml

      #
      # We only upload artifacts for static builds with pre-compiled headers (TT_BUILD_PCH:ON).
      #

      # Double ZIP issue: https://github.com/actions/upload-artifact#zipped-artifact-downloads
      # We can either zip an already zipped file; or send all files to a zip service, possibly creating a 503.
      - name: üì¶ Package
        if: ${{ matrix.config.TT_BUILD_PCH == 'ON'}}
        run: |
           cd build
           7z a -tzip -mx9 "%ARTIFACT_NAME%.zip" ./ttauri-%VERSION%

      # To ensure that jobs don't overwrite existing artifacts, use a different "name" per job/run.
      - name: üì¶ üöÄ Upload Artifact
        if: ${{ matrix.config.TT_BUILD_PCH == 'ON'}}
        uses: actions/upload-artifact@v2 # https://github.com/actions/upload-artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}-PCH-${{ matrix.config.TT_BUILD_PCH }}
          path: build/${{ env.ARTIFACT_NAME }}.zip

# ---------------------------------------------------------------------------------------

  install-vulkan-sdk-and-runtime:

# ---------------------------------------------------------------------------------------

    name: "Install Vulkan SDK & Runtime [x64]"
    runs-on: windows-latest
    if: success() || failure() # don't run job, if skipped
    defaults:
      run:
        shell: cmd

    outputs:
      VULKAN_SDK: ${{ steps.vulkan-output.outputs.VULKAN_SDK }}

    steps:

      - name: üì• Set latest VULKAN_VERSION as environment variable
        shell: pwsh
        run: |
          echo 'VULKAN_VERSION<<EOF' >> $env:GITHUB_ENV
          curl https://vulkan.lunarg.com/sdk/latest/windows.txt >> $env:GITHUB_ENV
          echo 'EOF' >> $env:GITHUB_ENV

      - name: üì• Setup Environment Variables
        shell: pwsh
        run: |
          echo VULKAN_SDK=C:\VulkanSDK\${{ env.VULKAN_VERSION }} >> $env:GITHUB_ENV
          $env:BASE_URL="https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/windows"
          echo VULKAN_SDK_URL=$env:BASE_URL/VulkanSDK-${{ env.VULKAN_VERSION }}-Installer.exe?Human=true >> $env:GITHUB_ENV
          echo VULKAN_RUN_URL=$env:BASE_URL/vulkan-runtime-components.zip?Human=true >> $env:GITHUB_ENV

      - name: üéØ Cache VULKAN SDK & Runtime
        id: cache-vulkan
        uses: actions/cache@v1 # https://github.com/actions/cache
        with:
          path: ${{ env.VULKAN_SDK }}
          key: cache-windows-vulkan-${{ env.VULKAN_VERSION }}

      - name: üîΩ Install VULKAN_SDK
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          curl -L --silent --show-error --output VulkanSDK.exe %VULKAN_SDK_URL%
          VulkanSDK.exe /S

      - name: üîΩ Install VULKAN Runtime (‚ûî vulkan-1.dll)
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          curl -L --silent --show-error --output vulkan-runtime.zip %VULKAN_RUN_URL%
          7z e vulkan-runtime.zip -o%VULKAN_SDK%\runtime\x64 */x64

      - name: ‚ùî CHECK important folders, to see if everything is present (after downloading)
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          dir /S /B ${{ env.VULKAN_SDK }}

      - name: ‚úÇ Reduce VULKAN_SDK size before caching
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cd ${{ env.VULKAN_SDK }}
          "Folder size before: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)
          Remove-Item -Recurse -Force "Bin32"
          Remove-Item -Recurse -Force "Demos"
          Remove-Item -Recurse -Force "Lib32"
          Remove-Item -Recurse -Force "Templates"
          Remove-Item -Recurse -Force "Third-Party"
          Remove-Item -Recurse -Force "Tools"
          Remove-Item -Recurse -Force "Tools32"
          "Folder size after: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)

      - name: üì§ Set outputs
        id: vulkan-output
        run: |
         echo ::set-output name=VULKAN_SDK::${{ env.VULKAN_SDK }}

# ---------------------------------------------------------------------------------------

  publish-test-results:

# ---------------------------------------------------------------------------------------

    # Only publish test results, when the action runs in your repository's context.
    # In other words: this disables publishing tests results from pull requests.
    # PR test results are published from the standalone workflow "publish-PR-test-results.yml".

    name: "Publish Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always() && ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )

    steps:

      - name: üîΩ Download Artifacts
        uses: actions/download-artifact@v2 # https://github.com/actions/download-artifact
        with:
          path: artifacts

      - name: üëå Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1 # https://github.com/EnricoMi/publish-unit-test-result-action
        if: always()
        with:
          files: artifacts/**/test_results*.xml
