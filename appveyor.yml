#-------------------------------------------------------------------
# AppVeyor CI
#
# appveyor.yml reference:
# https://www.appveyor.com/docs/appveyor-yml/
#-------------------------------------------------------------------

# Build worker image (VM template)
image: Visual Studio 2019 Preview

clone_depth: 5

version: '{build}'

#-------------------------------------------------------------------
#     Build configuration
#-------------------------------------------------------------------

platform: x64

configuration:
  - Debug
  #- Release

environment:
  # appveyor
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  APPVEYOR_RDP_PASSWORD: somePassword#123
  # vcpkg
  VCPKG_TARGET_TRIPLET: "%PLATFORM%-windows-static"
  VCPKG_ROOT: "C:\\Tools\\vcpkg"
  # vulkan
  VULKAN_VERSION: "1.2.162.1"
  VULKAN_SDK: "C:\\VulkanSDK\\%VULKAN_VERSION%"

#matrix:
  # let the whole build fail immediately, if one of the job fails
  # fast_finish: true

# preserve some things until an appveyor.yml file change
cache:
  - C:\Tools\vcpkg\installed\ -> appveyor.yml
  - '%VULKAN_SDK%\Bin -> appveyor.yml'
  - '%VULKAN_SDK%\Bin32 -> appveyor.yml'
  - '%VULKAN_SDK%\Include -> appveyor.yml'
  - '%VULKAN_SDK%\Source\lib -> appveyor.yml'
  - '%VULKAN_SDK%\Source\lib32 -> appveyor.yml'
  - '%VULKAN_SDK%\spirv-tools -> appveyor.yml'

build:
  # MSBuild verbosity level
  verbosity: minimal

# scripts that are called at very beginning, before repo cloning
init:
  - date /T & time /T
  - curl -V
  - cmake --version
  - msbuild /version
  - vcpkg version
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
      }
      else
      {
        Update-AppveyorBuild -Version "dev-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
      }

install:
  # Get Git Submodules
  #- git submodule update --init --recursive
  # Update CMake
  #- choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
  #- refreshenv
  # Update of VCPKG
  - cd C:\Tools\vcpkg
  - git pull --quiet
  - .\bootstrap-vcpkg.bat -disableMetrics
  - vcpkg version
  # Install VULKAN_SDK
  - curl -L --silent --show-error --output Vulkan_SDK_Installer.exe https://sdk.lunarg.com/sdk/download/%VULKAN_VERSION%/windows/VulkanSDK-%VULKAN_VERSION%-Installer.exe?Human=true
  - Vulkan_SDK_Installer.exe /S
  - dir %VULKAN_SDK%
  # Install and build dependencies using VCPKG
  - cd C:\projects\ttauri
  - vcpkg integrate install --feature-flags=manifests
  - vcpkg install --triplet=%VCPKG_TARGET_TRIPLET% --feature-flags=manifests

before_build:
  # CHECK important folders to see if everything is present
  - dir C:\projects\ttauri
  - dir C:\projects\ttauri\vcpkg_installed
  - dir %VULKAN_SDK%\Bin
  #- dir C:\Tools\vcpkg\installed
  # return
  - cd C:\projects\ttauri

build_script:
  # generate build files
  - cmake -G "Visual Studio 16 2019" -A %PLATFORM% -B ..\ttauri-build . -DCMAKE_TOOLCHAIN_FILE=C:/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DTT_BUILD_TESTS:BOOL=ON -DTT_BUILD_OPTIMIZED:BOOL=ON -DTT_BUILD_PCH:BOOL=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
  # build
  - cmake --build ..\ttauri-build --config %configuration% -- /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

after_build:
   # CHECK important folders to see if all build artifacts are present
   - dir C:\projects\ttauri-build

#-------------------------------------------------------------------
#     Tests
#-------------------------------------------------------------------

#before_test:
#  - set PATH=%PATH%;C:\projects\ttauri-build\%configuration%

#test_script:
#  - C:\projects\ttauri-build\tests\%configuration%\ttauri-tests.exe

#-------------------------------------------------------------------
#     Build Artifacts
#-------------------------------------------------------------------

#artifacts:
#  - path: ttauri.zip
#    name: ttauri_lib_zip
#  - path: ttauri_examples.zip
#    name: ttauri_examples_zip

#-------------------------------------------------------------------
#     Deployment configuration
#-------------------------------------------------------------------

# deploy to Github Releases on tag push
#deploy:
#  provider: GitHub
#  release: 'ttauri $(APPVEYOR_REPO_TAG_NAME)'
#  tag: $(APPVEYOR_REPO_TAG_NAME)
#  #description: '[**Changelog**](https://github.com/ttauri-project/ttauri/blob/master/CHANGELOG.md)'
#  artifact: ttauri_lib_zip, ttauri_examples_zip
#  draft: false
#  prerelease: false
#  force_update: true               # overwrite files of existing release on GitHub (for re-releasing)
#  on:
#    branch: master                 # release from master branch only
#    appveyor_repo_tag: true        # deploy on tag push only
#  auth_token:                      # encrypted token from GitHub
#    secure: *hash*

#-------------------------------------------------------------------
#     Accessing Windows build worker via Remote Desktop (RDP)
#-------------------------------------------------------------------

# Enable RDP session to Appveyor server by enabling the two on_finish lines.
# You connect using a remote desktop connection (e.g. using mstsc.exe).
# Use PW from APPVEYOR_RDP_PASSWORD above. A session lasts 60min max.
# Do not forget to disable the following lines, when you solved the problem.

#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))