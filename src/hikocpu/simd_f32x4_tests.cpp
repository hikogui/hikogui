// Copyright Take Vos 2020-2022.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

#include "simd_intf.hpp"
#include "../macros.hpp"
#include <hikotest/hikotest.hpp>

TEST_SUITE(simd_f32x4_suite)
{

TEST_CASE(arithmetic_test)
{
    auto const tmp1 = hi::f32x4{9.0f, 6.0f, 4.0f, 14.0f};
    auto const tmp2 = hi::f32x4{3.0f, -2.0f, 8.0f, 7.0f};

    REQUIRE(tmp1 + tmp2 == hi::f32x4(12.0f, 4.0f, 12.0f, 21.0f));
    REQUIRE(tmp1 - tmp2 == hi::f32x4(6.0f, 8.0f, -4.0f, 7.0f));
    REQUIRE(tmp1 * tmp2 == hi::f32x4(27.0f, -12.0f, 32.0f, 98.0f));
    REQUIRE(tmp1 / tmp2 == hi::f32x4(3.0f, -3.0f, 0.5f, 2.0f));

    {
        auto tmp = tmp1;
        tmp += tmp2;
        REQUIRE(tmp == hi::f32x4(12.0f, 4.0f, 12.0f, 21.0f));
    }

    {
        auto tmp = tmp1;
        tmp -= tmp2;
        REQUIRE(tmp == hi::f32x4(6.0f, 8.0f, -4.0f, 7.0f));
    }

    {
        auto tmp = tmp1;
        tmp *= tmp2;
        REQUIRE(tmp == hi::f32x4(27.0f, -12.0f, 32.0f, 98.0f));
    }

    {
        auto tmp = tmp1;
        tmp /= tmp2;
        REQUIRE(tmp == hi::f32x4(3.0f, -3.0f, 0.5f, 2.0f));
    }
}

TEST_CASE(hypot_test)
{
    auto const tmp = hi::f32x4(2.0f, 3.0f, 4.0f, 0.0f);

    REQUIRE(hypot<0b0111>(tmp).x() == 5.3851f, 0.001f);
}

TEST_CASE(dot_product_test)
{
    auto const a = hi::f32x4(1.0f, 3.0f, -5.0f, 0.0f);
    auto const b = hi::f32x4(4.0f, -2.0f, -1.0f, 0.0f);

    REQUIRE(dot<0b0111>(a, b).x() == 3.0f);
}

TEST_CASE(getters_test)
{
    auto const tmp = hi::f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    REQUIRE(tmp.x() == 2.0f);
    REQUIRE(tmp.y() == 3.0f);
    REQUIRE(tmp.z() == 4.0f);
    REQUIRE(tmp.w() == 5.0f);
    REQUIRE(tmp.r() == 2.0f);
    REQUIRE(tmp.g() == 3.0f);
    REQUIRE(tmp.b() == 4.0f);
    REQUIRE(tmp.a() == 5.0f);
    REQUIRE(tmp[0] == 2.0f);
    REQUIRE(tmp[1] == 3.0f);
    REQUIRE(tmp[2] == 4.0f);
    REQUIRE(tmp[3] == 5.0f);
}

TEST_CASE(normalize_test)
{
    auto tmp = hi::f32x4{2.0f, 3.0f, 4.0f, 0.0f};
    REQUIRE(normalize<0b0111>(tmp) == hi::f32x4(0.37139f, 0.55708f, 0.74278f, 0.0f), 0.001f);
}

TEST_CASE(setters_test)
{
    auto tmp = hi::f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    tmp.x() = 12.0f;
    REQUIRE(tmp == hi::f32x4(12.0f, 3.0f, 4.0f, 5.0f));
    tmp.y() = 13.0f;
    REQUIRE(tmp == hi::f32x4(12.0f, 13.0f, 4.0f, 5.0f));
    tmp.z() = 14.0f;
    REQUIRE(tmp == hi::f32x4(12.0f, 13.0f, 14.0f, 5.0f));
    tmp.w() = 15.0f;
    REQUIRE(tmp == hi::f32x4(12.0f, 13.0f, 14.0f, 15.0f));
    tmp.r() = 22.0f;
    REQUIRE(tmp == hi::f32x4(22.0f, 13.0f, 14.0f, 15.0f));
    tmp.g() = 23.0f;
    REQUIRE(tmp == hi::f32x4(22.0f, 23.0f, 14.0f, 15.0f));
    tmp.b() = 24.0f;
    REQUIRE(tmp == hi::f32x4(22.0f, 23.0f, 24.0f, 15.0f));
    tmp.a() = 25.0f;
    REQUIRE(tmp == hi::f32x4(22.0f, 23.0f, 24.0f, 25.0f));
}

TEST_CASE(swizzle_test)
{
    auto const tmp = hi::f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    // Returns a 4D vector.
    REQUIRE(tmp._0000() == hi::f32x4(0.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0001() == hi::f32x4(0.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._000x() == hi::f32x4(0.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._000y() == hi::f32x4(0.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._000z() == hi::f32x4(0.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._000w() == hi::f32x4(0.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0010() == hi::f32x4(0.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0011() == hi::f32x4(0.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._001x() == hi::f32x4(0.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._001y() == hi::f32x4(0.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._001z() == hi::f32x4(0.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._001w() == hi::f32x4(0.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._00x0() == hi::f32x4(0.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._00x1() == hi::f32x4(0.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._00xx() == hi::f32x4(0.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._00xy() == hi::f32x4(0.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._00xz() == hi::f32x4(0.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._00xw() == hi::f32x4(0.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._00y0() == hi::f32x4(0.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._00y1() == hi::f32x4(0.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._00yx() == hi::f32x4(0.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._00yy() == hi::f32x4(0.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._00yz() == hi::f32x4(0.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._00yw() == hi::f32x4(0.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._00z0() == hi::f32x4(0.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._00z1() == hi::f32x4(0.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._00zx() == hi::f32x4(0.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._00zy() == hi::f32x4(0.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._00zz() == hi::f32x4(0.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._00zw() == hi::f32x4(0.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._00w0() == hi::f32x4(0.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._00w1() == hi::f32x4(0.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._00wx() == hi::f32x4(0.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._00wy() == hi::f32x4(0.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._00wz() == hi::f32x4(0.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._00ww() == hi::f32x4(0.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0000() == hi::f32x4(0.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0001() == hi::f32x4(0.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._000x() == hi::f32x4(0.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._000y() == hi::f32x4(0.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._000z() == hi::f32x4(0.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._000w() == hi::f32x4(0.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0010() == hi::f32x4(0.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0011() == hi::f32x4(0.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._001x() == hi::f32x4(0.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._001y() == hi::f32x4(0.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._001z() == hi::f32x4(0.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._001w() == hi::f32x4(0.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._00x0() == hi::f32x4(0.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._00x1() == hi::f32x4(0.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._00xx() == hi::f32x4(0.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._00xy() == hi::f32x4(0.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._00xz() == hi::f32x4(0.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._00xw() == hi::f32x4(0.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._00y0() == hi::f32x4(0.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._00y1() == hi::f32x4(0.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._00yx() == hi::f32x4(0.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._00yy() == hi::f32x4(0.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._00yz() == hi::f32x4(0.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._00yw() == hi::f32x4(0.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._00z0() == hi::f32x4(0.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._00z1() == hi::f32x4(0.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._00zx() == hi::f32x4(0.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._00zy() == hi::f32x4(0.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._00zz() == hi::f32x4(0.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._00zw() == hi::f32x4(0.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._00w0() == hi::f32x4(0.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._00w1() == hi::f32x4(0.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._00wx() == hi::f32x4(0.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._00wy() == hi::f32x4(0.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._00wz() == hi::f32x4(0.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._00ww() == hi::f32x4(0.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0100() == hi::f32x4(0.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0101() == hi::f32x4(0.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp._010x() == hi::f32x4(0.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp._010y() == hi::f32x4(0.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp._010z() == hi::f32x4(0.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp._010w() == hi::f32x4(0.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0110() == hi::f32x4(0.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0111() == hi::f32x4(0.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp._011x() == hi::f32x4(0.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp._011y() == hi::f32x4(0.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp._011z() == hi::f32x4(0.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp._011w() == hi::f32x4(0.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp._01x0() == hi::f32x4(0.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp._01x1() == hi::f32x4(0.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp._01xx() == hi::f32x4(0.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp._01xy() == hi::f32x4(0.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp._01xz() == hi::f32x4(0.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp._01xw() == hi::f32x4(0.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp._01y0() == hi::f32x4(0.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp._01y1() == hi::f32x4(0.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp._01yx() == hi::f32x4(0.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp._01yy() == hi::f32x4(0.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp._01yz() == hi::f32x4(0.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp._01yw() == hi::f32x4(0.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp._01z0() == hi::f32x4(0.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp._01z1() == hi::f32x4(0.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp._01zx() == hi::f32x4(0.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp._01zy() == hi::f32x4(0.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp._01zz() == hi::f32x4(0.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp._01zw() == hi::f32x4(0.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp._01w0() == hi::f32x4(0.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp._01w1() == hi::f32x4(0.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp._01wx() == hi::f32x4(0.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp._01wy() == hi::f32x4(0.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp._01wz() == hi::f32x4(0.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp._01ww() == hi::f32x4(0.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0x00() == hi::f32x4(0.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0x01() == hi::f32x4(0.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0x0x() == hi::f32x4(0.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0x0y() == hi::f32x4(0.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0x0z() == hi::f32x4(0.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0x0w() == hi::f32x4(0.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0x10() == hi::f32x4(0.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0x11() == hi::f32x4(0.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0x1x() == hi::f32x4(0.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0x1y() == hi::f32x4(0.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0x1z() == hi::f32x4(0.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0x1w() == hi::f32x4(0.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0xx0() == hi::f32x4(0.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0xx1() == hi::f32x4(0.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0xxx() == hi::f32x4(0.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0xxy() == hi::f32x4(0.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0xxz() == hi::f32x4(0.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0xxw() == hi::f32x4(0.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0xy0() == hi::f32x4(0.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0xy1() == hi::f32x4(0.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0xyx() == hi::f32x4(0.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0xyy() == hi::f32x4(0.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0xyz() == hi::f32x4(0.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0xyw() == hi::f32x4(0.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0xz0() == hi::f32x4(0.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0xz1() == hi::f32x4(0.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0xzx() == hi::f32x4(0.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0xzy() == hi::f32x4(0.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0xzz() == hi::f32x4(0.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0xzw() == hi::f32x4(0.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0xw0() == hi::f32x4(0.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0xw1() == hi::f32x4(0.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0xwx() == hi::f32x4(0.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0xwy() == hi::f32x4(0.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0xwz() == hi::f32x4(0.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0xww() == hi::f32x4(0.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0y00() == hi::f32x4(0.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0y01() == hi::f32x4(0.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0y0x() == hi::f32x4(0.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0y0y() == hi::f32x4(0.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0y0z() == hi::f32x4(0.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0y0w() == hi::f32x4(0.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0y10() == hi::f32x4(0.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0y11() == hi::f32x4(0.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0y1x() == hi::f32x4(0.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0y1y() == hi::f32x4(0.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0y1z() == hi::f32x4(0.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0y1w() == hi::f32x4(0.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0yx0() == hi::f32x4(0.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0yx1() == hi::f32x4(0.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0yxx() == hi::f32x4(0.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0yxy() == hi::f32x4(0.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0yxz() == hi::f32x4(0.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0yxw() == hi::f32x4(0.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0yy0() == hi::f32x4(0.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0yy1() == hi::f32x4(0.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0yyx() == hi::f32x4(0.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0yyy() == hi::f32x4(0.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0yyz() == hi::f32x4(0.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0yyw() == hi::f32x4(0.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0yz0() == hi::f32x4(0.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0yz1() == hi::f32x4(0.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0yzx() == hi::f32x4(0.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0yzy() == hi::f32x4(0.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0yzz() == hi::f32x4(0.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0yzw() == hi::f32x4(0.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0yw0() == hi::f32x4(0.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0yw1() == hi::f32x4(0.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0ywx() == hi::f32x4(0.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0ywy() == hi::f32x4(0.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0ywz() == hi::f32x4(0.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0yww() == hi::f32x4(0.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0z00() == hi::f32x4(0.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0z01() == hi::f32x4(0.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0z0x() == hi::f32x4(0.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0z0y() == hi::f32x4(0.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0z0z() == hi::f32x4(0.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0z0w() == hi::f32x4(0.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0z10() == hi::f32x4(0.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0z11() == hi::f32x4(0.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0z1x() == hi::f32x4(0.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0z1y() == hi::f32x4(0.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0z1z() == hi::f32x4(0.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0z1w() == hi::f32x4(0.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0zx0() == hi::f32x4(0.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0zx1() == hi::f32x4(0.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0zxx() == hi::f32x4(0.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0zxy() == hi::f32x4(0.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0zxz() == hi::f32x4(0.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0zxw() == hi::f32x4(0.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0zy0() == hi::f32x4(0.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0zy1() == hi::f32x4(0.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0zyx() == hi::f32x4(0.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0zyy() == hi::f32x4(0.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0zyz() == hi::f32x4(0.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0zyw() == hi::f32x4(0.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0zz0() == hi::f32x4(0.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0zz1() == hi::f32x4(0.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0zzx() == hi::f32x4(0.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0zzy() == hi::f32x4(0.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0zzz() == hi::f32x4(0.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0zzw() == hi::f32x4(0.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0zw0() == hi::f32x4(0.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0zw1() == hi::f32x4(0.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0zwx() == hi::f32x4(0.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0zwy() == hi::f32x4(0.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0zwz() == hi::f32x4(0.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0zww() == hi::f32x4(0.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0w00() == hi::f32x4(0.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0w01() == hi::f32x4(0.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0w0x() == hi::f32x4(0.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0w0y() == hi::f32x4(0.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0w0z() == hi::f32x4(0.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0w0w() == hi::f32x4(0.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0w10() == hi::f32x4(0.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0w11() == hi::f32x4(0.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0w1x() == hi::f32x4(0.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0w1y() == hi::f32x4(0.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0w1z() == hi::f32x4(0.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0w1w() == hi::f32x4(0.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0wx0() == hi::f32x4(0.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0wx1() == hi::f32x4(0.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0wxx() == hi::f32x4(0.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0wxy() == hi::f32x4(0.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0wxz() == hi::f32x4(0.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0wxw() == hi::f32x4(0.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0wy0() == hi::f32x4(0.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0wy1() == hi::f32x4(0.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0wyx() == hi::f32x4(0.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0wyy() == hi::f32x4(0.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0wyz() == hi::f32x4(0.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0wyw() == hi::f32x4(0.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0wz0() == hi::f32x4(0.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0wz1() == hi::f32x4(0.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0wzx() == hi::f32x4(0.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0wzy() == hi::f32x4(0.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0wzz() == hi::f32x4(0.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0wzw() == hi::f32x4(0.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0ww0() == hi::f32x4(0.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0ww1() == hi::f32x4(0.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0wwx() == hi::f32x4(0.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0wwy() == hi::f32x4(0.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0wwz() == hi::f32x4(0.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0www() == hi::f32x4(0.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp._1000() == hi::f32x4(1.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1001() == hi::f32x4(1.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._100x() == hi::f32x4(1.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._100y() == hi::f32x4(1.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._100z() == hi::f32x4(1.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._100w() == hi::f32x4(1.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1010() == hi::f32x4(1.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1011() == hi::f32x4(1.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._101x() == hi::f32x4(1.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._101y() == hi::f32x4(1.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._101z() == hi::f32x4(1.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._101w() == hi::f32x4(1.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._10x0() == hi::f32x4(1.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._10x1() == hi::f32x4(1.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._10xx() == hi::f32x4(1.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._10xy() == hi::f32x4(1.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._10xz() == hi::f32x4(1.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._10xw() == hi::f32x4(1.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._10y0() == hi::f32x4(1.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._10y1() == hi::f32x4(1.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._10yx() == hi::f32x4(1.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._10yy() == hi::f32x4(1.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._10yz() == hi::f32x4(1.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._10yw() == hi::f32x4(1.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._10z0() == hi::f32x4(1.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._10z1() == hi::f32x4(1.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._10zx() == hi::f32x4(1.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._10zy() == hi::f32x4(1.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._10zz() == hi::f32x4(1.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._10zw() == hi::f32x4(1.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._10w0() == hi::f32x4(1.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._10w1() == hi::f32x4(1.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._10wx() == hi::f32x4(1.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._10wy() == hi::f32x4(1.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._10wz() == hi::f32x4(1.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._10ww() == hi::f32x4(1.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1000() == hi::f32x4(1.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1001() == hi::f32x4(1.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._100x() == hi::f32x4(1.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._100y() == hi::f32x4(1.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._100z() == hi::f32x4(1.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._100w() == hi::f32x4(1.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1010() == hi::f32x4(1.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1011() == hi::f32x4(1.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._101x() == hi::f32x4(1.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._101y() == hi::f32x4(1.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._101z() == hi::f32x4(1.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._101w() == hi::f32x4(1.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._10x0() == hi::f32x4(1.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._10x1() == hi::f32x4(1.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._10xx() == hi::f32x4(1.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._10xy() == hi::f32x4(1.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._10xz() == hi::f32x4(1.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._10xw() == hi::f32x4(1.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._10y0() == hi::f32x4(1.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._10y1() == hi::f32x4(1.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._10yx() == hi::f32x4(1.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._10yy() == hi::f32x4(1.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._10yz() == hi::f32x4(1.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._10yw() == hi::f32x4(1.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._10z0() == hi::f32x4(1.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._10z1() == hi::f32x4(1.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._10zx() == hi::f32x4(1.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._10zy() == hi::f32x4(1.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._10zz() == hi::f32x4(1.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._10zw() == hi::f32x4(1.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._10w0() == hi::f32x4(1.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._10w1() == hi::f32x4(1.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._10wx() == hi::f32x4(1.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._10wy() == hi::f32x4(1.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._10wz() == hi::f32x4(1.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._10ww() == hi::f32x4(1.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1100() == hi::f32x4(1.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1101() == hi::f32x4(1.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp._110x() == hi::f32x4(1.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp._110y() == hi::f32x4(1.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp._110z() == hi::f32x4(1.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp._110w() == hi::f32x4(1.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1110() == hi::f32x4(1.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1111() == hi::f32x4(1.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp._111x() == hi::f32x4(1.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp._111y() == hi::f32x4(1.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp._111z() == hi::f32x4(1.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp._111w() == hi::f32x4(1.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp._11x0() == hi::f32x4(1.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp._11x1() == hi::f32x4(1.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp._11xx() == hi::f32x4(1.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp._11xy() == hi::f32x4(1.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp._11xz() == hi::f32x4(1.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp._11xw() == hi::f32x4(1.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp._11y0() == hi::f32x4(1.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp._11y1() == hi::f32x4(1.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp._11yx() == hi::f32x4(1.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp._11yy() == hi::f32x4(1.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp._11yz() == hi::f32x4(1.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp._11yw() == hi::f32x4(1.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp._11z0() == hi::f32x4(1.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp._11z1() == hi::f32x4(1.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp._11zx() == hi::f32x4(1.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp._11zy() == hi::f32x4(1.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp._11zz() == hi::f32x4(1.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp._11zw() == hi::f32x4(1.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp._11w0() == hi::f32x4(1.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp._11w1() == hi::f32x4(1.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp._11wx() == hi::f32x4(1.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp._11wy() == hi::f32x4(1.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp._11wz() == hi::f32x4(1.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp._11ww() == hi::f32x4(1.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1x00() == hi::f32x4(1.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1x01() == hi::f32x4(1.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1x0x() == hi::f32x4(1.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1x0y() == hi::f32x4(1.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1x0z() == hi::f32x4(1.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1x0w() == hi::f32x4(1.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1x10() == hi::f32x4(1.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1x11() == hi::f32x4(1.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1x1x() == hi::f32x4(1.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1x1y() == hi::f32x4(1.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1x1z() == hi::f32x4(1.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1x1w() == hi::f32x4(1.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1xx0() == hi::f32x4(1.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1xx1() == hi::f32x4(1.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1xxx() == hi::f32x4(1.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1xxy() == hi::f32x4(1.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1xxz() == hi::f32x4(1.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1xxw() == hi::f32x4(1.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1xy0() == hi::f32x4(1.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1xy1() == hi::f32x4(1.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1xyx() == hi::f32x4(1.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1xyy() == hi::f32x4(1.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1xyz() == hi::f32x4(1.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1xyw() == hi::f32x4(1.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1xz0() == hi::f32x4(1.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1xz1() == hi::f32x4(1.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1xzx() == hi::f32x4(1.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1xzy() == hi::f32x4(1.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1xzz() == hi::f32x4(1.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1xzw() == hi::f32x4(1.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1xw0() == hi::f32x4(1.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1xw1() == hi::f32x4(1.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1xwx() == hi::f32x4(1.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1xwy() == hi::f32x4(1.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1xwz() == hi::f32x4(1.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1xww() == hi::f32x4(1.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1y00() == hi::f32x4(1.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1y01() == hi::f32x4(1.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1y0x() == hi::f32x4(1.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1y0y() == hi::f32x4(1.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1y0z() == hi::f32x4(1.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1y0w() == hi::f32x4(1.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1y10() == hi::f32x4(1.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1y11() == hi::f32x4(1.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1y1x() == hi::f32x4(1.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1y1y() == hi::f32x4(1.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1y1z() == hi::f32x4(1.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1y1w() == hi::f32x4(1.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1yx0() == hi::f32x4(1.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1yx1() == hi::f32x4(1.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1yxx() == hi::f32x4(1.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1yxy() == hi::f32x4(1.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1yxz() == hi::f32x4(1.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1yxw() == hi::f32x4(1.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1yy0() == hi::f32x4(1.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1yy1() == hi::f32x4(1.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1yyx() == hi::f32x4(1.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1yyy() == hi::f32x4(1.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1yyz() == hi::f32x4(1.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1yyw() == hi::f32x4(1.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1yz0() == hi::f32x4(1.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1yz1() == hi::f32x4(1.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1yzx() == hi::f32x4(1.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1yzy() == hi::f32x4(1.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1yzz() == hi::f32x4(1.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1yzw() == hi::f32x4(1.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1yw0() == hi::f32x4(1.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1yw1() == hi::f32x4(1.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1ywx() == hi::f32x4(1.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1ywy() == hi::f32x4(1.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1ywz() == hi::f32x4(1.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1yww() == hi::f32x4(1.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1z00() == hi::f32x4(1.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1z01() == hi::f32x4(1.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1z0x() == hi::f32x4(1.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1z0y() == hi::f32x4(1.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1z0z() == hi::f32x4(1.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1z0w() == hi::f32x4(1.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1z10() == hi::f32x4(1.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1z11() == hi::f32x4(1.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1z1x() == hi::f32x4(1.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1z1y() == hi::f32x4(1.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1z1z() == hi::f32x4(1.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1z1w() == hi::f32x4(1.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1zx0() == hi::f32x4(1.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1zx1() == hi::f32x4(1.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1zxx() == hi::f32x4(1.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1zxy() == hi::f32x4(1.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1zxz() == hi::f32x4(1.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1zxw() == hi::f32x4(1.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1zy0() == hi::f32x4(1.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1zy1() == hi::f32x4(1.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1zyx() == hi::f32x4(1.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1zyy() == hi::f32x4(1.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1zyz() == hi::f32x4(1.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1zyw() == hi::f32x4(1.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1zz0() == hi::f32x4(1.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1zz1() == hi::f32x4(1.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1zzx() == hi::f32x4(1.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1zzy() == hi::f32x4(1.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1zzz() == hi::f32x4(1.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1zzw() == hi::f32x4(1.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1zw0() == hi::f32x4(1.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1zw1() == hi::f32x4(1.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1zwx() == hi::f32x4(1.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1zwy() == hi::f32x4(1.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1zwz() == hi::f32x4(1.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1zww() == hi::f32x4(1.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1w00() == hi::f32x4(1.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1w01() == hi::f32x4(1.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1w0x() == hi::f32x4(1.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1w0y() == hi::f32x4(1.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1w0z() == hi::f32x4(1.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1w0w() == hi::f32x4(1.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1w10() == hi::f32x4(1.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1w11() == hi::f32x4(1.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1w1x() == hi::f32x4(1.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1w1y() == hi::f32x4(1.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1w1z() == hi::f32x4(1.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1w1w() == hi::f32x4(1.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1wx0() == hi::f32x4(1.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1wx1() == hi::f32x4(1.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1wxx() == hi::f32x4(1.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1wxy() == hi::f32x4(1.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1wxz() == hi::f32x4(1.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1wxw() == hi::f32x4(1.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1wy0() == hi::f32x4(1.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1wy1() == hi::f32x4(1.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1wyx() == hi::f32x4(1.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1wyy() == hi::f32x4(1.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1wyz() == hi::f32x4(1.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1wyw() == hi::f32x4(1.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1wz0() == hi::f32x4(1.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1wz1() == hi::f32x4(1.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1wzx() == hi::f32x4(1.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1wzy() == hi::f32x4(1.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1wzz() == hi::f32x4(1.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1wzw() == hi::f32x4(1.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1ww0() == hi::f32x4(1.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1ww1() == hi::f32x4(1.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1wwx() == hi::f32x4(1.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1wwy() == hi::f32x4(1.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1wwz() == hi::f32x4(1.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1www() == hi::f32x4(1.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.x000() == hi::f32x4(2.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.x001() == hi::f32x4(2.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.x00x() == hi::f32x4(2.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.x00y() == hi::f32x4(2.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.x00z() == hi::f32x4(2.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.x00w() == hi::f32x4(2.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.x010() == hi::f32x4(2.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.x011() == hi::f32x4(2.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.x01x() == hi::f32x4(2.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.x01y() == hi::f32x4(2.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.x01z() == hi::f32x4(2.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.x01w() == hi::f32x4(2.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.x0x0() == hi::f32x4(2.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.x0x1() == hi::f32x4(2.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.x0xx() == hi::f32x4(2.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.x0xy() == hi::f32x4(2.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.x0xz() == hi::f32x4(2.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.x0xw() == hi::f32x4(2.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.x0y0() == hi::f32x4(2.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.x0y1() == hi::f32x4(2.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.x0yx() == hi::f32x4(2.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.x0yy() == hi::f32x4(2.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.x0yz() == hi::f32x4(2.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.x0yw() == hi::f32x4(2.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.x0z0() == hi::f32x4(2.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.x0z1() == hi::f32x4(2.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.x0zx() == hi::f32x4(2.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.x0zy() == hi::f32x4(2.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.x0zz() == hi::f32x4(2.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.x0zw() == hi::f32x4(2.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.x0w0() == hi::f32x4(2.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.x0w1() == hi::f32x4(2.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.x0wx() == hi::f32x4(2.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.x0wy() == hi::f32x4(2.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.x0wz() == hi::f32x4(2.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.x0ww() == hi::f32x4(2.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.x000() == hi::f32x4(2.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.x001() == hi::f32x4(2.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.x00x() == hi::f32x4(2.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.x00y() == hi::f32x4(2.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.x00z() == hi::f32x4(2.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.x00w() == hi::f32x4(2.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.x010() == hi::f32x4(2.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.x011() == hi::f32x4(2.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.x01x() == hi::f32x4(2.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.x01y() == hi::f32x4(2.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.x01z() == hi::f32x4(2.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.x01w() == hi::f32x4(2.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.x0x0() == hi::f32x4(2.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.x0x1() == hi::f32x4(2.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.x0xx() == hi::f32x4(2.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.x0xy() == hi::f32x4(2.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.x0xz() == hi::f32x4(2.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.x0xw() == hi::f32x4(2.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.x0y0() == hi::f32x4(2.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.x0y1() == hi::f32x4(2.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.x0yx() == hi::f32x4(2.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.x0yy() == hi::f32x4(2.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.x0yz() == hi::f32x4(2.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.x0yw() == hi::f32x4(2.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.x0z0() == hi::f32x4(2.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.x0z1() == hi::f32x4(2.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.x0zx() == hi::f32x4(2.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.x0zy() == hi::f32x4(2.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.x0zz() == hi::f32x4(2.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.x0zw() == hi::f32x4(2.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.x0w0() == hi::f32x4(2.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.x0w1() == hi::f32x4(2.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.x0wx() == hi::f32x4(2.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.x0wy() == hi::f32x4(2.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.x0wz() == hi::f32x4(2.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.x0ww() == hi::f32x4(2.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.x100() == hi::f32x4(2.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.x101() == hi::f32x4(2.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.x10x() == hi::f32x4(2.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.x10y() == hi::f32x4(2.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.x10z() == hi::f32x4(2.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.x10w() == hi::f32x4(2.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.x110() == hi::f32x4(2.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.x111() == hi::f32x4(2.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.x11x() == hi::f32x4(2.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.x11y() == hi::f32x4(2.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.x11z() == hi::f32x4(2.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.x11w() == hi::f32x4(2.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.x1x0() == hi::f32x4(2.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.x1x1() == hi::f32x4(2.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.x1xx() == hi::f32x4(2.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.x1xy() == hi::f32x4(2.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.x1xz() == hi::f32x4(2.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.x1xw() == hi::f32x4(2.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.x1y0() == hi::f32x4(2.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.x1y1() == hi::f32x4(2.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.x1yx() == hi::f32x4(2.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.x1yy() == hi::f32x4(2.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.x1yz() == hi::f32x4(2.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.x1yw() == hi::f32x4(2.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.x1z0() == hi::f32x4(2.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.x1z1() == hi::f32x4(2.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.x1zx() == hi::f32x4(2.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.x1zy() == hi::f32x4(2.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.x1zz() == hi::f32x4(2.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.x1zw() == hi::f32x4(2.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.x1w0() == hi::f32x4(2.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.x1w1() == hi::f32x4(2.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.x1wx() == hi::f32x4(2.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.x1wy() == hi::f32x4(2.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.x1wz() == hi::f32x4(2.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.x1ww() == hi::f32x4(2.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xx00() == hi::f32x4(2.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xx01() == hi::f32x4(2.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xx0x() == hi::f32x4(2.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xx0y() == hi::f32x4(2.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xx0z() == hi::f32x4(2.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xx0w() == hi::f32x4(2.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xx10() == hi::f32x4(2.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xx11() == hi::f32x4(2.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xx1x() == hi::f32x4(2.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xx1y() == hi::f32x4(2.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xx1z() == hi::f32x4(2.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xx1w() == hi::f32x4(2.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xxx0() == hi::f32x4(2.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xxx1() == hi::f32x4(2.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xxxx() == hi::f32x4(2.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xxxy() == hi::f32x4(2.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xxxz() == hi::f32x4(2.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xxxw() == hi::f32x4(2.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xxy0() == hi::f32x4(2.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xxy1() == hi::f32x4(2.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xxyx() == hi::f32x4(2.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xxyy() == hi::f32x4(2.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xxyz() == hi::f32x4(2.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xxyw() == hi::f32x4(2.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xxz0() == hi::f32x4(2.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xxz1() == hi::f32x4(2.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xxzx() == hi::f32x4(2.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xxzy() == hi::f32x4(2.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xxzz() == hi::f32x4(2.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xxzw() == hi::f32x4(2.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xxw0() == hi::f32x4(2.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xxw1() == hi::f32x4(2.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xxwx() == hi::f32x4(2.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xxwy() == hi::f32x4(2.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xxwz() == hi::f32x4(2.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xxww() == hi::f32x4(2.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xy00() == hi::f32x4(2.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xy01() == hi::f32x4(2.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xy0x() == hi::f32x4(2.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xy0y() == hi::f32x4(2.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xy0z() == hi::f32x4(2.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xy0w() == hi::f32x4(2.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xy10() == hi::f32x4(2.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xy11() == hi::f32x4(2.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xy1x() == hi::f32x4(2.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xy1y() == hi::f32x4(2.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xy1z() == hi::f32x4(2.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xy1w() == hi::f32x4(2.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xyx0() == hi::f32x4(2.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xyx1() == hi::f32x4(2.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xyxx() == hi::f32x4(2.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xyxy() == hi::f32x4(2.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xyxz() == hi::f32x4(2.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xyxw() == hi::f32x4(2.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xyy0() == hi::f32x4(2.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xyy1() == hi::f32x4(2.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xyyx() == hi::f32x4(2.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xyyy() == hi::f32x4(2.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xyyz() == hi::f32x4(2.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xyyw() == hi::f32x4(2.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xyz0() == hi::f32x4(2.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xyz1() == hi::f32x4(2.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xyzx() == hi::f32x4(2.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xyzy() == hi::f32x4(2.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xyzz() == hi::f32x4(2.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xyzw() == hi::f32x4(2.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xyw0() == hi::f32x4(2.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xyw1() == hi::f32x4(2.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xywx() == hi::f32x4(2.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xywy() == hi::f32x4(2.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xywz() == hi::f32x4(2.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xyww() == hi::f32x4(2.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xz00() == hi::f32x4(2.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xz01() == hi::f32x4(2.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xz0x() == hi::f32x4(2.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xz0y() == hi::f32x4(2.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xz0z() == hi::f32x4(2.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xz0w() == hi::f32x4(2.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xz10() == hi::f32x4(2.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xz11() == hi::f32x4(2.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xz1x() == hi::f32x4(2.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xz1y() == hi::f32x4(2.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xz1z() == hi::f32x4(2.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xz1w() == hi::f32x4(2.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xzx0() == hi::f32x4(2.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xzx1() == hi::f32x4(2.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xzxx() == hi::f32x4(2.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xzxy() == hi::f32x4(2.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xzxz() == hi::f32x4(2.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xzxw() == hi::f32x4(2.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xzy0() == hi::f32x4(2.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xzy1() == hi::f32x4(2.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xzyx() == hi::f32x4(2.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xzyy() == hi::f32x4(2.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xzyz() == hi::f32x4(2.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xzyw() == hi::f32x4(2.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xzz0() == hi::f32x4(2.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xzz1() == hi::f32x4(2.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xzzx() == hi::f32x4(2.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xzzy() == hi::f32x4(2.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xzzz() == hi::f32x4(2.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xzzw() == hi::f32x4(2.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xzw0() == hi::f32x4(2.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xzw1() == hi::f32x4(2.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xzwx() == hi::f32x4(2.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xzwy() == hi::f32x4(2.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xzwz() == hi::f32x4(2.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xzww() == hi::f32x4(2.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xw00() == hi::f32x4(2.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xw01() == hi::f32x4(2.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xw0x() == hi::f32x4(2.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xw0y() == hi::f32x4(2.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xw0z() == hi::f32x4(2.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xw0w() == hi::f32x4(2.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xw10() == hi::f32x4(2.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xw11() == hi::f32x4(2.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xw1x() == hi::f32x4(2.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xw1y() == hi::f32x4(2.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xw1z() == hi::f32x4(2.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xw1w() == hi::f32x4(2.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xwx0() == hi::f32x4(2.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xwx1() == hi::f32x4(2.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xwxx() == hi::f32x4(2.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xwxy() == hi::f32x4(2.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xwxz() == hi::f32x4(2.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xwxw() == hi::f32x4(2.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xwy0() == hi::f32x4(2.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xwy1() == hi::f32x4(2.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xwyx() == hi::f32x4(2.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xwyy() == hi::f32x4(2.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xwyz() == hi::f32x4(2.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xwyw() == hi::f32x4(2.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xwz0() == hi::f32x4(2.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xwz1() == hi::f32x4(2.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xwzx() == hi::f32x4(2.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xwzy() == hi::f32x4(2.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xwzz() == hi::f32x4(2.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xwzw() == hi::f32x4(2.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xww0() == hi::f32x4(2.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xww1() == hi::f32x4(2.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xwwx() == hi::f32x4(2.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xwwy() == hi::f32x4(2.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xwwz() == hi::f32x4(2.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xwww() == hi::f32x4(2.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.y000() == hi::f32x4(3.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.y001() == hi::f32x4(3.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.y00x() == hi::f32x4(3.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.y00y() == hi::f32x4(3.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.y00z() == hi::f32x4(3.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.y00w() == hi::f32x4(3.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.y010() == hi::f32x4(3.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.y011() == hi::f32x4(3.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.y01x() == hi::f32x4(3.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.y01y() == hi::f32x4(3.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.y01z() == hi::f32x4(3.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.y01w() == hi::f32x4(3.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.y0x0() == hi::f32x4(3.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.y0x1() == hi::f32x4(3.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.y0xx() == hi::f32x4(3.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.y0xy() == hi::f32x4(3.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.y0xz() == hi::f32x4(3.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.y0xw() == hi::f32x4(3.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.y0y0() == hi::f32x4(3.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.y0y1() == hi::f32x4(3.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.y0yx() == hi::f32x4(3.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.y0yy() == hi::f32x4(3.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.y0yz() == hi::f32x4(3.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.y0yw() == hi::f32x4(3.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.y0z0() == hi::f32x4(3.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.y0z1() == hi::f32x4(3.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.y0zx() == hi::f32x4(3.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.y0zy() == hi::f32x4(3.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.y0zz() == hi::f32x4(3.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.y0zw() == hi::f32x4(3.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.y0w0() == hi::f32x4(3.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.y0w1() == hi::f32x4(3.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.y0wx() == hi::f32x4(3.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.y0wy() == hi::f32x4(3.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.y0wz() == hi::f32x4(3.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.y0ww() == hi::f32x4(3.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.y000() == hi::f32x4(3.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.y001() == hi::f32x4(3.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.y00x() == hi::f32x4(3.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.y00y() == hi::f32x4(3.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.y00z() == hi::f32x4(3.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.y00w() == hi::f32x4(3.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.y010() == hi::f32x4(3.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.y011() == hi::f32x4(3.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.y01x() == hi::f32x4(3.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.y01y() == hi::f32x4(3.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.y01z() == hi::f32x4(3.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.y01w() == hi::f32x4(3.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.y0x0() == hi::f32x4(3.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.y0x1() == hi::f32x4(3.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.y0xx() == hi::f32x4(3.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.y0xy() == hi::f32x4(3.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.y0xz() == hi::f32x4(3.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.y0xw() == hi::f32x4(3.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.y0y0() == hi::f32x4(3.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.y0y1() == hi::f32x4(3.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.y0yx() == hi::f32x4(3.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.y0yy() == hi::f32x4(3.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.y0yz() == hi::f32x4(3.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.y0yw() == hi::f32x4(3.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.y0z0() == hi::f32x4(3.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.y0z1() == hi::f32x4(3.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.y0zx() == hi::f32x4(3.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.y0zy() == hi::f32x4(3.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.y0zz() == hi::f32x4(3.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.y0zw() == hi::f32x4(3.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.y0w0() == hi::f32x4(3.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.y0w1() == hi::f32x4(3.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.y0wx() == hi::f32x4(3.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.y0wy() == hi::f32x4(3.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.y0wz() == hi::f32x4(3.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.y0ww() == hi::f32x4(3.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.y100() == hi::f32x4(3.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.y101() == hi::f32x4(3.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.y10x() == hi::f32x4(3.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.y10y() == hi::f32x4(3.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.y10z() == hi::f32x4(3.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.y10w() == hi::f32x4(3.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.y110() == hi::f32x4(3.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.y111() == hi::f32x4(3.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.y11x() == hi::f32x4(3.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.y11y() == hi::f32x4(3.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.y11z() == hi::f32x4(3.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.y11w() == hi::f32x4(3.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.y1x0() == hi::f32x4(3.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.y1x1() == hi::f32x4(3.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.y1xx() == hi::f32x4(3.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.y1xy() == hi::f32x4(3.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.y1xz() == hi::f32x4(3.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.y1xw() == hi::f32x4(3.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.y1y0() == hi::f32x4(3.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.y1y1() == hi::f32x4(3.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.y1yx() == hi::f32x4(3.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.y1yy() == hi::f32x4(3.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.y1yz() == hi::f32x4(3.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.y1yw() == hi::f32x4(3.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.y1z0() == hi::f32x4(3.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.y1z1() == hi::f32x4(3.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.y1zx() == hi::f32x4(3.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.y1zy() == hi::f32x4(3.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.y1zz() == hi::f32x4(3.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.y1zw() == hi::f32x4(3.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.y1w0() == hi::f32x4(3.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.y1w1() == hi::f32x4(3.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.y1wx() == hi::f32x4(3.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.y1wy() == hi::f32x4(3.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.y1wz() == hi::f32x4(3.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.y1ww() == hi::f32x4(3.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yx00() == hi::f32x4(3.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yx01() == hi::f32x4(3.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yx0x() == hi::f32x4(3.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yx0y() == hi::f32x4(3.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yx0z() == hi::f32x4(3.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yx0w() == hi::f32x4(3.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yx10() == hi::f32x4(3.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yx11() == hi::f32x4(3.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yx1x() == hi::f32x4(3.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yx1y() == hi::f32x4(3.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yx1z() == hi::f32x4(3.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yx1w() == hi::f32x4(3.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.yxx0() == hi::f32x4(3.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.yxx1() == hi::f32x4(3.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.yxxx() == hi::f32x4(3.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.yxxy() == hi::f32x4(3.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.yxxz() == hi::f32x4(3.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.yxxw() == hi::f32x4(3.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.yxy0() == hi::f32x4(3.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.yxy1() == hi::f32x4(3.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.yxyx() == hi::f32x4(3.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.yxyy() == hi::f32x4(3.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.yxyz() == hi::f32x4(3.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.yxyw() == hi::f32x4(3.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.yxz0() == hi::f32x4(3.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.yxz1() == hi::f32x4(3.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.yxzx() == hi::f32x4(3.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.yxzy() == hi::f32x4(3.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.yxzz() == hi::f32x4(3.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.yxzw() == hi::f32x4(3.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yxw0() == hi::f32x4(3.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yxw1() == hi::f32x4(3.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.yxwx() == hi::f32x4(3.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.yxwy() == hi::f32x4(3.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.yxwz() == hi::f32x4(3.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.yxww() == hi::f32x4(3.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yy00() == hi::f32x4(3.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yy01() == hi::f32x4(3.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yy0x() == hi::f32x4(3.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yy0y() == hi::f32x4(3.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yy0z() == hi::f32x4(3.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yy0w() == hi::f32x4(3.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yy10() == hi::f32x4(3.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yy11() == hi::f32x4(3.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yy1x() == hi::f32x4(3.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yy1y() == hi::f32x4(3.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yy1z() == hi::f32x4(3.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yy1w() == hi::f32x4(3.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.yyx0() == hi::f32x4(3.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.yyx1() == hi::f32x4(3.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.yyxx() == hi::f32x4(3.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.yyxy() == hi::f32x4(3.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.yyxz() == hi::f32x4(3.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.yyxw() == hi::f32x4(3.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.yyy0() == hi::f32x4(3.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.yyy1() == hi::f32x4(3.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.yyyx() == hi::f32x4(3.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.yyyy() == hi::f32x4(3.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.yyyz() == hi::f32x4(3.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.yyyw() == hi::f32x4(3.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.yyz0() == hi::f32x4(3.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.yyz1() == hi::f32x4(3.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.yyzx() == hi::f32x4(3.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.yyzy() == hi::f32x4(3.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.yyzz() == hi::f32x4(3.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.yyzw() == hi::f32x4(3.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yyw0() == hi::f32x4(3.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yyw1() == hi::f32x4(3.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.yywx() == hi::f32x4(3.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.yywy() == hi::f32x4(3.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.yywz() == hi::f32x4(3.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.yyww() == hi::f32x4(3.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yz00() == hi::f32x4(3.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yz01() == hi::f32x4(3.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yz0x() == hi::f32x4(3.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yz0y() == hi::f32x4(3.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yz0z() == hi::f32x4(3.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yz0w() == hi::f32x4(3.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yz10() == hi::f32x4(3.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yz11() == hi::f32x4(3.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yz1x() == hi::f32x4(3.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yz1y() == hi::f32x4(3.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yz1z() == hi::f32x4(3.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yz1w() == hi::f32x4(3.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.yzx0() == hi::f32x4(3.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.yzx1() == hi::f32x4(3.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.yzxx() == hi::f32x4(3.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.yzxy() == hi::f32x4(3.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.yzxz() == hi::f32x4(3.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.yzxw() == hi::f32x4(3.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.yzy0() == hi::f32x4(3.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.yzy1() == hi::f32x4(3.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.yzyx() == hi::f32x4(3.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.yzyy() == hi::f32x4(3.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.yzyz() == hi::f32x4(3.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.yzyw() == hi::f32x4(3.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.yzz0() == hi::f32x4(3.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.yzz1() == hi::f32x4(3.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.yzzx() == hi::f32x4(3.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.yzzy() == hi::f32x4(3.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.yzzz() == hi::f32x4(3.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.yzzw() == hi::f32x4(3.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yzw0() == hi::f32x4(3.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yzw1() == hi::f32x4(3.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.yzwx() == hi::f32x4(3.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.yzwy() == hi::f32x4(3.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.yzwz() == hi::f32x4(3.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.yzww() == hi::f32x4(3.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yw00() == hi::f32x4(3.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yw01() == hi::f32x4(3.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yw0x() == hi::f32x4(3.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yw0y() == hi::f32x4(3.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yw0z() == hi::f32x4(3.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yw0w() == hi::f32x4(3.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yw10() == hi::f32x4(3.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yw11() == hi::f32x4(3.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yw1x() == hi::f32x4(3.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yw1y() == hi::f32x4(3.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yw1z() == hi::f32x4(3.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yw1w() == hi::f32x4(3.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.ywx0() == hi::f32x4(3.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.ywx1() == hi::f32x4(3.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.ywxx() == hi::f32x4(3.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.ywxy() == hi::f32x4(3.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.ywxz() == hi::f32x4(3.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.ywxw() == hi::f32x4(3.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.ywy0() == hi::f32x4(3.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.ywy1() == hi::f32x4(3.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.ywyx() == hi::f32x4(3.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.ywyy() == hi::f32x4(3.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.ywyz() == hi::f32x4(3.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.ywyw() == hi::f32x4(3.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.ywz0() == hi::f32x4(3.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.ywz1() == hi::f32x4(3.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.ywzx() == hi::f32x4(3.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.ywzy() == hi::f32x4(3.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.ywzz() == hi::f32x4(3.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.ywzw() == hi::f32x4(3.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yww0() == hi::f32x4(3.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yww1() == hi::f32x4(3.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.ywwx() == hi::f32x4(3.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.ywwy() == hi::f32x4(3.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.ywwz() == hi::f32x4(3.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.ywww() == hi::f32x4(3.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.z000() == hi::f32x4(4.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.z001() == hi::f32x4(4.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.z00x() == hi::f32x4(4.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.z00y() == hi::f32x4(4.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.z00z() == hi::f32x4(4.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.z00w() == hi::f32x4(4.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.z010() == hi::f32x4(4.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.z011() == hi::f32x4(4.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.z01x() == hi::f32x4(4.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.z01y() == hi::f32x4(4.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.z01z() == hi::f32x4(4.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.z01w() == hi::f32x4(4.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.z0x0() == hi::f32x4(4.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.z0x1() == hi::f32x4(4.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.z0xx() == hi::f32x4(4.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.z0xy() == hi::f32x4(4.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.z0xz() == hi::f32x4(4.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.z0xw() == hi::f32x4(4.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.z0y0() == hi::f32x4(4.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.z0y1() == hi::f32x4(4.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.z0yx() == hi::f32x4(4.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.z0yy() == hi::f32x4(4.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.z0yz() == hi::f32x4(4.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.z0yw() == hi::f32x4(4.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.z0z0() == hi::f32x4(4.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.z0z1() == hi::f32x4(4.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.z0zx() == hi::f32x4(4.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.z0zy() == hi::f32x4(4.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.z0zz() == hi::f32x4(4.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.z0zw() == hi::f32x4(4.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.z0w0() == hi::f32x4(4.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.z0w1() == hi::f32x4(4.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.z0wx() == hi::f32x4(4.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.z0wy() == hi::f32x4(4.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.z0wz() == hi::f32x4(4.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.z0ww() == hi::f32x4(4.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.z000() == hi::f32x4(4.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.z001() == hi::f32x4(4.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.z00x() == hi::f32x4(4.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.z00y() == hi::f32x4(4.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.z00z() == hi::f32x4(4.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.z00w() == hi::f32x4(4.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.z010() == hi::f32x4(4.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.z011() == hi::f32x4(4.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.z01x() == hi::f32x4(4.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.z01y() == hi::f32x4(4.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.z01z() == hi::f32x4(4.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.z01w() == hi::f32x4(4.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.z0x0() == hi::f32x4(4.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.z0x1() == hi::f32x4(4.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.z0xx() == hi::f32x4(4.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.z0xy() == hi::f32x4(4.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.z0xz() == hi::f32x4(4.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.z0xw() == hi::f32x4(4.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.z0y0() == hi::f32x4(4.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.z0y1() == hi::f32x4(4.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.z0yx() == hi::f32x4(4.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.z0yy() == hi::f32x4(4.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.z0yz() == hi::f32x4(4.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.z0yw() == hi::f32x4(4.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.z0z0() == hi::f32x4(4.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.z0z1() == hi::f32x4(4.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.z0zx() == hi::f32x4(4.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.z0zy() == hi::f32x4(4.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.z0zz() == hi::f32x4(4.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.z0zw() == hi::f32x4(4.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.z0w0() == hi::f32x4(4.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.z0w1() == hi::f32x4(4.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.z0wx() == hi::f32x4(4.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.z0wy() == hi::f32x4(4.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.z0wz() == hi::f32x4(4.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.z0ww() == hi::f32x4(4.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.z100() == hi::f32x4(4.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.z101() == hi::f32x4(4.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.z10x() == hi::f32x4(4.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.z10y() == hi::f32x4(4.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.z10z() == hi::f32x4(4.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.z10w() == hi::f32x4(4.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.z110() == hi::f32x4(4.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.z111() == hi::f32x4(4.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.z11x() == hi::f32x4(4.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.z11y() == hi::f32x4(4.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.z11z() == hi::f32x4(4.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.z11w() == hi::f32x4(4.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.z1x0() == hi::f32x4(4.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.z1x1() == hi::f32x4(4.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.z1xx() == hi::f32x4(4.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.z1xy() == hi::f32x4(4.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.z1xz() == hi::f32x4(4.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.z1xw() == hi::f32x4(4.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.z1y0() == hi::f32x4(4.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.z1y1() == hi::f32x4(4.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.z1yx() == hi::f32x4(4.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.z1yy() == hi::f32x4(4.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.z1yz() == hi::f32x4(4.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.z1yw() == hi::f32x4(4.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.z1z0() == hi::f32x4(4.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.z1z1() == hi::f32x4(4.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.z1zx() == hi::f32x4(4.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.z1zy() == hi::f32x4(4.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.z1zz() == hi::f32x4(4.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.z1zw() == hi::f32x4(4.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.z1w0() == hi::f32x4(4.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.z1w1() == hi::f32x4(4.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.z1wx() == hi::f32x4(4.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.z1wy() == hi::f32x4(4.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.z1wz() == hi::f32x4(4.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.z1ww() == hi::f32x4(4.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zx00() == hi::f32x4(4.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zx01() == hi::f32x4(4.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zx0x() == hi::f32x4(4.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zx0y() == hi::f32x4(4.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zx0z() == hi::f32x4(4.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zx0w() == hi::f32x4(4.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zx10() == hi::f32x4(4.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zx11() == hi::f32x4(4.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zx1x() == hi::f32x4(4.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zx1y() == hi::f32x4(4.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zx1z() == hi::f32x4(4.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zx1w() == hi::f32x4(4.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zxx0() == hi::f32x4(4.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zxx1() == hi::f32x4(4.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zxxx() == hi::f32x4(4.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zxxy() == hi::f32x4(4.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zxxz() == hi::f32x4(4.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zxxw() == hi::f32x4(4.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zxy0() == hi::f32x4(4.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zxy1() == hi::f32x4(4.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zxyx() == hi::f32x4(4.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zxyy() == hi::f32x4(4.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zxyz() == hi::f32x4(4.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zxyw() == hi::f32x4(4.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zxz0() == hi::f32x4(4.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zxz1() == hi::f32x4(4.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zxzx() == hi::f32x4(4.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zxzy() == hi::f32x4(4.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zxzz() == hi::f32x4(4.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zxzw() == hi::f32x4(4.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zxw0() == hi::f32x4(4.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zxw1() == hi::f32x4(4.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zxwx() == hi::f32x4(4.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zxwy() == hi::f32x4(4.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zxwz() == hi::f32x4(4.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zxww() == hi::f32x4(4.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zy00() == hi::f32x4(4.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zy01() == hi::f32x4(4.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zy0x() == hi::f32x4(4.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zy0y() == hi::f32x4(4.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zy0z() == hi::f32x4(4.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zy0w() == hi::f32x4(4.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zy10() == hi::f32x4(4.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zy11() == hi::f32x4(4.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zy1x() == hi::f32x4(4.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zy1y() == hi::f32x4(4.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zy1z() == hi::f32x4(4.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zy1w() == hi::f32x4(4.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zyx0() == hi::f32x4(4.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zyx1() == hi::f32x4(4.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zyxx() == hi::f32x4(4.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zyxy() == hi::f32x4(4.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zyxz() == hi::f32x4(4.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zyxw() == hi::f32x4(4.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zyy0() == hi::f32x4(4.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zyy1() == hi::f32x4(4.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zyyx() == hi::f32x4(4.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zyyy() == hi::f32x4(4.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zyyz() == hi::f32x4(4.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zyyw() == hi::f32x4(4.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zyz0() == hi::f32x4(4.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zyz1() == hi::f32x4(4.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zyzx() == hi::f32x4(4.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zyzy() == hi::f32x4(4.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zyzz() == hi::f32x4(4.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zyzw() == hi::f32x4(4.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zyw0() == hi::f32x4(4.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zyw1() == hi::f32x4(4.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zywx() == hi::f32x4(4.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zywy() == hi::f32x4(4.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zywz() == hi::f32x4(4.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zyww() == hi::f32x4(4.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zz00() == hi::f32x4(4.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zz01() == hi::f32x4(4.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zz0x() == hi::f32x4(4.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zz0y() == hi::f32x4(4.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zz0z() == hi::f32x4(4.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zz0w() == hi::f32x4(4.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zz10() == hi::f32x4(4.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zz11() == hi::f32x4(4.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zz1x() == hi::f32x4(4.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zz1y() == hi::f32x4(4.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zz1z() == hi::f32x4(4.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zz1w() == hi::f32x4(4.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zzx0() == hi::f32x4(4.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zzx1() == hi::f32x4(4.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zzxx() == hi::f32x4(4.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zzxy() == hi::f32x4(4.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zzxz() == hi::f32x4(4.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zzxw() == hi::f32x4(4.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zzy0() == hi::f32x4(4.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zzy1() == hi::f32x4(4.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zzyx() == hi::f32x4(4.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zzyy() == hi::f32x4(4.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zzyz() == hi::f32x4(4.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zzyw() == hi::f32x4(4.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zzz0() == hi::f32x4(4.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zzz1() == hi::f32x4(4.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zzzx() == hi::f32x4(4.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zzzy() == hi::f32x4(4.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zzzz() == hi::f32x4(4.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zzzw() == hi::f32x4(4.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zzw0() == hi::f32x4(4.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zzw1() == hi::f32x4(4.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zzwx() == hi::f32x4(4.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zzwy() == hi::f32x4(4.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zzwz() == hi::f32x4(4.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zzww() == hi::f32x4(4.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zw00() == hi::f32x4(4.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zw01() == hi::f32x4(4.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zw0x() == hi::f32x4(4.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zw0y() == hi::f32x4(4.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zw0z() == hi::f32x4(4.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zw0w() == hi::f32x4(4.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zw10() == hi::f32x4(4.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zw11() == hi::f32x4(4.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zw1x() == hi::f32x4(4.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zw1y() == hi::f32x4(4.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zw1z() == hi::f32x4(4.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zw1w() == hi::f32x4(4.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zwx0() == hi::f32x4(4.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zwx1() == hi::f32x4(4.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zwxx() == hi::f32x4(4.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zwxy() == hi::f32x4(4.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zwxz() == hi::f32x4(4.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zwxw() == hi::f32x4(4.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zwy0() == hi::f32x4(4.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zwy1() == hi::f32x4(4.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zwyx() == hi::f32x4(4.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zwyy() == hi::f32x4(4.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zwyz() == hi::f32x4(4.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zwyw() == hi::f32x4(4.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zwz0() == hi::f32x4(4.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zwz1() == hi::f32x4(4.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zwzx() == hi::f32x4(4.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zwzy() == hi::f32x4(4.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zwzz() == hi::f32x4(4.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zwzw() == hi::f32x4(4.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zww0() == hi::f32x4(4.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zww1() == hi::f32x4(4.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zwwx() == hi::f32x4(4.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zwwy() == hi::f32x4(4.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zwwz() == hi::f32x4(4.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zwww() == hi::f32x4(4.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.w000() == hi::f32x4(5.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.w001() == hi::f32x4(5.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.w00x() == hi::f32x4(5.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.w00y() == hi::f32x4(5.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.w00z() == hi::f32x4(5.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.w00w() == hi::f32x4(5.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.w010() == hi::f32x4(5.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.w011() == hi::f32x4(5.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.w01x() == hi::f32x4(5.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.w01y() == hi::f32x4(5.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.w01z() == hi::f32x4(5.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.w01w() == hi::f32x4(5.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.w0x0() == hi::f32x4(5.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.w0x1() == hi::f32x4(5.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.w0xx() == hi::f32x4(5.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.w0xy() == hi::f32x4(5.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.w0xz() == hi::f32x4(5.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.w0xw() == hi::f32x4(5.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.w0y0() == hi::f32x4(5.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.w0y1() == hi::f32x4(5.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.w0yx() == hi::f32x4(5.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.w0yy() == hi::f32x4(5.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.w0yz() == hi::f32x4(5.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.w0yw() == hi::f32x4(5.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.w0z0() == hi::f32x4(5.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.w0z1() == hi::f32x4(5.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.w0zx() == hi::f32x4(5.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.w0zy() == hi::f32x4(5.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.w0zz() == hi::f32x4(5.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.w0zw() == hi::f32x4(5.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.w0w0() == hi::f32x4(5.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.w0w1() == hi::f32x4(5.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.w0wx() == hi::f32x4(5.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.w0wy() == hi::f32x4(5.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.w0wz() == hi::f32x4(5.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.w0ww() == hi::f32x4(5.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.w000() == hi::f32x4(5.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.w001() == hi::f32x4(5.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.w00x() == hi::f32x4(5.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.w00y() == hi::f32x4(5.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.w00z() == hi::f32x4(5.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.w00w() == hi::f32x4(5.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.w010() == hi::f32x4(5.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.w011() == hi::f32x4(5.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.w01x() == hi::f32x4(5.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.w01y() == hi::f32x4(5.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.w01z() == hi::f32x4(5.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.w01w() == hi::f32x4(5.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.w0x0() == hi::f32x4(5.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.w0x1() == hi::f32x4(5.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.w0xx() == hi::f32x4(5.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.w0xy() == hi::f32x4(5.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.w0xz() == hi::f32x4(5.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.w0xw() == hi::f32x4(5.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.w0y0() == hi::f32x4(5.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.w0y1() == hi::f32x4(5.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.w0yx() == hi::f32x4(5.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.w0yy() == hi::f32x4(5.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.w0yz() == hi::f32x4(5.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.w0yw() == hi::f32x4(5.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.w0z0() == hi::f32x4(5.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.w0z1() == hi::f32x4(5.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.w0zx() == hi::f32x4(5.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.w0zy() == hi::f32x4(5.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.w0zz() == hi::f32x4(5.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.w0zw() == hi::f32x4(5.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.w0w0() == hi::f32x4(5.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.w0w1() == hi::f32x4(5.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.w0wx() == hi::f32x4(5.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.w0wy() == hi::f32x4(5.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.w0wz() == hi::f32x4(5.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.w0ww() == hi::f32x4(5.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.w100() == hi::f32x4(5.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.w101() == hi::f32x4(5.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.w10x() == hi::f32x4(5.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.w10y() == hi::f32x4(5.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.w10z() == hi::f32x4(5.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.w10w() == hi::f32x4(5.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.w110() == hi::f32x4(5.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.w111() == hi::f32x4(5.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.w11x() == hi::f32x4(5.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.w11y() == hi::f32x4(5.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.w11z() == hi::f32x4(5.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.w11w() == hi::f32x4(5.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.w1x0() == hi::f32x4(5.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.w1x1() == hi::f32x4(5.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.w1xx() == hi::f32x4(5.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.w1xy() == hi::f32x4(5.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.w1xz() == hi::f32x4(5.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.w1xw() == hi::f32x4(5.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.w1y0() == hi::f32x4(5.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.w1y1() == hi::f32x4(5.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.w1yx() == hi::f32x4(5.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.w1yy() == hi::f32x4(5.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.w1yz() == hi::f32x4(5.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.w1yw() == hi::f32x4(5.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.w1z0() == hi::f32x4(5.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.w1z1() == hi::f32x4(5.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.w1zx() == hi::f32x4(5.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.w1zy() == hi::f32x4(5.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.w1zz() == hi::f32x4(5.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.w1zw() == hi::f32x4(5.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.w1w0() == hi::f32x4(5.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.w1w1() == hi::f32x4(5.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.w1wx() == hi::f32x4(5.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.w1wy() == hi::f32x4(5.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.w1wz() == hi::f32x4(5.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.w1ww() == hi::f32x4(5.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.wx00() == hi::f32x4(5.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.wx01() == hi::f32x4(5.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.wx0x() == hi::f32x4(5.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.wx0y() == hi::f32x4(5.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.wx0z() == hi::f32x4(5.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.wx0w() == hi::f32x4(5.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.wx10() == hi::f32x4(5.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.wx11() == hi::f32x4(5.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.wx1x() == hi::f32x4(5.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.wx1y() == hi::f32x4(5.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.wx1z() == hi::f32x4(5.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.wx1w() == hi::f32x4(5.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wxx0() == hi::f32x4(5.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wxx1() == hi::f32x4(5.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wxxx() == hi::f32x4(5.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wxxy() == hi::f32x4(5.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wxxz() == hi::f32x4(5.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wxxw() == hi::f32x4(5.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wxy0() == hi::f32x4(5.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wxy1() == hi::f32x4(5.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wxyx() == hi::f32x4(5.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wxyy() == hi::f32x4(5.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wxyz() == hi::f32x4(5.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wxyw() == hi::f32x4(5.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wxz0() == hi::f32x4(5.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wxz1() == hi::f32x4(5.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wxzx() == hi::f32x4(5.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wxzy() == hi::f32x4(5.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wxzz() == hi::f32x4(5.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wxzw() == hi::f32x4(5.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.wxw0() == hi::f32x4(5.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.wxw1() == hi::f32x4(5.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wxwx() == hi::f32x4(5.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wxwy() == hi::f32x4(5.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wxwz() == hi::f32x4(5.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wxww() == hi::f32x4(5.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.wy00() == hi::f32x4(5.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.wy01() == hi::f32x4(5.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.wy0x() == hi::f32x4(5.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.wy0y() == hi::f32x4(5.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.wy0z() == hi::f32x4(5.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.wy0w() == hi::f32x4(5.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.wy10() == hi::f32x4(5.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.wy11() == hi::f32x4(5.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.wy1x() == hi::f32x4(5.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.wy1y() == hi::f32x4(5.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.wy1z() == hi::f32x4(5.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.wy1w() == hi::f32x4(5.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wyx0() == hi::f32x4(5.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wyx1() == hi::f32x4(5.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wyxx() == hi::f32x4(5.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wyxy() == hi::f32x4(5.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wyxz() == hi::f32x4(5.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wyxw() == hi::f32x4(5.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wyy0() == hi::f32x4(5.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wyy1() == hi::f32x4(5.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wyyx() == hi::f32x4(5.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wyyy() == hi::f32x4(5.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wyyz() == hi::f32x4(5.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wyyw() == hi::f32x4(5.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wyz0() == hi::f32x4(5.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wyz1() == hi::f32x4(5.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wyzx() == hi::f32x4(5.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wyzy() == hi::f32x4(5.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wyzz() == hi::f32x4(5.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wyzw() == hi::f32x4(5.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.wyw0() == hi::f32x4(5.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.wyw1() == hi::f32x4(5.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wywx() == hi::f32x4(5.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wywy() == hi::f32x4(5.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wywz() == hi::f32x4(5.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wyww() == hi::f32x4(5.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.wz00() == hi::f32x4(5.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.wz01() == hi::f32x4(5.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.wz0x() == hi::f32x4(5.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.wz0y() == hi::f32x4(5.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.wz0z() == hi::f32x4(5.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.wz0w() == hi::f32x4(5.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.wz10() == hi::f32x4(5.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.wz11() == hi::f32x4(5.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.wz1x() == hi::f32x4(5.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.wz1y() == hi::f32x4(5.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.wz1z() == hi::f32x4(5.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.wz1w() == hi::f32x4(5.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wzx0() == hi::f32x4(5.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wzx1() == hi::f32x4(5.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wzxx() == hi::f32x4(5.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wzxy() == hi::f32x4(5.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wzxz() == hi::f32x4(5.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wzxw() == hi::f32x4(5.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wzy0() == hi::f32x4(5.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wzy1() == hi::f32x4(5.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wzyx() == hi::f32x4(5.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wzyy() == hi::f32x4(5.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wzyz() == hi::f32x4(5.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wzyw() == hi::f32x4(5.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wzz0() == hi::f32x4(5.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wzz1() == hi::f32x4(5.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wzzx() == hi::f32x4(5.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wzzy() == hi::f32x4(5.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wzzz() == hi::f32x4(5.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wzzw() == hi::f32x4(5.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.wzw0() == hi::f32x4(5.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.wzw1() == hi::f32x4(5.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wzwx() == hi::f32x4(5.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wzwy() == hi::f32x4(5.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wzwz() == hi::f32x4(5.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wzww() == hi::f32x4(5.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.ww00() == hi::f32x4(5.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.ww01() == hi::f32x4(5.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.ww0x() == hi::f32x4(5.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.ww0y() == hi::f32x4(5.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.ww0z() == hi::f32x4(5.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.ww0w() == hi::f32x4(5.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.ww10() == hi::f32x4(5.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.ww11() == hi::f32x4(5.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.ww1x() == hi::f32x4(5.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.ww1y() == hi::f32x4(5.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.ww1z() == hi::f32x4(5.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.ww1w() == hi::f32x4(5.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wwx0() == hi::f32x4(5.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wwx1() == hi::f32x4(5.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wwxx() == hi::f32x4(5.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wwxy() == hi::f32x4(5.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wwxz() == hi::f32x4(5.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wwxw() == hi::f32x4(5.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wwy0() == hi::f32x4(5.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wwy1() == hi::f32x4(5.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wwyx() == hi::f32x4(5.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wwyy() == hi::f32x4(5.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wwyz() == hi::f32x4(5.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wwyw() == hi::f32x4(5.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wwz0() == hi::f32x4(5.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wwz1() == hi::f32x4(5.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wwzx() == hi::f32x4(5.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wwzy() == hi::f32x4(5.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wwzz() == hi::f32x4(5.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wwzw() == hi::f32x4(5.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.www0() == hi::f32x4(5.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.www1() == hi::f32x4(5.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wwwx() == hi::f32x4(5.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wwwy() == hi::f32x4(5.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wwwz() == hi::f32x4(5.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wwww() == hi::f32x4(5.0f, 5.0f, 5.0f, 5.0f));
}

};
