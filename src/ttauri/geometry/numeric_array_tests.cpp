// Copyright Take Vos 2020-2021.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

#include "ttauri/geometry/numeric_array.hpp"
#include "ttauri/required.hpp"
#include <gtest/gtest.h>
#include <iostream>

using namespace std;
using namespace tt;

TEST(numeric_array, Compare)
{
    ttlet tmp = f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    ASSERT_FALSE(tmp == f32x4(0.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_FALSE(tmp == f32x4(2.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_TRUE(tmp == f32x4(2.0f, 3.0f, 4.0f, 5.0f));
}

TEST(numeric_array, Arithmatic)
{
    ttlet tmp1 = f32x4{9.0f, 6.0f, 4.0f, 14.0f};
    ttlet tmp2 = f32x4{3.0f, -2.0f, 8.0f, 7.0f};

    ASSERT_EQ(tmp1 + tmp2, f32x4(12.0f, 4.0f, 12.0f, 21.0f));
    ASSERT_EQ(tmp1 - tmp2, f32x4(6.0f, 8.0f, -4.0f, 7.0f));
    ASSERT_EQ(tmp1 * tmp2, f32x4(27.0f, -12.0f, 32.0f, 98.0f));
    ASSERT_EQ(tmp1 / tmp2, f32x4(3.0f, -3.0f, 0.5f, 2.0f));

    {
        auto tmp = tmp1;
        tmp += tmp2;
        ASSERT_EQ(tmp, f32x4(12.0f, 4.0f, 12.0f, 21.0f));
    }

    {
        auto tmp = tmp1;
        tmp -= tmp2;
        ASSERT_EQ(tmp, f32x4(6.0f, 8.0f, -4.0f, 7.0f));
    }

    {
        auto tmp = tmp1;
        tmp *= tmp2;
        ASSERT_EQ(tmp, f32x4(27.0f, -12.0f, 32.0f, 98.0f));
    }

    {
        auto tmp = tmp1;
        tmp /= tmp2;
        ASSERT_EQ(tmp, f32x4(3.0f, -3.0f, 0.5f, 2.0f));
    }
}

TEST(numeric_array, Length)
{
    ttlet tmp = f32x4(2.0f, 3.0f, 4.0f, 0.0f);

    ASSERT_EQ(squared_hypot<0b0111>(tmp), 29.0f);
    ASSERT_NEAR(hypot<0b0111>(tmp), 5.3851f, 0.001f);
}

TEST(numeric_array, DotProduct)
{
    ttlet a = f32x4(1.0f, 3.0f, -5.0f, 0.0f);
    ttlet b = f32x4(4.0f, -2.0f, -1.0f, 0.0f);

    ASSERT_EQ(dot<0b0111>(a, b), 3.0f);
}

TEST(numeric_array, CrossProduct)
{
    ttlet a = f32x4(2.0f, 3.0f, 4.0f, 0.0f);
    ttlet b = f32x4(5.0f, 6.0f, 7.0f, 0.0f);

    ASSERT_EQ(cross_3D(a, b), f32x4(-3.0f, 6.0f, -3.0f));
}

TEST(numeric_array, Getters)
{
    ttlet tmp = f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    ASSERT_EQ(tmp.x(), 2.0f);
    ASSERT_EQ(tmp.y(), 3.0f);
    ASSERT_EQ(tmp.z(), 4.0f);
    ASSERT_EQ(tmp.w(), 5.0f);
    ASSERT_EQ(tmp.r(), 2.0f);
    ASSERT_EQ(tmp.g(), 3.0f);
    ASSERT_EQ(tmp.b(), 4.0f);
    ASSERT_EQ(tmp.a(), 5.0f);
    ASSERT_EQ(tmp[0], 2.0f);
    ASSERT_EQ(tmp[1], 3.0f);
    ASSERT_EQ(tmp[2], 4.0f);
    ASSERT_EQ(tmp[3], 5.0f);
}

TEST(numeric_array, normalize)
{
    auto tmp = f32x4{2.0f, 3.0f, 4.0f, 0.0f};
    auto r = normalize<0b0111>(tmp);
    ASSERT_NEAR(r[0], 0.3713906763541037, 0.001);
    ASSERT_NEAR(r[1], 0.5570860145311556, 0.001);
    ASSERT_NEAR(r[2], 0.7427813527082074, 0.001);
    ASSERT_EQ(r[3], 0.0);
}
TEST(numeric_array, Setters)
{
    auto tmp = f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    tmp.x() = 12.0f;
    ASSERT_EQ(tmp, f32x4(12.0f, 3.0f, 4.0f, 5.0f));
    tmp.y() = 13.0f;
    ASSERT_EQ(tmp, f32x4(12.0f, 13.0f, 4.0f, 5.0f));
    tmp.z() = 14.0f;
    ASSERT_EQ(tmp, f32x4(12.0f, 13.0f, 14.0f, 5.0f));
    tmp.w() = 15.0f;
    ASSERT_EQ(tmp, f32x4(12.0f, 13.0f, 14.0f, 15.0f));
    tmp.r() = 22.0f;
    ASSERT_EQ(tmp, f32x4(22.0f, 13.0f, 14.0f, 15.0f));
    tmp.g() = 23.0f;
    ASSERT_EQ(tmp, f32x4(22.0f, 23.0f, 14.0f, 15.0f));
    tmp.b() = 24.0f;
    ASSERT_EQ(tmp, f32x4(22.0f, 23.0f, 24.0f, 15.0f));
    tmp.a() = 25.0f;
    ASSERT_EQ(tmp, f32x4(22.0f, 23.0f, 24.0f, 25.0f));
}

TEST(numeric_array, Swizzle2)
{
    ttlet tmp = f32x2{2.0f, 3.0f};

    ASSERT_EQ(tmp.xx(), f32x2(2.0f, 2.0f));
    ASSERT_EQ(tmp.xy(), f32x2(2.0f, 3.0f));
    ASSERT_EQ(tmp.x0(), f32x2(2.0f, 0.0f));
    ASSERT_EQ(tmp.x1(), f32x2(2.0f, 1.0f));

    ASSERT_EQ(tmp.yx(), f32x2(3.0f, 2.0f));
    ASSERT_EQ(tmp.yy(), f32x2(3.0f, 3.0f));
    ASSERT_EQ(tmp.y0(), f32x2(3.0f, 0.0f));
    ASSERT_EQ(tmp.y1(), f32x2(3.0f, 1.0f));

    ASSERT_EQ(tmp._0x(), f32x2(0.0f, 2.0f));
    ASSERT_EQ(tmp._0y(), f32x2(0.0f, 3.0f));
    ASSERT_EQ(tmp._00(), f32x2(0.0f, 0.0f));
    ASSERT_EQ(tmp._01(), f32x2(0.0f, 1.0f));

    ASSERT_EQ(tmp._1x(), f32x2(1.0f, 2.0f));
    ASSERT_EQ(tmp._1y(), f32x2(1.0f, 3.0f));
    ASSERT_EQ(tmp._10(), f32x2(1.0f, 0.0f));
    ASSERT_EQ(tmp._11(), f32x2(1.0f, 1.0f));
}

TEST(numeric_array, Swizzle3)
{
    using f32x3 = numeric_array<float, 3>;

    ttlet tmp = f32x3{2.0f, 3.0f, 4.0f};

    ASSERT_EQ(tmp.xxx(), f32x3(2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xxy(), f32x3(2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xxz(), f32x3(2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xx0(), f32x3(2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xx1(), f32x3(2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xyx(), f32x3(2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xyy(), f32x3(2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xyz(), f32x3(2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xy0(), f32x3(2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xy1(), f32x3(2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xzx(), f32x3(2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xzy(), f32x3(2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xzz(), f32x3(2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xz0(), f32x3(2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xz1(), f32x3(2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.x0x(), f32x3(2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.x0y(), f32x3(2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.x0z(), f32x3(2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.x00(), f32x3(2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.x01(), f32x3(2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.x1x(), f32x3(2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.x1y(), f32x3(2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.x1z(), f32x3(2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.x10(), f32x3(2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.x11(), f32x3(2.0f, 1.0f, 1.0f));

    ASSERT_EQ(tmp.yxx(), f32x3(3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.yxy(), f32x3(3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.yxz(), f32x3(3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.yx0(), f32x3(3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.yx1(), f32x3(3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.yyx(), f32x3(3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.yyy(), f32x3(3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.yyz(), f32x3(3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.yy0(), f32x3(3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.yy1(), f32x3(3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.yzx(), f32x3(3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.yzy(), f32x3(3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.yzz(), f32x3(3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.yz0(), f32x3(3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.yz1(), f32x3(3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.y0x(), f32x3(3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.y0y(), f32x3(3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.y0z(), f32x3(3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.y00(), f32x3(3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.y01(), f32x3(3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.y1x(), f32x3(3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.y1y(), f32x3(3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.y1z(), f32x3(3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.y10(), f32x3(3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.y11(), f32x3(3.0f, 1.0f, 1.0f));

    ASSERT_EQ(tmp.zxx(), f32x3(4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zxy(), f32x3(4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zxz(), f32x3(4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zx0(), f32x3(4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zx1(), f32x3(4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zyx(), f32x3(4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zyy(), f32x3(4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zyz(), f32x3(4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zy0(), f32x3(4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zy1(), f32x3(4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zzx(), f32x3(4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zzy(), f32x3(4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zzz(), f32x3(4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zz0(), f32x3(4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zz1(), f32x3(4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.z0x(), f32x3(4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.z0y(), f32x3(4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.z0z(), f32x3(4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.z00(), f32x3(4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.z01(), f32x3(4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.z1x(), f32x3(4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.z1y(), f32x3(4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.z1z(), f32x3(4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.z10(), f32x3(4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.z11(), f32x3(4.0f, 1.0f, 1.0f));

    ASSERT_EQ(tmp._0xx(), f32x3(0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0xy(), f32x3(0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0xz(), f32x3(0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0x0(), f32x3(0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0x1(), f32x3(0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0yx(), f32x3(0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0yy(), f32x3(0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0yz(), f32x3(0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0y0(), f32x3(0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0y1(), f32x3(0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0zx(), f32x3(0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0zy(), f32x3(0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0zz(), f32x3(0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0z0(), f32x3(0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0z1(), f32x3(0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._00x(), f32x3(0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._00y(), f32x3(0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._00z(), f32x3(0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._000(), f32x3(0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._001(), f32x3(0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._01x(), f32x3(0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._01y(), f32x3(0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._01z(), f32x3(0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._010(), f32x3(0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._011(), f32x3(0.0f, 1.0f, 1.0f));

    ASSERT_EQ(tmp._1xx(), f32x3(1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1xy(), f32x3(1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1xz(), f32x3(1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1x0(), f32x3(1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1x1(), f32x3(1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1yx(), f32x3(1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1yy(), f32x3(1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1yz(), f32x3(1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1y0(), f32x3(1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1y1(), f32x3(1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1zx(), f32x3(1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1zy(), f32x3(1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1zz(), f32x3(1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1z0(), f32x3(1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1z1(), f32x3(1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._10x(), f32x3(1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._10y(), f32x3(1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._10z(), f32x3(1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._100(), f32x3(1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._101(), f32x3(1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._11x(), f32x3(1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._11y(), f32x3(1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._11z(), f32x3(1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._110(), f32x3(1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._111(), f32x3(1.0f, 1.0f, 1.0f));
}

TEST(numeric_array, Swizzle4)
{
    ttlet tmp = f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    // Returns a 4D vector.
    ASSERT_EQ(tmp._0000(), f32x4(0.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0001(), f32x4(0.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._000x(), f32x4(0.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._000y(), f32x4(0.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._000z(), f32x4(0.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._000w(), f32x4(0.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0010(), f32x4(0.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0011(), f32x4(0.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._001x(), f32x4(0.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._001y(), f32x4(0.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._001z(), f32x4(0.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._001w(), f32x4(0.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._00x0(), f32x4(0.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._00x1(), f32x4(0.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._00xx(), f32x4(0.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._00xy(), f32x4(0.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._00xz(), f32x4(0.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._00xw(), f32x4(0.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._00y0(), f32x4(0.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._00y1(), f32x4(0.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._00yx(), f32x4(0.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._00yy(), f32x4(0.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._00yz(), f32x4(0.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._00yw(), f32x4(0.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._00z0(), f32x4(0.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._00z1(), f32x4(0.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._00zx(), f32x4(0.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._00zy(), f32x4(0.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._00zz(), f32x4(0.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._00zw(), f32x4(0.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._00w0(), f32x4(0.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._00w1(), f32x4(0.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._00wx(), f32x4(0.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._00wy(), f32x4(0.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._00wz(), f32x4(0.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._00ww(), f32x4(0.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0000(), f32x4(0.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0001(), f32x4(0.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._000x(), f32x4(0.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._000y(), f32x4(0.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._000z(), f32x4(0.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._000w(), f32x4(0.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0010(), f32x4(0.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0011(), f32x4(0.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._001x(), f32x4(0.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._001y(), f32x4(0.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._001z(), f32x4(0.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._001w(), f32x4(0.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._00x0(), f32x4(0.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._00x1(), f32x4(0.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._00xx(), f32x4(0.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._00xy(), f32x4(0.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._00xz(), f32x4(0.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._00xw(), f32x4(0.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._00y0(), f32x4(0.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._00y1(), f32x4(0.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._00yx(), f32x4(0.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._00yy(), f32x4(0.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._00yz(), f32x4(0.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._00yw(), f32x4(0.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._00z0(), f32x4(0.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._00z1(), f32x4(0.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._00zx(), f32x4(0.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._00zy(), f32x4(0.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._00zz(), f32x4(0.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._00zw(), f32x4(0.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._00w0(), f32x4(0.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._00w1(), f32x4(0.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._00wx(), f32x4(0.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._00wy(), f32x4(0.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._00wz(), f32x4(0.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._00ww(), f32x4(0.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0100(), f32x4(0.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0101(), f32x4(0.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._010x(), f32x4(0.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._010y(), f32x4(0.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._010z(), f32x4(0.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._010w(), f32x4(0.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0110(), f32x4(0.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0111(), f32x4(0.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._011x(), f32x4(0.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._011y(), f32x4(0.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._011z(), f32x4(0.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._011w(), f32x4(0.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._01x0(), f32x4(0.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._01x1(), f32x4(0.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._01xx(), f32x4(0.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._01xy(), f32x4(0.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._01xz(), f32x4(0.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._01xw(), f32x4(0.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._01y0(), f32x4(0.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._01y1(), f32x4(0.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._01yx(), f32x4(0.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._01yy(), f32x4(0.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._01yz(), f32x4(0.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._01yw(), f32x4(0.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._01z0(), f32x4(0.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._01z1(), f32x4(0.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._01zx(), f32x4(0.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._01zy(), f32x4(0.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._01zz(), f32x4(0.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._01zw(), f32x4(0.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._01w0(), f32x4(0.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._01w1(), f32x4(0.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._01wx(), f32x4(0.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._01wy(), f32x4(0.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._01wz(), f32x4(0.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._01ww(), f32x4(0.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0x00(), f32x4(0.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0x01(), f32x4(0.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0x0x(), f32x4(0.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0x0y(), f32x4(0.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0x0z(), f32x4(0.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0x0w(), f32x4(0.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0x10(), f32x4(0.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0x11(), f32x4(0.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0x1x(), f32x4(0.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0x1y(), f32x4(0.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0x1z(), f32x4(0.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0x1w(), f32x4(0.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0xx0(), f32x4(0.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0xx1(), f32x4(0.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0xxx(), f32x4(0.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0xxy(), f32x4(0.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0xxz(), f32x4(0.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0xxw(), f32x4(0.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0xy0(), f32x4(0.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0xy1(), f32x4(0.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0xyx(), f32x4(0.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0xyy(), f32x4(0.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0xyz(), f32x4(0.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0xyw(), f32x4(0.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0xz0(), f32x4(0.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0xz1(), f32x4(0.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0xzx(), f32x4(0.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0xzy(), f32x4(0.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0xzz(), f32x4(0.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0xzw(), f32x4(0.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0xw0(), f32x4(0.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0xw1(), f32x4(0.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0xwx(), f32x4(0.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0xwy(), f32x4(0.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0xwz(), f32x4(0.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0xww(), f32x4(0.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0y00(), f32x4(0.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0y01(), f32x4(0.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0y0x(), f32x4(0.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0y0y(), f32x4(0.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0y0z(), f32x4(0.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0y0w(), f32x4(0.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0y10(), f32x4(0.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0y11(), f32x4(0.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0y1x(), f32x4(0.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0y1y(), f32x4(0.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0y1z(), f32x4(0.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0y1w(), f32x4(0.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0yx0(), f32x4(0.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0yx1(), f32x4(0.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0yxx(), f32x4(0.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0yxy(), f32x4(0.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0yxz(), f32x4(0.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0yxw(), f32x4(0.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0yy0(), f32x4(0.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0yy1(), f32x4(0.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0yyx(), f32x4(0.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0yyy(), f32x4(0.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0yyz(), f32x4(0.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0yyw(), f32x4(0.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0yz0(), f32x4(0.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0yz1(), f32x4(0.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0yzx(), f32x4(0.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0yzy(), f32x4(0.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0yzz(), f32x4(0.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0yzw(), f32x4(0.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0yw0(), f32x4(0.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0yw1(), f32x4(0.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0ywx(), f32x4(0.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0ywy(), f32x4(0.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0ywz(), f32x4(0.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0yww(), f32x4(0.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0z00(), f32x4(0.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0z01(), f32x4(0.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0z0x(), f32x4(0.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0z0y(), f32x4(0.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0z0z(), f32x4(0.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0z0w(), f32x4(0.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0z10(), f32x4(0.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0z11(), f32x4(0.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0z1x(), f32x4(0.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0z1y(), f32x4(0.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0z1z(), f32x4(0.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0z1w(), f32x4(0.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0zx0(), f32x4(0.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0zx1(), f32x4(0.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0zxx(), f32x4(0.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0zxy(), f32x4(0.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0zxz(), f32x4(0.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0zxw(), f32x4(0.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0zy0(), f32x4(0.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0zy1(), f32x4(0.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0zyx(), f32x4(0.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0zyy(), f32x4(0.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0zyz(), f32x4(0.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0zyw(), f32x4(0.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0zz0(), f32x4(0.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0zz1(), f32x4(0.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0zzx(), f32x4(0.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0zzy(), f32x4(0.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0zzz(), f32x4(0.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0zzw(), f32x4(0.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0zw0(), f32x4(0.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0zw1(), f32x4(0.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0zwx(), f32x4(0.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0zwy(), f32x4(0.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0zwz(), f32x4(0.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0zww(), f32x4(0.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._0w00(), f32x4(0.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._0w01(), f32x4(0.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._0w0x(), f32x4(0.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._0w0y(), f32x4(0.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._0w0z(), f32x4(0.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._0w0w(), f32x4(0.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._0w10(), f32x4(0.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._0w11(), f32x4(0.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._0w1x(), f32x4(0.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._0w1y(), f32x4(0.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._0w1z(), f32x4(0.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._0w1w(), f32x4(0.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._0wx0(), f32x4(0.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._0wx1(), f32x4(0.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._0wxx(), f32x4(0.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._0wxy(), f32x4(0.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._0wxz(), f32x4(0.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._0wxw(), f32x4(0.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._0wy0(), f32x4(0.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._0wy1(), f32x4(0.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._0wyx(), f32x4(0.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._0wyy(), f32x4(0.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._0wyz(), f32x4(0.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._0wyw(), f32x4(0.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._0wz0(), f32x4(0.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._0wz1(), f32x4(0.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._0wzx(), f32x4(0.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._0wzy(), f32x4(0.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._0wzz(), f32x4(0.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._0wzw(), f32x4(0.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._0ww0(), f32x4(0.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._0ww1(), f32x4(0.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._0wwx(), f32x4(0.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._0wwy(), f32x4(0.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._0wwz(), f32x4(0.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._0www(), f32x4(0.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp._1000(), f32x4(1.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1001(), f32x4(1.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._100x(), f32x4(1.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._100y(), f32x4(1.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._100z(), f32x4(1.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._100w(), f32x4(1.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1010(), f32x4(1.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1011(), f32x4(1.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._101x(), f32x4(1.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._101y(), f32x4(1.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._101z(), f32x4(1.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._101w(), f32x4(1.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._10x0(), f32x4(1.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._10x1(), f32x4(1.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._10xx(), f32x4(1.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._10xy(), f32x4(1.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._10xz(), f32x4(1.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._10xw(), f32x4(1.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._10y0(), f32x4(1.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._10y1(), f32x4(1.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._10yx(), f32x4(1.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._10yy(), f32x4(1.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._10yz(), f32x4(1.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._10yw(), f32x4(1.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._10z0(), f32x4(1.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._10z1(), f32x4(1.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._10zx(), f32x4(1.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._10zy(), f32x4(1.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._10zz(), f32x4(1.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._10zw(), f32x4(1.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._10w0(), f32x4(1.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._10w1(), f32x4(1.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._10wx(), f32x4(1.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._10wy(), f32x4(1.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._10wz(), f32x4(1.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._10ww(), f32x4(1.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1000(), f32x4(1.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1001(), f32x4(1.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._100x(), f32x4(1.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._100y(), f32x4(1.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._100z(), f32x4(1.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._100w(), f32x4(1.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1010(), f32x4(1.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1011(), f32x4(1.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._101x(), f32x4(1.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._101y(), f32x4(1.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._101z(), f32x4(1.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._101w(), f32x4(1.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._10x0(), f32x4(1.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._10x1(), f32x4(1.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._10xx(), f32x4(1.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._10xy(), f32x4(1.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._10xz(), f32x4(1.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._10xw(), f32x4(1.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._10y0(), f32x4(1.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._10y1(), f32x4(1.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._10yx(), f32x4(1.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._10yy(), f32x4(1.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._10yz(), f32x4(1.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._10yw(), f32x4(1.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._10z0(), f32x4(1.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._10z1(), f32x4(1.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._10zx(), f32x4(1.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._10zy(), f32x4(1.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._10zz(), f32x4(1.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._10zw(), f32x4(1.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._10w0(), f32x4(1.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._10w1(), f32x4(1.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._10wx(), f32x4(1.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._10wy(), f32x4(1.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._10wz(), f32x4(1.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._10ww(), f32x4(1.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1100(), f32x4(1.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1101(), f32x4(1.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._110x(), f32x4(1.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._110y(), f32x4(1.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._110z(), f32x4(1.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._110w(), f32x4(1.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1110(), f32x4(1.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1111(), f32x4(1.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._111x(), f32x4(1.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._111y(), f32x4(1.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._111z(), f32x4(1.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._111w(), f32x4(1.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._11x0(), f32x4(1.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._11x1(), f32x4(1.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._11xx(), f32x4(1.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._11xy(), f32x4(1.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._11xz(), f32x4(1.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._11xw(), f32x4(1.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._11y0(), f32x4(1.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._11y1(), f32x4(1.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._11yx(), f32x4(1.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._11yy(), f32x4(1.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._11yz(), f32x4(1.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._11yw(), f32x4(1.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._11z0(), f32x4(1.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._11z1(), f32x4(1.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._11zx(), f32x4(1.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._11zy(), f32x4(1.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._11zz(), f32x4(1.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._11zw(), f32x4(1.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._11w0(), f32x4(1.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._11w1(), f32x4(1.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._11wx(), f32x4(1.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._11wy(), f32x4(1.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._11wz(), f32x4(1.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._11ww(), f32x4(1.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1x00(), f32x4(1.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1x01(), f32x4(1.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1x0x(), f32x4(1.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1x0y(), f32x4(1.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1x0z(), f32x4(1.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1x0w(), f32x4(1.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1x10(), f32x4(1.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1x11(), f32x4(1.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1x1x(), f32x4(1.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1x1y(), f32x4(1.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1x1z(), f32x4(1.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1x1w(), f32x4(1.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1xx0(), f32x4(1.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1xx1(), f32x4(1.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1xxx(), f32x4(1.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1xxy(), f32x4(1.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1xxz(), f32x4(1.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1xxw(), f32x4(1.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1xy0(), f32x4(1.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1xy1(), f32x4(1.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1xyx(), f32x4(1.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1xyy(), f32x4(1.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1xyz(), f32x4(1.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1xyw(), f32x4(1.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1xz0(), f32x4(1.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1xz1(), f32x4(1.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1xzx(), f32x4(1.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1xzy(), f32x4(1.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1xzz(), f32x4(1.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1xzw(), f32x4(1.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1xw0(), f32x4(1.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1xw1(), f32x4(1.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1xwx(), f32x4(1.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1xwy(), f32x4(1.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1xwz(), f32x4(1.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1xww(), f32x4(1.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1y00(), f32x4(1.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1y01(), f32x4(1.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1y0x(), f32x4(1.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1y0y(), f32x4(1.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1y0z(), f32x4(1.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1y0w(), f32x4(1.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1y10(), f32x4(1.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1y11(), f32x4(1.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1y1x(), f32x4(1.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1y1y(), f32x4(1.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1y1z(), f32x4(1.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1y1w(), f32x4(1.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1yx0(), f32x4(1.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1yx1(), f32x4(1.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1yxx(), f32x4(1.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1yxy(), f32x4(1.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1yxz(), f32x4(1.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1yxw(), f32x4(1.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1yy0(), f32x4(1.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1yy1(), f32x4(1.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1yyx(), f32x4(1.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1yyy(), f32x4(1.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1yyz(), f32x4(1.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1yyw(), f32x4(1.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1yz0(), f32x4(1.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1yz1(), f32x4(1.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1yzx(), f32x4(1.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1yzy(), f32x4(1.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1yzz(), f32x4(1.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1yzw(), f32x4(1.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1yw0(), f32x4(1.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1yw1(), f32x4(1.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1ywx(), f32x4(1.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1ywy(), f32x4(1.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1ywz(), f32x4(1.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1yww(), f32x4(1.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1z00(), f32x4(1.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1z01(), f32x4(1.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1z0x(), f32x4(1.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1z0y(), f32x4(1.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1z0z(), f32x4(1.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1z0w(), f32x4(1.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1z10(), f32x4(1.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1z11(), f32x4(1.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1z1x(), f32x4(1.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1z1y(), f32x4(1.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1z1z(), f32x4(1.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1z1w(), f32x4(1.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1zx0(), f32x4(1.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1zx1(), f32x4(1.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1zxx(), f32x4(1.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1zxy(), f32x4(1.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1zxz(), f32x4(1.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1zxw(), f32x4(1.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1zy0(), f32x4(1.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1zy1(), f32x4(1.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1zyx(), f32x4(1.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1zyy(), f32x4(1.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1zyz(), f32x4(1.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1zyw(), f32x4(1.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1zz0(), f32x4(1.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1zz1(), f32x4(1.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1zzx(), f32x4(1.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1zzy(), f32x4(1.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1zzz(), f32x4(1.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1zzw(), f32x4(1.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1zw0(), f32x4(1.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1zw1(), f32x4(1.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1zwx(), f32x4(1.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1zwy(), f32x4(1.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1zwz(), f32x4(1.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1zww(), f32x4(1.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp._1w00(), f32x4(1.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp._1w01(), f32x4(1.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp._1w0x(), f32x4(1.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp._1w0y(), f32x4(1.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp._1w0z(), f32x4(1.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp._1w0w(), f32x4(1.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp._1w10(), f32x4(1.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp._1w11(), f32x4(1.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp._1w1x(), f32x4(1.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp._1w1y(), f32x4(1.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp._1w1z(), f32x4(1.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp._1w1w(), f32x4(1.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp._1wx0(), f32x4(1.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp._1wx1(), f32x4(1.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp._1wxx(), f32x4(1.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp._1wxy(), f32x4(1.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp._1wxz(), f32x4(1.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp._1wxw(), f32x4(1.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp._1wy0(), f32x4(1.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp._1wy1(), f32x4(1.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp._1wyx(), f32x4(1.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp._1wyy(), f32x4(1.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp._1wyz(), f32x4(1.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp._1wyw(), f32x4(1.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp._1wz0(), f32x4(1.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp._1wz1(), f32x4(1.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp._1wzx(), f32x4(1.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp._1wzy(), f32x4(1.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp._1wzz(), f32x4(1.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp._1wzw(), f32x4(1.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp._1ww0(), f32x4(1.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp._1ww1(), f32x4(1.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp._1wwx(), f32x4(1.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp._1wwy(), f32x4(1.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp._1wwz(), f32x4(1.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp._1www(), f32x4(1.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.x000(), f32x4(2.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.x001(), f32x4(2.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.x00x(), f32x4(2.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.x00y(), f32x4(2.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.x00z(), f32x4(2.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.x00w(), f32x4(2.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x010(), f32x4(2.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.x011(), f32x4(2.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.x01x(), f32x4(2.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.x01y(), f32x4(2.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.x01z(), f32x4(2.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.x01w(), f32x4(2.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x0x0(), f32x4(2.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.x0x1(), f32x4(2.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.x0xx(), f32x4(2.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.x0xy(), f32x4(2.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.x0xz(), f32x4(2.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.x0xw(), f32x4(2.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x0y0(), f32x4(2.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.x0y1(), f32x4(2.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.x0yx(), f32x4(2.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.x0yy(), f32x4(2.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.x0yz(), f32x4(2.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.x0yw(), f32x4(2.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x0z0(), f32x4(2.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.x0z1(), f32x4(2.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.x0zx(), f32x4(2.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.x0zy(), f32x4(2.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.x0zz(), f32x4(2.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.x0zw(), f32x4(2.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x0w0(), f32x4(2.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.x0w1(), f32x4(2.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.x0wx(), f32x4(2.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.x0wy(), f32x4(2.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.x0wz(), f32x4(2.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.x0ww(), f32x4(2.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.x000(), f32x4(2.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.x001(), f32x4(2.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.x00x(), f32x4(2.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.x00y(), f32x4(2.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.x00z(), f32x4(2.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.x00w(), f32x4(2.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x010(), f32x4(2.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.x011(), f32x4(2.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.x01x(), f32x4(2.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.x01y(), f32x4(2.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.x01z(), f32x4(2.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.x01w(), f32x4(2.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x0x0(), f32x4(2.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.x0x1(), f32x4(2.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.x0xx(), f32x4(2.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.x0xy(), f32x4(2.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.x0xz(), f32x4(2.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.x0xw(), f32x4(2.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x0y0(), f32x4(2.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.x0y1(), f32x4(2.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.x0yx(), f32x4(2.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.x0yy(), f32x4(2.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.x0yz(), f32x4(2.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.x0yw(), f32x4(2.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x0z0(), f32x4(2.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.x0z1(), f32x4(2.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.x0zx(), f32x4(2.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.x0zy(), f32x4(2.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.x0zz(), f32x4(2.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.x0zw(), f32x4(2.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x0w0(), f32x4(2.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.x0w1(), f32x4(2.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.x0wx(), f32x4(2.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.x0wy(), f32x4(2.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.x0wz(), f32x4(2.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.x0ww(), f32x4(2.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.x100(), f32x4(2.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.x101(), f32x4(2.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.x10x(), f32x4(2.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.x10y(), f32x4(2.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.x10z(), f32x4(2.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.x10w(), f32x4(2.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.x110(), f32x4(2.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.x111(), f32x4(2.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.x11x(), f32x4(2.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.x11y(), f32x4(2.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.x11z(), f32x4(2.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.x11w(), f32x4(2.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.x1x0(), f32x4(2.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.x1x1(), f32x4(2.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.x1xx(), f32x4(2.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.x1xy(), f32x4(2.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.x1xz(), f32x4(2.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.x1xw(), f32x4(2.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.x1y0(), f32x4(2.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.x1y1(), f32x4(2.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.x1yx(), f32x4(2.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.x1yy(), f32x4(2.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.x1yz(), f32x4(2.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.x1yw(), f32x4(2.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.x1z0(), f32x4(2.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.x1z1(), f32x4(2.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.x1zx(), f32x4(2.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.x1zy(), f32x4(2.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.x1zz(), f32x4(2.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.x1zw(), f32x4(2.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.x1w0(), f32x4(2.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.x1w1(), f32x4(2.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.x1wx(), f32x4(2.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.x1wy(), f32x4(2.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.x1wz(), f32x4(2.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.x1ww(), f32x4(2.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xx00(), f32x4(2.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xx01(), f32x4(2.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xx0x(), f32x4(2.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xx0y(), f32x4(2.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xx0z(), f32x4(2.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xx0w(), f32x4(2.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xx10(), f32x4(2.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xx11(), f32x4(2.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xx1x(), f32x4(2.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xx1y(), f32x4(2.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xx1z(), f32x4(2.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xx1w(), f32x4(2.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xxx0(), f32x4(2.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xxx1(), f32x4(2.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xxxx(), f32x4(2.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xxxy(), f32x4(2.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xxxz(), f32x4(2.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xxxw(), f32x4(2.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xxy0(), f32x4(2.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xxy1(), f32x4(2.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xxyx(), f32x4(2.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xxyy(), f32x4(2.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xxyz(), f32x4(2.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xxyw(), f32x4(2.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xxz0(), f32x4(2.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xxz1(), f32x4(2.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xxzx(), f32x4(2.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xxzy(), f32x4(2.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xxzz(), f32x4(2.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xxzw(), f32x4(2.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xxw0(), f32x4(2.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xxw1(), f32x4(2.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xxwx(), f32x4(2.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xxwy(), f32x4(2.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xxwz(), f32x4(2.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xxww(), f32x4(2.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xy00(), f32x4(2.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xy01(), f32x4(2.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xy0x(), f32x4(2.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xy0y(), f32x4(2.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xy0z(), f32x4(2.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xy0w(), f32x4(2.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xy10(), f32x4(2.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xy11(), f32x4(2.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xy1x(), f32x4(2.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xy1y(), f32x4(2.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xy1z(), f32x4(2.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xy1w(), f32x4(2.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xyx0(), f32x4(2.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xyx1(), f32x4(2.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xyxx(), f32x4(2.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xyxy(), f32x4(2.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xyxz(), f32x4(2.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xyxw(), f32x4(2.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xyy0(), f32x4(2.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xyy1(), f32x4(2.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xyyx(), f32x4(2.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xyyy(), f32x4(2.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xyyz(), f32x4(2.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xyyw(), f32x4(2.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xyz0(), f32x4(2.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xyz1(), f32x4(2.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xyzx(), f32x4(2.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xyzy(), f32x4(2.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xyzz(), f32x4(2.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xyzw(), f32x4(2.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xyw0(), f32x4(2.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xyw1(), f32x4(2.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xywx(), f32x4(2.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xywy(), f32x4(2.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xywz(), f32x4(2.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xyww(), f32x4(2.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xz00(), f32x4(2.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xz01(), f32x4(2.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xz0x(), f32x4(2.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xz0y(), f32x4(2.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xz0z(), f32x4(2.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xz0w(), f32x4(2.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xz10(), f32x4(2.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xz11(), f32x4(2.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xz1x(), f32x4(2.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xz1y(), f32x4(2.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xz1z(), f32x4(2.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xz1w(), f32x4(2.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xzx0(), f32x4(2.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xzx1(), f32x4(2.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xzxx(), f32x4(2.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xzxy(), f32x4(2.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xzxz(), f32x4(2.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xzxw(), f32x4(2.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xzy0(), f32x4(2.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xzy1(), f32x4(2.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xzyx(), f32x4(2.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xzyy(), f32x4(2.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xzyz(), f32x4(2.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xzyw(), f32x4(2.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xzz0(), f32x4(2.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xzz1(), f32x4(2.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xzzx(), f32x4(2.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xzzy(), f32x4(2.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xzzz(), f32x4(2.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xzzw(), f32x4(2.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xzw0(), f32x4(2.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xzw1(), f32x4(2.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xzwx(), f32x4(2.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xzwy(), f32x4(2.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xzwz(), f32x4(2.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xzww(), f32x4(2.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.xw00(), f32x4(2.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.xw01(), f32x4(2.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.xw0x(), f32x4(2.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.xw0y(), f32x4(2.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.xw0z(), f32x4(2.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.xw0w(), f32x4(2.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.xw10(), f32x4(2.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.xw11(), f32x4(2.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.xw1x(), f32x4(2.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.xw1y(), f32x4(2.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.xw1z(), f32x4(2.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.xw1w(), f32x4(2.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.xwx0(), f32x4(2.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.xwx1(), f32x4(2.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.xwxx(), f32x4(2.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.xwxy(), f32x4(2.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.xwxz(), f32x4(2.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.xwxw(), f32x4(2.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.xwy0(), f32x4(2.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.xwy1(), f32x4(2.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.xwyx(), f32x4(2.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.xwyy(), f32x4(2.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.xwyz(), f32x4(2.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.xwyw(), f32x4(2.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.xwz0(), f32x4(2.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.xwz1(), f32x4(2.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.xwzx(), f32x4(2.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.xwzy(), f32x4(2.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.xwzz(), f32x4(2.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.xwzw(), f32x4(2.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.xww0(), f32x4(2.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.xww1(), f32x4(2.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.xwwx(), f32x4(2.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.xwwy(), f32x4(2.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.xwwz(), f32x4(2.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.xwww(), f32x4(2.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.y000(), f32x4(3.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.y001(), f32x4(3.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.y00x(), f32x4(3.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.y00y(), f32x4(3.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.y00z(), f32x4(3.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.y00w(), f32x4(3.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y010(), f32x4(3.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.y011(), f32x4(3.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.y01x(), f32x4(3.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.y01y(), f32x4(3.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.y01z(), f32x4(3.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.y01w(), f32x4(3.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y0x0(), f32x4(3.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.y0x1(), f32x4(3.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.y0xx(), f32x4(3.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.y0xy(), f32x4(3.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.y0xz(), f32x4(3.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.y0xw(), f32x4(3.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y0y0(), f32x4(3.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.y0y1(), f32x4(3.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.y0yx(), f32x4(3.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.y0yy(), f32x4(3.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.y0yz(), f32x4(3.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.y0yw(), f32x4(3.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y0z0(), f32x4(3.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.y0z1(), f32x4(3.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.y0zx(), f32x4(3.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.y0zy(), f32x4(3.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.y0zz(), f32x4(3.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.y0zw(), f32x4(3.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y0w0(), f32x4(3.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.y0w1(), f32x4(3.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.y0wx(), f32x4(3.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.y0wy(), f32x4(3.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.y0wz(), f32x4(3.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.y0ww(), f32x4(3.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.y000(), f32x4(3.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.y001(), f32x4(3.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.y00x(), f32x4(3.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.y00y(), f32x4(3.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.y00z(), f32x4(3.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.y00w(), f32x4(3.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y010(), f32x4(3.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.y011(), f32x4(3.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.y01x(), f32x4(3.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.y01y(), f32x4(3.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.y01z(), f32x4(3.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.y01w(), f32x4(3.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y0x0(), f32x4(3.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.y0x1(), f32x4(3.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.y0xx(), f32x4(3.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.y0xy(), f32x4(3.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.y0xz(), f32x4(3.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.y0xw(), f32x4(3.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y0y0(), f32x4(3.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.y0y1(), f32x4(3.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.y0yx(), f32x4(3.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.y0yy(), f32x4(3.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.y0yz(), f32x4(3.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.y0yw(), f32x4(3.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y0z0(), f32x4(3.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.y0z1(), f32x4(3.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.y0zx(), f32x4(3.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.y0zy(), f32x4(3.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.y0zz(), f32x4(3.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.y0zw(), f32x4(3.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y0w0(), f32x4(3.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.y0w1(), f32x4(3.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.y0wx(), f32x4(3.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.y0wy(), f32x4(3.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.y0wz(), f32x4(3.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.y0ww(), f32x4(3.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.y100(), f32x4(3.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.y101(), f32x4(3.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.y10x(), f32x4(3.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.y10y(), f32x4(3.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.y10z(), f32x4(3.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.y10w(), f32x4(3.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.y110(), f32x4(3.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.y111(), f32x4(3.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.y11x(), f32x4(3.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.y11y(), f32x4(3.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.y11z(), f32x4(3.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.y11w(), f32x4(3.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.y1x0(), f32x4(3.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.y1x1(), f32x4(3.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.y1xx(), f32x4(3.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.y1xy(), f32x4(3.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.y1xz(), f32x4(3.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.y1xw(), f32x4(3.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.y1y0(), f32x4(3.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.y1y1(), f32x4(3.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.y1yx(), f32x4(3.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.y1yy(), f32x4(3.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.y1yz(), f32x4(3.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.y1yw(), f32x4(3.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.y1z0(), f32x4(3.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.y1z1(), f32x4(3.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.y1zx(), f32x4(3.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.y1zy(), f32x4(3.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.y1zz(), f32x4(3.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.y1zw(), f32x4(3.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.y1w0(), f32x4(3.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.y1w1(), f32x4(3.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.y1wx(), f32x4(3.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.y1wy(), f32x4(3.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.y1wz(), f32x4(3.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.y1ww(), f32x4(3.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yx00(), f32x4(3.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yx01(), f32x4(3.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yx0x(), f32x4(3.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yx0y(), f32x4(3.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yx0z(), f32x4(3.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yx0w(), f32x4(3.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yx10(), f32x4(3.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yx11(), f32x4(3.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yx1x(), f32x4(3.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yx1y(), f32x4(3.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yx1z(), f32x4(3.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yx1w(), f32x4(3.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yxx0(), f32x4(3.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.yxx1(), f32x4(3.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.yxxx(), f32x4(3.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.yxxy(), f32x4(3.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.yxxz(), f32x4(3.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.yxxw(), f32x4(3.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yxy0(), f32x4(3.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.yxy1(), f32x4(3.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.yxyx(), f32x4(3.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.yxyy(), f32x4(3.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.yxyz(), f32x4(3.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.yxyw(), f32x4(3.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yxz0(), f32x4(3.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.yxz1(), f32x4(3.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.yxzx(), f32x4(3.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.yxzy(), f32x4(3.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.yxzz(), f32x4(3.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.yxzw(), f32x4(3.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yxw0(), f32x4(3.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yxw1(), f32x4(3.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.yxwx(), f32x4(3.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.yxwy(), f32x4(3.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.yxwz(), f32x4(3.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.yxww(), f32x4(3.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yy00(), f32x4(3.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yy01(), f32x4(3.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yy0x(), f32x4(3.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yy0y(), f32x4(3.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yy0z(), f32x4(3.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yy0w(), f32x4(3.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yy10(), f32x4(3.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yy11(), f32x4(3.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yy1x(), f32x4(3.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yy1y(), f32x4(3.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yy1z(), f32x4(3.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yy1w(), f32x4(3.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yyx0(), f32x4(3.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.yyx1(), f32x4(3.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.yyxx(), f32x4(3.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.yyxy(), f32x4(3.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.yyxz(), f32x4(3.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.yyxw(), f32x4(3.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yyy0(), f32x4(3.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.yyy1(), f32x4(3.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.yyyx(), f32x4(3.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.yyyy(), f32x4(3.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.yyyz(), f32x4(3.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.yyyw(), f32x4(3.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yyz0(), f32x4(3.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.yyz1(), f32x4(3.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.yyzx(), f32x4(3.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.yyzy(), f32x4(3.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.yyzz(), f32x4(3.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.yyzw(), f32x4(3.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yyw0(), f32x4(3.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yyw1(), f32x4(3.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.yywx(), f32x4(3.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.yywy(), f32x4(3.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.yywz(), f32x4(3.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.yyww(), f32x4(3.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yz00(), f32x4(3.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yz01(), f32x4(3.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yz0x(), f32x4(3.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yz0y(), f32x4(3.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yz0z(), f32x4(3.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yz0w(), f32x4(3.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yz10(), f32x4(3.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yz11(), f32x4(3.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yz1x(), f32x4(3.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yz1y(), f32x4(3.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yz1z(), f32x4(3.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yz1w(), f32x4(3.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.yzx0(), f32x4(3.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.yzx1(), f32x4(3.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.yzxx(), f32x4(3.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.yzxy(), f32x4(3.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.yzxz(), f32x4(3.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.yzxw(), f32x4(3.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.yzy0(), f32x4(3.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.yzy1(), f32x4(3.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.yzyx(), f32x4(3.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.yzyy(), f32x4(3.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.yzyz(), f32x4(3.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.yzyw(), f32x4(3.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.yzz0(), f32x4(3.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.yzz1(), f32x4(3.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.yzzx(), f32x4(3.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.yzzy(), f32x4(3.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.yzzz(), f32x4(3.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.yzzw(), f32x4(3.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yzw0(), f32x4(3.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yzw1(), f32x4(3.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.yzwx(), f32x4(3.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.yzwy(), f32x4(3.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.yzwz(), f32x4(3.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.yzww(), f32x4(3.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.yw00(), f32x4(3.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.yw01(), f32x4(3.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.yw0x(), f32x4(3.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.yw0y(), f32x4(3.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.yw0z(), f32x4(3.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.yw0w(), f32x4(3.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.yw10(), f32x4(3.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.yw11(), f32x4(3.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.yw1x(), f32x4(3.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.yw1y(), f32x4(3.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.yw1z(), f32x4(3.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.yw1w(), f32x4(3.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.ywx0(), f32x4(3.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.ywx1(), f32x4(3.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.ywxx(), f32x4(3.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.ywxy(), f32x4(3.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.ywxz(), f32x4(3.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.ywxw(), f32x4(3.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.ywy0(), f32x4(3.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.ywy1(), f32x4(3.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.ywyx(), f32x4(3.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.ywyy(), f32x4(3.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.ywyz(), f32x4(3.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.ywyw(), f32x4(3.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.ywz0(), f32x4(3.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.ywz1(), f32x4(3.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.ywzx(), f32x4(3.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.ywzy(), f32x4(3.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.ywzz(), f32x4(3.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.ywzw(), f32x4(3.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.yww0(), f32x4(3.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.yww1(), f32x4(3.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.ywwx(), f32x4(3.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.ywwy(), f32x4(3.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.ywwz(), f32x4(3.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.ywww(), f32x4(3.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.z000(), f32x4(4.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.z001(), f32x4(4.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.z00x(), f32x4(4.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.z00y(), f32x4(4.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.z00z(), f32x4(4.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.z00w(), f32x4(4.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z010(), f32x4(4.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.z011(), f32x4(4.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.z01x(), f32x4(4.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.z01y(), f32x4(4.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.z01z(), f32x4(4.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.z01w(), f32x4(4.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z0x0(), f32x4(4.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.z0x1(), f32x4(4.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.z0xx(), f32x4(4.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.z0xy(), f32x4(4.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.z0xz(), f32x4(4.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.z0xw(), f32x4(4.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z0y0(), f32x4(4.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.z0y1(), f32x4(4.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.z0yx(), f32x4(4.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.z0yy(), f32x4(4.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.z0yz(), f32x4(4.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.z0yw(), f32x4(4.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z0z0(), f32x4(4.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.z0z1(), f32x4(4.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.z0zx(), f32x4(4.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.z0zy(), f32x4(4.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.z0zz(), f32x4(4.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.z0zw(), f32x4(4.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z0w0(), f32x4(4.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.z0w1(), f32x4(4.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.z0wx(), f32x4(4.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.z0wy(), f32x4(4.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.z0wz(), f32x4(4.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.z0ww(), f32x4(4.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.z000(), f32x4(4.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.z001(), f32x4(4.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.z00x(), f32x4(4.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.z00y(), f32x4(4.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.z00z(), f32x4(4.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.z00w(), f32x4(4.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z010(), f32x4(4.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.z011(), f32x4(4.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.z01x(), f32x4(4.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.z01y(), f32x4(4.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.z01z(), f32x4(4.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.z01w(), f32x4(4.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z0x0(), f32x4(4.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.z0x1(), f32x4(4.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.z0xx(), f32x4(4.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.z0xy(), f32x4(4.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.z0xz(), f32x4(4.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.z0xw(), f32x4(4.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z0y0(), f32x4(4.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.z0y1(), f32x4(4.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.z0yx(), f32x4(4.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.z0yy(), f32x4(4.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.z0yz(), f32x4(4.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.z0yw(), f32x4(4.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z0z0(), f32x4(4.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.z0z1(), f32x4(4.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.z0zx(), f32x4(4.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.z0zy(), f32x4(4.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.z0zz(), f32x4(4.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.z0zw(), f32x4(4.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z0w0(), f32x4(4.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.z0w1(), f32x4(4.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.z0wx(), f32x4(4.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.z0wy(), f32x4(4.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.z0wz(), f32x4(4.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.z0ww(), f32x4(4.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.z100(), f32x4(4.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.z101(), f32x4(4.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.z10x(), f32x4(4.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.z10y(), f32x4(4.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.z10z(), f32x4(4.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.z10w(), f32x4(4.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.z110(), f32x4(4.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.z111(), f32x4(4.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.z11x(), f32x4(4.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.z11y(), f32x4(4.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.z11z(), f32x4(4.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.z11w(), f32x4(4.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.z1x0(), f32x4(4.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.z1x1(), f32x4(4.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.z1xx(), f32x4(4.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.z1xy(), f32x4(4.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.z1xz(), f32x4(4.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.z1xw(), f32x4(4.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.z1y0(), f32x4(4.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.z1y1(), f32x4(4.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.z1yx(), f32x4(4.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.z1yy(), f32x4(4.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.z1yz(), f32x4(4.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.z1yw(), f32x4(4.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.z1z0(), f32x4(4.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.z1z1(), f32x4(4.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.z1zx(), f32x4(4.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.z1zy(), f32x4(4.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.z1zz(), f32x4(4.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.z1zw(), f32x4(4.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.z1w0(), f32x4(4.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.z1w1(), f32x4(4.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.z1wx(), f32x4(4.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.z1wy(), f32x4(4.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.z1wz(), f32x4(4.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.z1ww(), f32x4(4.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zx00(), f32x4(4.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zx01(), f32x4(4.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zx0x(), f32x4(4.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zx0y(), f32x4(4.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zx0z(), f32x4(4.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zx0w(), f32x4(4.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zx10(), f32x4(4.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zx11(), f32x4(4.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zx1x(), f32x4(4.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zx1y(), f32x4(4.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zx1z(), f32x4(4.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zx1w(), f32x4(4.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zxx0(), f32x4(4.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zxx1(), f32x4(4.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zxxx(), f32x4(4.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zxxy(), f32x4(4.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zxxz(), f32x4(4.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zxxw(), f32x4(4.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zxy0(), f32x4(4.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zxy1(), f32x4(4.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zxyx(), f32x4(4.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zxyy(), f32x4(4.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zxyz(), f32x4(4.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zxyw(), f32x4(4.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zxz0(), f32x4(4.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zxz1(), f32x4(4.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zxzx(), f32x4(4.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zxzy(), f32x4(4.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zxzz(), f32x4(4.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zxzw(), f32x4(4.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zxw0(), f32x4(4.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zxw1(), f32x4(4.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zxwx(), f32x4(4.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zxwy(), f32x4(4.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zxwz(), f32x4(4.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zxww(), f32x4(4.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zy00(), f32x4(4.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zy01(), f32x4(4.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zy0x(), f32x4(4.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zy0y(), f32x4(4.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zy0z(), f32x4(4.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zy0w(), f32x4(4.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zy10(), f32x4(4.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zy11(), f32x4(4.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zy1x(), f32x4(4.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zy1y(), f32x4(4.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zy1z(), f32x4(4.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zy1w(), f32x4(4.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zyx0(), f32x4(4.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zyx1(), f32x4(4.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zyxx(), f32x4(4.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zyxy(), f32x4(4.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zyxz(), f32x4(4.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zyxw(), f32x4(4.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zyy0(), f32x4(4.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zyy1(), f32x4(4.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zyyx(), f32x4(4.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zyyy(), f32x4(4.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zyyz(), f32x4(4.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zyyw(), f32x4(4.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zyz0(), f32x4(4.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zyz1(), f32x4(4.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zyzx(), f32x4(4.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zyzy(), f32x4(4.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zyzz(), f32x4(4.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zyzw(), f32x4(4.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zyw0(), f32x4(4.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zyw1(), f32x4(4.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zywx(), f32x4(4.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zywy(), f32x4(4.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zywz(), f32x4(4.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zyww(), f32x4(4.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zz00(), f32x4(4.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zz01(), f32x4(4.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zz0x(), f32x4(4.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zz0y(), f32x4(4.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zz0z(), f32x4(4.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zz0w(), f32x4(4.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zz10(), f32x4(4.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zz11(), f32x4(4.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zz1x(), f32x4(4.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zz1y(), f32x4(4.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zz1z(), f32x4(4.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zz1w(), f32x4(4.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zzx0(), f32x4(4.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zzx1(), f32x4(4.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zzxx(), f32x4(4.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zzxy(), f32x4(4.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zzxz(), f32x4(4.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zzxw(), f32x4(4.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zzy0(), f32x4(4.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zzy1(), f32x4(4.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zzyx(), f32x4(4.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zzyy(), f32x4(4.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zzyz(), f32x4(4.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zzyw(), f32x4(4.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zzz0(), f32x4(4.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zzz1(), f32x4(4.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zzzx(), f32x4(4.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zzzy(), f32x4(4.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zzzz(), f32x4(4.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zzzw(), f32x4(4.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zzw0(), f32x4(4.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zzw1(), f32x4(4.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zzwx(), f32x4(4.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zzwy(), f32x4(4.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zzwz(), f32x4(4.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zzww(), f32x4(4.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.zw00(), f32x4(4.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.zw01(), f32x4(4.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.zw0x(), f32x4(4.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.zw0y(), f32x4(4.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.zw0z(), f32x4(4.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.zw0w(), f32x4(4.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.zw10(), f32x4(4.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.zw11(), f32x4(4.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.zw1x(), f32x4(4.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.zw1y(), f32x4(4.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.zw1z(), f32x4(4.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.zw1w(), f32x4(4.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.zwx0(), f32x4(4.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.zwx1(), f32x4(4.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.zwxx(), f32x4(4.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.zwxy(), f32x4(4.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.zwxz(), f32x4(4.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.zwxw(), f32x4(4.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.zwy0(), f32x4(4.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.zwy1(), f32x4(4.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.zwyx(), f32x4(4.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.zwyy(), f32x4(4.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.zwyz(), f32x4(4.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.zwyw(), f32x4(4.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.zwz0(), f32x4(4.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.zwz1(), f32x4(4.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.zwzx(), f32x4(4.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.zwzy(), f32x4(4.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.zwzz(), f32x4(4.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.zwzw(), f32x4(4.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.zww0(), f32x4(4.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.zww1(), f32x4(4.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.zwwx(), f32x4(4.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.zwwy(), f32x4(4.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.zwwz(), f32x4(4.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.zwww(), f32x4(4.0f, 5.0f, 5.0f, 5.0f));

    ASSERT_EQ(tmp.w000(), f32x4(5.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.w001(), f32x4(5.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.w00x(), f32x4(5.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.w00y(), f32x4(5.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.w00z(), f32x4(5.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.w00w(), f32x4(5.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w010(), f32x4(5.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.w011(), f32x4(5.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.w01x(), f32x4(5.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.w01y(), f32x4(5.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.w01z(), f32x4(5.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.w01w(), f32x4(5.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w0x0(), f32x4(5.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.w0x1(), f32x4(5.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.w0xx(), f32x4(5.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.w0xy(), f32x4(5.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.w0xz(), f32x4(5.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.w0xw(), f32x4(5.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w0y0(), f32x4(5.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.w0y1(), f32x4(5.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.w0yx(), f32x4(5.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.w0yy(), f32x4(5.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.w0yz(), f32x4(5.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.w0yw(), f32x4(5.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w0z0(), f32x4(5.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.w0z1(), f32x4(5.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.w0zx(), f32x4(5.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.w0zy(), f32x4(5.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.w0zz(), f32x4(5.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.w0zw(), f32x4(5.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w0w0(), f32x4(5.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.w0w1(), f32x4(5.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.w0wx(), f32x4(5.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.w0wy(), f32x4(5.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.w0wz(), f32x4(5.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.w0ww(), f32x4(5.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.w000(), f32x4(5.0f, 0.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.w001(), f32x4(5.0f, 0.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.w00x(), f32x4(5.0f, 0.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.w00y(), f32x4(5.0f, 0.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.w00z(), f32x4(5.0f, 0.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.w00w(), f32x4(5.0f, 0.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w010(), f32x4(5.0f, 0.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.w011(), f32x4(5.0f, 0.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.w01x(), f32x4(5.0f, 0.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.w01y(), f32x4(5.0f, 0.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.w01z(), f32x4(5.0f, 0.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.w01w(), f32x4(5.0f, 0.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w0x0(), f32x4(5.0f, 0.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.w0x1(), f32x4(5.0f, 0.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.w0xx(), f32x4(5.0f, 0.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.w0xy(), f32x4(5.0f, 0.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.w0xz(), f32x4(5.0f, 0.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.w0xw(), f32x4(5.0f, 0.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w0y0(), f32x4(5.0f, 0.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.w0y1(), f32x4(5.0f, 0.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.w0yx(), f32x4(5.0f, 0.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.w0yy(), f32x4(5.0f, 0.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.w0yz(), f32x4(5.0f, 0.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.w0yw(), f32x4(5.0f, 0.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w0z0(), f32x4(5.0f, 0.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.w0z1(), f32x4(5.0f, 0.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.w0zx(), f32x4(5.0f, 0.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.w0zy(), f32x4(5.0f, 0.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.w0zz(), f32x4(5.0f, 0.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.w0zw(), f32x4(5.0f, 0.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w0w0(), f32x4(5.0f, 0.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.w0w1(), f32x4(5.0f, 0.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.w0wx(), f32x4(5.0f, 0.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.w0wy(), f32x4(5.0f, 0.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.w0wz(), f32x4(5.0f, 0.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.w0ww(), f32x4(5.0f, 0.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.w100(), f32x4(5.0f, 1.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.w101(), f32x4(5.0f, 1.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.w10x(), f32x4(5.0f, 1.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.w10y(), f32x4(5.0f, 1.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.w10z(), f32x4(5.0f, 1.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.w10w(), f32x4(5.0f, 1.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.w110(), f32x4(5.0f, 1.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.w111(), f32x4(5.0f, 1.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.w11x(), f32x4(5.0f, 1.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.w11y(), f32x4(5.0f, 1.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.w11z(), f32x4(5.0f, 1.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.w11w(), f32x4(5.0f, 1.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.w1x0(), f32x4(5.0f, 1.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.w1x1(), f32x4(5.0f, 1.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.w1xx(), f32x4(5.0f, 1.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.w1xy(), f32x4(5.0f, 1.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.w1xz(), f32x4(5.0f, 1.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.w1xw(), f32x4(5.0f, 1.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.w1y0(), f32x4(5.0f, 1.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.w1y1(), f32x4(5.0f, 1.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.w1yx(), f32x4(5.0f, 1.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.w1yy(), f32x4(5.0f, 1.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.w1yz(), f32x4(5.0f, 1.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.w1yw(), f32x4(5.0f, 1.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.w1z0(), f32x4(5.0f, 1.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.w1z1(), f32x4(5.0f, 1.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.w1zx(), f32x4(5.0f, 1.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.w1zy(), f32x4(5.0f, 1.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.w1zz(), f32x4(5.0f, 1.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.w1zw(), f32x4(5.0f, 1.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.w1w0(), f32x4(5.0f, 1.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.w1w1(), f32x4(5.0f, 1.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.w1wx(), f32x4(5.0f, 1.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.w1wy(), f32x4(5.0f, 1.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.w1wz(), f32x4(5.0f, 1.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.w1ww(), f32x4(5.0f, 1.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wx00(), f32x4(5.0f, 2.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.wx01(), f32x4(5.0f, 2.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.wx0x(), f32x4(5.0f, 2.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.wx0y(), f32x4(5.0f, 2.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.wx0z(), f32x4(5.0f, 2.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.wx0w(), f32x4(5.0f, 2.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wx10(), f32x4(5.0f, 2.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.wx11(), f32x4(5.0f, 2.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.wx1x(), f32x4(5.0f, 2.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.wx1y(), f32x4(5.0f, 2.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.wx1z(), f32x4(5.0f, 2.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.wx1w(), f32x4(5.0f, 2.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wxx0(), f32x4(5.0f, 2.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wxx1(), f32x4(5.0f, 2.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wxxx(), f32x4(5.0f, 2.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wxxy(), f32x4(5.0f, 2.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wxxz(), f32x4(5.0f, 2.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wxxw(), f32x4(5.0f, 2.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wxy0(), f32x4(5.0f, 2.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wxy1(), f32x4(5.0f, 2.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wxyx(), f32x4(5.0f, 2.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wxyy(), f32x4(5.0f, 2.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wxyz(), f32x4(5.0f, 2.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wxyw(), f32x4(5.0f, 2.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wxz0(), f32x4(5.0f, 2.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wxz1(), f32x4(5.0f, 2.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wxzx(), f32x4(5.0f, 2.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wxzy(), f32x4(5.0f, 2.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wxzz(), f32x4(5.0f, 2.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wxzw(), f32x4(5.0f, 2.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wxw0(), f32x4(5.0f, 2.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.wxw1(), f32x4(5.0f, 2.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wxwx(), f32x4(5.0f, 2.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wxwy(), f32x4(5.0f, 2.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wxwz(), f32x4(5.0f, 2.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wxww(), f32x4(5.0f, 2.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wy00(), f32x4(5.0f, 3.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.wy01(), f32x4(5.0f, 3.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.wy0x(), f32x4(5.0f, 3.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.wy0y(), f32x4(5.0f, 3.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.wy0z(), f32x4(5.0f, 3.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.wy0w(), f32x4(5.0f, 3.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wy10(), f32x4(5.0f, 3.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.wy11(), f32x4(5.0f, 3.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.wy1x(), f32x4(5.0f, 3.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.wy1y(), f32x4(5.0f, 3.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.wy1z(), f32x4(5.0f, 3.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.wy1w(), f32x4(5.0f, 3.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wyx0(), f32x4(5.0f, 3.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wyx1(), f32x4(5.0f, 3.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wyxx(), f32x4(5.0f, 3.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wyxy(), f32x4(5.0f, 3.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wyxz(), f32x4(5.0f, 3.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wyxw(), f32x4(5.0f, 3.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wyy0(), f32x4(5.0f, 3.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wyy1(), f32x4(5.0f, 3.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wyyx(), f32x4(5.0f, 3.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wyyy(), f32x4(5.0f, 3.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wyyz(), f32x4(5.0f, 3.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wyyw(), f32x4(5.0f, 3.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wyz0(), f32x4(5.0f, 3.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wyz1(), f32x4(5.0f, 3.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wyzx(), f32x4(5.0f, 3.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wyzy(), f32x4(5.0f, 3.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wyzz(), f32x4(5.0f, 3.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wyzw(), f32x4(5.0f, 3.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wyw0(), f32x4(5.0f, 3.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.wyw1(), f32x4(5.0f, 3.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wywx(), f32x4(5.0f, 3.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wywy(), f32x4(5.0f, 3.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wywz(), f32x4(5.0f, 3.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wyww(), f32x4(5.0f, 3.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.wz00(), f32x4(5.0f, 4.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.wz01(), f32x4(5.0f, 4.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.wz0x(), f32x4(5.0f, 4.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.wz0y(), f32x4(5.0f, 4.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.wz0z(), f32x4(5.0f, 4.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.wz0w(), f32x4(5.0f, 4.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.wz10(), f32x4(5.0f, 4.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.wz11(), f32x4(5.0f, 4.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.wz1x(), f32x4(5.0f, 4.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.wz1y(), f32x4(5.0f, 4.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.wz1z(), f32x4(5.0f, 4.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.wz1w(), f32x4(5.0f, 4.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wzx0(), f32x4(5.0f, 4.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wzx1(), f32x4(5.0f, 4.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wzxx(), f32x4(5.0f, 4.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wzxy(), f32x4(5.0f, 4.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wzxz(), f32x4(5.0f, 4.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wzxw(), f32x4(5.0f, 4.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wzy0(), f32x4(5.0f, 4.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wzy1(), f32x4(5.0f, 4.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wzyx(), f32x4(5.0f, 4.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wzyy(), f32x4(5.0f, 4.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wzyz(), f32x4(5.0f, 4.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wzyw(), f32x4(5.0f, 4.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wzz0(), f32x4(5.0f, 4.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wzz1(), f32x4(5.0f, 4.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wzzx(), f32x4(5.0f, 4.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wzzy(), f32x4(5.0f, 4.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wzzz(), f32x4(5.0f, 4.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wzzw(), f32x4(5.0f, 4.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.wzw0(), f32x4(5.0f, 4.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.wzw1(), f32x4(5.0f, 4.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wzwx(), f32x4(5.0f, 4.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wzwy(), f32x4(5.0f, 4.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wzwz(), f32x4(5.0f, 4.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wzww(), f32x4(5.0f, 4.0f, 5.0f, 5.0f));
    ASSERT_EQ(tmp.ww00(), f32x4(5.0f, 5.0f, 0.0f, 0.0f));
    ASSERT_EQ(tmp.ww01(), f32x4(5.0f, 5.0f, 0.0f, 1.0f));
    ASSERT_EQ(tmp.ww0x(), f32x4(5.0f, 5.0f, 0.0f, 2.0f));
    ASSERT_EQ(tmp.ww0y(), f32x4(5.0f, 5.0f, 0.0f, 3.0f));
    ASSERT_EQ(tmp.ww0z(), f32x4(5.0f, 5.0f, 0.0f, 4.0f));
    ASSERT_EQ(tmp.ww0w(), f32x4(5.0f, 5.0f, 0.0f, 5.0f));
    ASSERT_EQ(tmp.ww10(), f32x4(5.0f, 5.0f, 1.0f, 0.0f));
    ASSERT_EQ(tmp.ww11(), f32x4(5.0f, 5.0f, 1.0f, 1.0f));
    ASSERT_EQ(tmp.ww1x(), f32x4(5.0f, 5.0f, 1.0f, 2.0f));
    ASSERT_EQ(tmp.ww1y(), f32x4(5.0f, 5.0f, 1.0f, 3.0f));
    ASSERT_EQ(tmp.ww1z(), f32x4(5.0f, 5.0f, 1.0f, 4.0f));
    ASSERT_EQ(tmp.ww1w(), f32x4(5.0f, 5.0f, 1.0f, 5.0f));
    ASSERT_EQ(tmp.wwx0(), f32x4(5.0f, 5.0f, 2.0f, 0.0f));
    ASSERT_EQ(tmp.wwx1(), f32x4(5.0f, 5.0f, 2.0f, 1.0f));
    ASSERT_EQ(tmp.wwxx(), f32x4(5.0f, 5.0f, 2.0f, 2.0f));
    ASSERT_EQ(tmp.wwxy(), f32x4(5.0f, 5.0f, 2.0f, 3.0f));
    ASSERT_EQ(tmp.wwxz(), f32x4(5.0f, 5.0f, 2.0f, 4.0f));
    ASSERT_EQ(tmp.wwxw(), f32x4(5.0f, 5.0f, 2.0f, 5.0f));
    ASSERT_EQ(tmp.wwy0(), f32x4(5.0f, 5.0f, 3.0f, 0.0f));
    ASSERT_EQ(tmp.wwy1(), f32x4(5.0f, 5.0f, 3.0f, 1.0f));
    ASSERT_EQ(tmp.wwyx(), f32x4(5.0f, 5.0f, 3.0f, 2.0f));
    ASSERT_EQ(tmp.wwyy(), f32x4(5.0f, 5.0f, 3.0f, 3.0f));
    ASSERT_EQ(tmp.wwyz(), f32x4(5.0f, 5.0f, 3.0f, 4.0f));
    ASSERT_EQ(tmp.wwyw(), f32x4(5.0f, 5.0f, 3.0f, 5.0f));
    ASSERT_EQ(tmp.wwz0(), f32x4(5.0f, 5.0f, 4.0f, 0.0f));
    ASSERT_EQ(tmp.wwz1(), f32x4(5.0f, 5.0f, 4.0f, 1.0f));
    ASSERT_EQ(tmp.wwzx(), f32x4(5.0f, 5.0f, 4.0f, 2.0f));
    ASSERT_EQ(tmp.wwzy(), f32x4(5.0f, 5.0f, 4.0f, 3.0f));
    ASSERT_EQ(tmp.wwzz(), f32x4(5.0f, 5.0f, 4.0f, 4.0f));
    ASSERT_EQ(tmp.wwzw(), f32x4(5.0f, 5.0f, 4.0f, 5.0f));
    ASSERT_EQ(tmp.www0(), f32x4(5.0f, 5.0f, 5.0f, 0.0f));
    ASSERT_EQ(tmp.www1(), f32x4(5.0f, 5.0f, 5.0f, 1.0f));
    ASSERT_EQ(tmp.wwwx(), f32x4(5.0f, 5.0f, 5.0f, 2.0f));
    ASSERT_EQ(tmp.wwwy(), f32x4(5.0f, 5.0f, 5.0f, 3.0f));
    ASSERT_EQ(tmp.wwwz(), f32x4(5.0f, 5.0f, 5.0f, 4.0f));
    ASSERT_EQ(tmp.wwww(), f32x4(5.0f, 5.0f, 5.0f, 5.0f));
}