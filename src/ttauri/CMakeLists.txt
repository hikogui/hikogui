# Copyright Take Vos 2020-2021.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

add_subdirectory(text)
add_subdirectory(geometry)
add_subdirectory(accelerate)
add_subdirectory(color)
add_subdirectory(GUI)
add_subdirectory(widgets)
add_subdirectory(stencils)
add_subdirectory(audio)
add_subdirectory(codec)
add_subdirectory(formula)
add_subdirectory(skeleton)

configure_file(metadata.cpp.in metadata.cpp @ONLY)

target_sources(ttauri PRIVATE
    detail/observable_base.hpp
    detail/observable_not.hpp
    detail/observable_unary.hpp
    detail/observable_value.hpp
    algorithm.hpp
    application.cpp
    application.hpp
    $<${TT_MACOS}:${CMAKE_CURRENT_SOURCE_DIR}/application_macos.hpp>
    $<${TT_MACOS}:${CMAKE_CURRENT_SOURCE_DIR}/application_macos.mm>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/application_win32.cpp>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/application_win32.hpp>
    application_delegate.hpp
    assert.hpp
    atomic.hpp
    alignment.hpp
    bezier.hpp
    bezier_curve.cpp
    bezier_curve.hpp
    bezier_point.hpp
    bigint.hpp
    bits.hpp
    byte_string.hpp
    check.hpp
    concepts.hpp
    console.hpp
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/console_win32.cpp>
    coroutine.hpp
    command.hpp
    CommandLineParser.hpp
    counters.hpp
    CP1252.hpp
    #cpu_id.hpp
    #$<${TT_X64}:${CMAKE_CURRENT_SOURCE_DIR}/cpu_id_x64.cpp>
    crt.hpp
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/crt_win32.cpp>
    date.hpp
    datum.hpp
    dead_lock_detector.cpp
    dead_lock_detector.hpp
    debugger.hpp
    $<${TT_MACOS}:${CMAKE_CURRENT_SOURCE_DIR}/debugger_macos.mm>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/debugger_win32.cpp>
    decimal.hpp
    dialog.hpp
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/dialog_win32.cpp>
    endian.hpp
    exception.hpp
    file.hpp
    $<${TT_POSIX}:${CMAKE_CURRENT_SOURCE_DIR}/file_posix.cpp>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/file_win32.cpp>
    file_mapping.cpp
    file_mapping.hpp
    $<${TT_POSIX}:${CMAKE_CURRENT_SOURCE_DIR}/file_mapping_posix.cpp>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/file_mapping_win32.cpp>
    file_view.cpp
    file_view.hpp
    $<${TT_POSIX}:${CMAKE_CURRENT_SOURCE_DIR}/file_view_posix.cpp>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/file_view_win32.cpp>
    fixed.hpp
    float16.hpp
    flow_layout.hpp
    format.hpp
    forward_value.hpp
    gap_buffer.hpp
    glob.hpp
    hash.hpp
    #hires_system_clock.hpp
    #$<${TT_POSIX}:${CMAKE_CURRENT_SOURCE_DIR}/hires_system_clock_posix.cpp>
    #$<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/hires_system_clock_win32.cpp>
    hires_utc_clock.cpp
    hires_utc_clock.hpp
    $<${TT_POSIX}:${CMAKE_CURRENT_SOURCE_DIR}/hires_utc_clock_posix.cpp>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/hires_utc_clock_win32.cpp>
    huffman.hpp
    icon.cpp
    icon.hpp
    int_carry.hpp
    int_overflow.hpp
    interval.hpp
    l10n.hpp
    label.hpp
    locked_memory_allocator.hpp
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/locked_memory_allocator_win32.cpp>
    log_level.cpp
    log_level.hpp
    logger.cpp
    logger.hpp
    $<${TT_MACOS}:${CMAKE_CURRENT_SOURCE_DIR}/logger_macos.mm>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/logger_win32.cpp>
    math.hpp
    memory.hpp
    meta.hpp
    ${CMAKE_CURRENT_BINARY_DIR}/metadata.cpp
    metadata.hpp
    notifier.hpp
    cast.hpp
    observable.hpp
    operator.hpp
    architecture.hpp
    parse_location.hpp
    preferences.cpp
    preferences.hpp
    graphic_path.cpp
    graphic_path.hpp
    pixel_map.cpp
    pixel_map.hpp
    pixel_map.inl
    placement.hpp
    polymorphic_optional.hpp
    polynomial.hpp
    random_pcg.hpp
    range_map.hpp
    ranged_numeric.hpp
    ranges.hpp
    recursive_iterator.hpp
    required.hpp
    range_map.hpp
    ranged_numeric.hpp
    resource_view.hpp
    safe_int.hpp
    semantic_version.hpp
    source_location.hpp
    small_map.hpp
    small_vector.hpp
    stack.hpp
    static_resource_view.cpp
    static_resource_view.hpp
    statistics.cpp
    statistics.hpp
    strings.hpp
    subsystem.hpp
    tag.hpp
    tagged_id.hpp
    tagged_map.hpp
    $<${TT_MACOS}:${CMAKE_CURRENT_SOURCE_DIR}/thread_macos.cpp>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/thread_win32.cpp>
    thread.cpp
    thread.hpp
    timer.cpp
    timer.hpp
    time_stamp_count.cpp
    time_stamp_count.hpp
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/time_stamp_count_win32.cpp>
    tokenizer.cpp
    tokenizer.hpp
    trace.cpp
    trace.hpp
    type_traits.hpp
    unfair_mutex.hpp
    unfair_recursive_mutex.hpp
    URL.cpp
    URL.hpp
    $<${TT_MACOS}:${CMAKE_CURRENT_SOURCE_DIR}/URL_macos.mm>
    $<${TT_POSIX}:${CMAKE_CURRENT_SOURCE_DIR}/URL_posix.cpp>
    $<${TT_WIN32}:${CMAKE_CURRENT_SOURCE_DIR}/URL_win32.cpp>
    url_parser.cpp
    url_parser.hpp
    utils.hpp
    vspan.hpp
    wfree_message_queue.hpp
    wfree_unordered_map.hpp
)

if(TT_BUILD_PCH)
    if(NOT TT_ENABLE_ANALYSIS)
    target_precompile_headers(ttauri PRIVATE
        assert.hpp
        counters.hpp
        datum.hpp
        debugger.hpp
        exception.hpp
        logger.hpp
        architecture.hpp
        required.hpp
        strings.hpp
        trace.hpp
        URL.hpp
    )
    endif()
endif()

if(TT_BUILD_TESTS)
    target_sources(ttauri_tests PRIVATE
        algorithm_tests.cpp
        bezier_curve_tests.cpp
        bigint_tests.cpp
        coroutine_tests.cpp
        counters_tests.cpp
        datum_tests.cpp
        dead_lock_detector_tests.cpp
        decimal_tests.cpp
        exceptions_tests.cpp
        file_view_tests.cpp
        forward_value_tests.cpp
        gap_buffer_tests.cpp
        glob_tests.cpp
        int_carry_tests.cpp
        int_overflow_tests.cpp
        math_tests.cpp
        graphic_path_tests.cpp
        pixel_map_tests.cpp
        polymorphic_optional_tests.cpp
        polynomial_tests.cpp
        ranges_tests.cpp
        safe_int_tests.cpp
        small_map_tests.cpp
        strings_tests.cpp
        tokenizer_tests.cpp
        type_traits_tests.cpp
        url_parser_tests.cpp
        URL_tests.cpp
    )
endif()


if(TT_BUILD_TESTS AND TT_BUILD_PCH AND NOT TT_ENABLE_ANALYSIS)
    target_precompile_headers(ttauri_tests PRIVATE
        assert.hpp
        counters.hpp
        datum.hpp
        debugger.hpp
        exception.hpp
        logger.hpp
        architecture.hpp
        required.hpp
        strings.hpp
        trace.hpp
        URL.hpp
    )
endif()
