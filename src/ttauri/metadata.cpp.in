// Copyright Take Vos 2020.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

#include <ttauri/metadata.hpp>
#include <ttauri/unfair_mutex.hpp>
#include <ttauri/URL.hpp>
#include <ttauri/strings.hpp>
#include <atomic>

namespace tt::inline v1 {

static metadata library_metadata = metadata{
    "@TT_LIB_NAME@",
    "@TT_LIB_DISPLAY_NAME@",
    "@TT_LIB_VENDOR@",
    semantic_version{@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@},
    "@TT_LIB_LICENSE@",
    URL{"@TT_LIB_HOMEPAGE"},
    "@TT_LIB_DESCRIPTION@"
};

static metadata application_metadata = metadata{
    "unknown-application",
    "Unknown Application",
    "",
    semantic_version{0, 0, 0},
    "unknown-spdx",
    URL{},
    ""
};

static std::atomic<bool> application_metadata_is_set = false;
static unfair_mutex application_metadata_mutex;

[[nodiscard]] metadata const &metadata::library() noexcept
{
    return library_metadata;
}

[[nodiscard]] metadata &metadata::application() noexcept
{
    if (application_metadata_is_set.load(std::memory_order::acquire)) {
        return application_metadata;
    }

    ttlet lock = std::scoped_lock(application_metadata_mutex);
    if (application_metadata_is_set.load(std::memory_order::relaxed)) {
        return application_metadata;
    }

    // Determine the application name from the executable.
    auto executable_filename = URL::urlFromExecutableFile().filename();

    // Strip off the optional .exe
    if (executable_filename.ends_with(".exe")) {
        executable_filename.resize(executable_filename.size() - 4);
    }

    // Set the name and display_name based on the executable.
    application_metadata.name = make_slug(executable_filename);
    application_metadata.display_name = make_title(executable_filename);

    application_metadata_is_set.store(true, std::memory_order::release);
    return application_metadata;
}

} // namespace tt
