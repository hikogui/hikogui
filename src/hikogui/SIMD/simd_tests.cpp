// Copyright Take Vos 2020-2022.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

#include "simd_intf.hpp"
#include "../macros.hpp"
#include "../hikotest.hpp"

using namespace std;
using namespace hi;

TEST_SUITE(simd)
{

TEST_CASE(arithmatic)
{
    hilet tmp1 = f32x4{9.0f, 6.0f, 4.0f, 14.0f};
    hilet tmp2 = f32x4{3.0f, -2.0f, 8.0f, 7.0f};

    REQUIRE(tmp1 + tmp2 == f32x4(12.0f, 4.0f, 12.0f, 21.0f));
    REQUIRE(tmp1 - tmp2 == f32x4(6.0f, 8.0f, -4.0f, 7.0f));
    REQUIRE(tmp1 * tmp2 == f32x4(27.0f, -12.0f, 32.0f, 98.0f));
    REQUIRE(tmp1 / tmp2 == f32x4(3.0f, -3.0f, 0.5f, 2.0f));

    {
        auto tmp = tmp1;
        tmp += tmp2;
        REQUIRE(tmp == f32x4(12.0f, 4.0f, 12.0f, 21.0f));
    }

    {
        auto tmp = tmp1;
        tmp -= tmp2;
        REQUIRE(tmp == f32x4(6.0f, 8.0f, -4.0f, 7.0f));
    }

    {
        auto tmp = tmp1;
        tmp *= tmp2;
        REQUIRE(tmp == f32x4(27.0f, -12.0f, 32.0f, 98.0f));
    }

    {
        auto tmp = tmp1;
        tmp /= tmp2;
        REQUIRE(tmp == f32x4(3.0f, -3.0f, 0.5f, 2.0f));
    }
}

TEST_CASE(hypot)
{
    hilet tmp = f32x4(2.0f, 3.0f, 4.0f, 0.0f);

    REQUIRE_NEAR(0.001f, hypot<0b0111>(tmp).x() == 5.3851f);
}

TEST_CASE(dot_product, "dot product")
{
    hilet a = f32x4(1.0f, 3.0f, -5.0f, 0.0f);
    hilet b = f32x4(4.0f, -2.0f, -1.0f, 0.0f);

    REQUIRE(dot<0b0111>(a, b).x() == 3.0f);
}

TEST_CASE(getters)
{
    hilet tmp = f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    REQUIRE(tmp.x() == 2.0f);
    REQUIRE(tmp.y() == 3.0f);
    REQUIRE(tmp.z() == 4.0f);
    REQUIRE(tmp.w() == 5.0f);
    REQUIRE(tmp.r() == 2.0f);
    REQUIRE(tmp.g() == 3.0f);
    REQUIRE(tmp.b() == 4.0f);
    REQUIRE(tmp.a() == 5.0f);
    REQUIRE(tmp[0] == 2.0f);
    REQUIRE(tmp[1] == 3.0f);
    REQUIRE(tmp[2] == 4.0f);
    REQUIRE(tmp[3] == 5.0f);
}

TEST_CASE(normalize)
{
    auto tmp = f32x4{2.0f, 3.0f, 4.0f, 0.0f};
    auto r = normalize<0b0111>(tmp);
    REQUIRE(r[0], WithinAbs(0.3713906763541037, 0.001));
    REQUIRE(r[1], WithinAbs(0.5570860145311556, 0.001));
    REQUIRE(r[2], WithinAbs(0.7427813527082074, 0.001));
    REQUIRE(r[3] == 0.0);
}

TEST_CASE(setters)
{
    auto tmp = f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    tmp.x() = 12.0f;
    REQUIRE(tmp == f32x4(12.0f, 3.0f, 4.0f, 5.0f));
    tmp.y() = 13.0f;
    REQUIRE(tmp == f32x4(12.0f, 13.0f, 4.0f, 5.0f));
    tmp.z() = 14.0f;
    REQUIRE(tmp == f32x4(12.0f, 13.0f, 14.0f, 5.0f));
    tmp.w() = 15.0f;
    REQUIRE(tmp == f32x4(12.0f, 13.0f, 14.0f, 15.0f));
    tmp.r() = 22.0f;
    REQUIRE(tmp == f32x4(22.0f, 13.0f, 14.0f, 15.0f));
    tmp.g() = 23.0f;
    REQUIRE(tmp == f32x4(22.0f, 23.0f, 14.0f, 15.0f));
    tmp.b() = 24.0f;
    REQUIRE(tmp == f32x4(22.0f, 23.0f, 24.0f, 15.0f));
    tmp.a() = 25.0f;
    REQUIRE(tmp == f32x4(22.0f, 23.0f, 24.0f, 25.0f));
}

TEST_CASE(swizzle2)
{
    hilet tmp = f32x2{2.0f, 3.0f};

    REQUIRE(tmp.xx() == f32x2(2.0f, 2.0f));
    REQUIRE(tmp.xy() == f32x2(2.0f, 3.0f));
    REQUIRE(tmp.x0() == f32x2(2.0f, 0.0f));
    REQUIRE(tmp.x1() == f32x2(2.0f, 1.0f));

    REQUIRE(tmp.yx() == f32x2(3.0f, 2.0f));
    REQUIRE(tmp.yy() == f32x2(3.0f, 3.0f));
    REQUIRE(tmp.y0() == f32x2(3.0f, 0.0f));
    REQUIRE(tmp.y1() == f32x2(3.0f, 1.0f));

    REQUIRE(tmp._0x() == f32x2(0.0f, 2.0f));
    REQUIRE(tmp._0y() == f32x2(0.0f, 3.0f));
    REQUIRE(tmp._00() == f32x2(0.0f, 0.0f));
    REQUIRE(tmp._01() == f32x2(0.0f, 1.0f));

    REQUIRE(tmp._1x() == f32x2(1.0f, 2.0f));
    REQUIRE(tmp._1y() == f32x2(1.0f, 3.0f));
    REQUIRE(tmp._10() == f32x2(1.0f, 0.0f));
    REQUIRE(tmp._11() == f32x2(1.0f, 1.0f));
}

TEST_CASE(swizzle4)
{
    hilet tmp = f32x4{2.0f, 3.0f, 4.0f, 5.0f};

    // Returns a 4D vector.
    REQUIRE(tmp._0000() == f32x4(0.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0001() == f32x4(0.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._000x() == f32x4(0.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._000y() == f32x4(0.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._000z() == f32x4(0.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._000w() == f32x4(0.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0010() == f32x4(0.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0011() == f32x4(0.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._001x() == f32x4(0.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._001y() == f32x4(0.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._001z() == f32x4(0.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._001w() == f32x4(0.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._00x0() == f32x4(0.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._00x1() == f32x4(0.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._00xx() == f32x4(0.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._00xy() == f32x4(0.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._00xz() == f32x4(0.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._00xw() == f32x4(0.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._00y0() == f32x4(0.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._00y1() == f32x4(0.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._00yx() == f32x4(0.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._00yy() == f32x4(0.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._00yz() == f32x4(0.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._00yw() == f32x4(0.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._00z0() == f32x4(0.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._00z1() == f32x4(0.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._00zx() == f32x4(0.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._00zy() == f32x4(0.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._00zz() == f32x4(0.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._00zw() == f32x4(0.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._00w0() == f32x4(0.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._00w1() == f32x4(0.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._00wx() == f32x4(0.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._00wy() == f32x4(0.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._00wz() == f32x4(0.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._00ww() == f32x4(0.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0000() == f32x4(0.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0001() == f32x4(0.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._000x() == f32x4(0.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._000y() == f32x4(0.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._000z() == f32x4(0.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._000w() == f32x4(0.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0010() == f32x4(0.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0011() == f32x4(0.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._001x() == f32x4(0.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._001y() == f32x4(0.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._001z() == f32x4(0.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._001w() == f32x4(0.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._00x0() == f32x4(0.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._00x1() == f32x4(0.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._00xx() == f32x4(0.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._00xy() == f32x4(0.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._00xz() == f32x4(0.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._00xw() == f32x4(0.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._00y0() == f32x4(0.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._00y1() == f32x4(0.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._00yx() == f32x4(0.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._00yy() == f32x4(0.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._00yz() == f32x4(0.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._00yw() == f32x4(0.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._00z0() == f32x4(0.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._00z1() == f32x4(0.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._00zx() == f32x4(0.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._00zy() == f32x4(0.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._00zz() == f32x4(0.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._00zw() == f32x4(0.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._00w0() == f32x4(0.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._00w1() == f32x4(0.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._00wx() == f32x4(0.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._00wy() == f32x4(0.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._00wz() == f32x4(0.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._00ww() == f32x4(0.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0100() == f32x4(0.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0101() == f32x4(0.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp._010x() == f32x4(0.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp._010y() == f32x4(0.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp._010z() == f32x4(0.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp._010w() == f32x4(0.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0110() == f32x4(0.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0111() == f32x4(0.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp._011x() == f32x4(0.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp._011y() == f32x4(0.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp._011z() == f32x4(0.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp._011w() == f32x4(0.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp._01x0() == f32x4(0.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp._01x1() == f32x4(0.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp._01xx() == f32x4(0.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp._01xy() == f32x4(0.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp._01xz() == f32x4(0.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp._01xw() == f32x4(0.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp._01y0() == f32x4(0.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp._01y1() == f32x4(0.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp._01yx() == f32x4(0.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp._01yy() == f32x4(0.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp._01yz() == f32x4(0.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp._01yw() == f32x4(0.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp._01z0() == f32x4(0.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp._01z1() == f32x4(0.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp._01zx() == f32x4(0.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp._01zy() == f32x4(0.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp._01zz() == f32x4(0.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp._01zw() == f32x4(0.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp._01w0() == f32x4(0.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp._01w1() == f32x4(0.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp._01wx() == f32x4(0.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp._01wy() == f32x4(0.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp._01wz() == f32x4(0.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp._01ww() == f32x4(0.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0x00() == f32x4(0.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0x01() == f32x4(0.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0x0x() == f32x4(0.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0x0y() == f32x4(0.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0x0z() == f32x4(0.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0x0w() == f32x4(0.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0x10() == f32x4(0.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0x11() == f32x4(0.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0x1x() == f32x4(0.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0x1y() == f32x4(0.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0x1z() == f32x4(0.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0x1w() == f32x4(0.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0xx0() == f32x4(0.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0xx1() == f32x4(0.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0xxx() == f32x4(0.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0xxy() == f32x4(0.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0xxz() == f32x4(0.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0xxw() == f32x4(0.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0xy0() == f32x4(0.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0xy1() == f32x4(0.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0xyx() == f32x4(0.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0xyy() == f32x4(0.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0xyz() == f32x4(0.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0xyw() == f32x4(0.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0xz0() == f32x4(0.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0xz1() == f32x4(0.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0xzx() == f32x4(0.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0xzy() == f32x4(0.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0xzz() == f32x4(0.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0xzw() == f32x4(0.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0xw0() == f32x4(0.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0xw1() == f32x4(0.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0xwx() == f32x4(0.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0xwy() == f32x4(0.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0xwz() == f32x4(0.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0xww() == f32x4(0.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0y00() == f32x4(0.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0y01() == f32x4(0.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0y0x() == f32x4(0.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0y0y() == f32x4(0.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0y0z() == f32x4(0.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0y0w() == f32x4(0.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0y10() == f32x4(0.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0y11() == f32x4(0.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0y1x() == f32x4(0.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0y1y() == f32x4(0.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0y1z() == f32x4(0.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0y1w() == f32x4(0.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0yx0() == f32x4(0.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0yx1() == f32x4(0.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0yxx() == f32x4(0.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0yxy() == f32x4(0.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0yxz() == f32x4(0.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0yxw() == f32x4(0.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0yy0() == f32x4(0.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0yy1() == f32x4(0.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0yyx() == f32x4(0.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0yyy() == f32x4(0.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0yyz() == f32x4(0.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0yyw() == f32x4(0.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0yz0() == f32x4(0.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0yz1() == f32x4(0.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0yzx() == f32x4(0.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0yzy() == f32x4(0.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0yzz() == f32x4(0.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0yzw() == f32x4(0.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0yw0() == f32x4(0.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0yw1() == f32x4(0.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0ywx() == f32x4(0.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0ywy() == f32x4(0.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0ywz() == f32x4(0.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0yww() == f32x4(0.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0z00() == f32x4(0.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0z01() == f32x4(0.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0z0x() == f32x4(0.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0z0y() == f32x4(0.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0z0z() == f32x4(0.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0z0w() == f32x4(0.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0z10() == f32x4(0.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0z11() == f32x4(0.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0z1x() == f32x4(0.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0z1y() == f32x4(0.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0z1z() == f32x4(0.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0z1w() == f32x4(0.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0zx0() == f32x4(0.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0zx1() == f32x4(0.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0zxx() == f32x4(0.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0zxy() == f32x4(0.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0zxz() == f32x4(0.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0zxw() == f32x4(0.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0zy0() == f32x4(0.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0zy1() == f32x4(0.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0zyx() == f32x4(0.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0zyy() == f32x4(0.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0zyz() == f32x4(0.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0zyw() == f32x4(0.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0zz0() == f32x4(0.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0zz1() == f32x4(0.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0zzx() == f32x4(0.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0zzy() == f32x4(0.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0zzz() == f32x4(0.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0zzw() == f32x4(0.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0zw0() == f32x4(0.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0zw1() == f32x4(0.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0zwx() == f32x4(0.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0zwy() == f32x4(0.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0zwz() == f32x4(0.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0zww() == f32x4(0.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp._0w00() == f32x4(0.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp._0w01() == f32x4(0.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp._0w0x() == f32x4(0.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp._0w0y() == f32x4(0.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp._0w0z() == f32x4(0.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp._0w0w() == f32x4(0.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp._0w10() == f32x4(0.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp._0w11() == f32x4(0.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp._0w1x() == f32x4(0.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp._0w1y() == f32x4(0.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp._0w1z() == f32x4(0.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp._0w1w() == f32x4(0.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp._0wx0() == f32x4(0.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp._0wx1() == f32x4(0.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp._0wxx() == f32x4(0.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp._0wxy() == f32x4(0.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp._0wxz() == f32x4(0.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp._0wxw() == f32x4(0.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp._0wy0() == f32x4(0.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp._0wy1() == f32x4(0.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp._0wyx() == f32x4(0.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp._0wyy() == f32x4(0.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp._0wyz() == f32x4(0.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp._0wyw() == f32x4(0.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp._0wz0() == f32x4(0.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp._0wz1() == f32x4(0.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp._0wzx() == f32x4(0.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp._0wzy() == f32x4(0.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp._0wzz() == f32x4(0.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp._0wzw() == f32x4(0.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp._0ww0() == f32x4(0.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp._0ww1() == f32x4(0.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp._0wwx() == f32x4(0.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp._0wwy() == f32x4(0.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp._0wwz() == f32x4(0.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp._0www() == f32x4(0.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp._1000() == f32x4(1.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1001() == f32x4(1.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._100x() == f32x4(1.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._100y() == f32x4(1.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._100z() == f32x4(1.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._100w() == f32x4(1.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1010() == f32x4(1.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1011() == f32x4(1.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._101x() == f32x4(1.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._101y() == f32x4(1.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._101z() == f32x4(1.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._101w() == f32x4(1.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._10x0() == f32x4(1.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._10x1() == f32x4(1.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._10xx() == f32x4(1.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._10xy() == f32x4(1.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._10xz() == f32x4(1.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._10xw() == f32x4(1.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._10y0() == f32x4(1.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._10y1() == f32x4(1.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._10yx() == f32x4(1.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._10yy() == f32x4(1.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._10yz() == f32x4(1.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._10yw() == f32x4(1.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._10z0() == f32x4(1.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._10z1() == f32x4(1.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._10zx() == f32x4(1.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._10zy() == f32x4(1.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._10zz() == f32x4(1.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._10zw() == f32x4(1.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._10w0() == f32x4(1.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._10w1() == f32x4(1.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._10wx() == f32x4(1.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._10wy() == f32x4(1.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._10wz() == f32x4(1.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._10ww() == f32x4(1.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1000() == f32x4(1.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1001() == f32x4(1.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp._100x() == f32x4(1.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp._100y() == f32x4(1.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp._100z() == f32x4(1.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp._100w() == f32x4(1.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1010() == f32x4(1.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1011() == f32x4(1.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp._101x() == f32x4(1.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp._101y() == f32x4(1.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp._101z() == f32x4(1.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp._101w() == f32x4(1.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp._10x0() == f32x4(1.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp._10x1() == f32x4(1.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp._10xx() == f32x4(1.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp._10xy() == f32x4(1.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp._10xz() == f32x4(1.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp._10xw() == f32x4(1.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp._10y0() == f32x4(1.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp._10y1() == f32x4(1.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp._10yx() == f32x4(1.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp._10yy() == f32x4(1.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp._10yz() == f32x4(1.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp._10yw() == f32x4(1.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp._10z0() == f32x4(1.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp._10z1() == f32x4(1.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp._10zx() == f32x4(1.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp._10zy() == f32x4(1.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp._10zz() == f32x4(1.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp._10zw() == f32x4(1.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp._10w0() == f32x4(1.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp._10w1() == f32x4(1.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp._10wx() == f32x4(1.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp._10wy() == f32x4(1.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp._10wz() == f32x4(1.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp._10ww() == f32x4(1.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1100() == f32x4(1.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1101() == f32x4(1.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp._110x() == f32x4(1.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp._110y() == f32x4(1.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp._110z() == f32x4(1.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp._110w() == f32x4(1.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1110() == f32x4(1.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1111() == f32x4(1.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp._111x() == f32x4(1.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp._111y() == f32x4(1.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp._111z() == f32x4(1.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp._111w() == f32x4(1.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp._11x0() == f32x4(1.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp._11x1() == f32x4(1.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp._11xx() == f32x4(1.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp._11xy() == f32x4(1.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp._11xz() == f32x4(1.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp._11xw() == f32x4(1.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp._11y0() == f32x4(1.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp._11y1() == f32x4(1.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp._11yx() == f32x4(1.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp._11yy() == f32x4(1.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp._11yz() == f32x4(1.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp._11yw() == f32x4(1.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp._11z0() == f32x4(1.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp._11z1() == f32x4(1.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp._11zx() == f32x4(1.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp._11zy() == f32x4(1.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp._11zz() == f32x4(1.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp._11zw() == f32x4(1.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp._11w0() == f32x4(1.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp._11w1() == f32x4(1.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp._11wx() == f32x4(1.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp._11wy() == f32x4(1.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp._11wz() == f32x4(1.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp._11ww() == f32x4(1.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1x00() == f32x4(1.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1x01() == f32x4(1.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1x0x() == f32x4(1.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1x0y() == f32x4(1.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1x0z() == f32x4(1.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1x0w() == f32x4(1.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1x10() == f32x4(1.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1x11() == f32x4(1.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1x1x() == f32x4(1.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1x1y() == f32x4(1.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1x1z() == f32x4(1.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1x1w() == f32x4(1.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1xx0() == f32x4(1.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1xx1() == f32x4(1.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1xxx() == f32x4(1.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1xxy() == f32x4(1.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1xxz() == f32x4(1.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1xxw() == f32x4(1.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1xy0() == f32x4(1.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1xy1() == f32x4(1.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1xyx() == f32x4(1.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1xyy() == f32x4(1.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1xyz() == f32x4(1.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1xyw() == f32x4(1.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1xz0() == f32x4(1.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1xz1() == f32x4(1.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1xzx() == f32x4(1.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1xzy() == f32x4(1.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1xzz() == f32x4(1.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1xzw() == f32x4(1.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1xw0() == f32x4(1.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1xw1() == f32x4(1.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1xwx() == f32x4(1.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1xwy() == f32x4(1.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1xwz() == f32x4(1.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1xww() == f32x4(1.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1y00() == f32x4(1.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1y01() == f32x4(1.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1y0x() == f32x4(1.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1y0y() == f32x4(1.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1y0z() == f32x4(1.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1y0w() == f32x4(1.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1y10() == f32x4(1.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1y11() == f32x4(1.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1y1x() == f32x4(1.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1y1y() == f32x4(1.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1y1z() == f32x4(1.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1y1w() == f32x4(1.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1yx0() == f32x4(1.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1yx1() == f32x4(1.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1yxx() == f32x4(1.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1yxy() == f32x4(1.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1yxz() == f32x4(1.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1yxw() == f32x4(1.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1yy0() == f32x4(1.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1yy1() == f32x4(1.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1yyx() == f32x4(1.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1yyy() == f32x4(1.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1yyz() == f32x4(1.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1yyw() == f32x4(1.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1yz0() == f32x4(1.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1yz1() == f32x4(1.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1yzx() == f32x4(1.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1yzy() == f32x4(1.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1yzz() == f32x4(1.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1yzw() == f32x4(1.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1yw0() == f32x4(1.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1yw1() == f32x4(1.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1ywx() == f32x4(1.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1ywy() == f32x4(1.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1ywz() == f32x4(1.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1yww() == f32x4(1.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1z00() == f32x4(1.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1z01() == f32x4(1.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1z0x() == f32x4(1.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1z0y() == f32x4(1.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1z0z() == f32x4(1.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1z0w() == f32x4(1.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1z10() == f32x4(1.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1z11() == f32x4(1.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1z1x() == f32x4(1.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1z1y() == f32x4(1.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1z1z() == f32x4(1.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1z1w() == f32x4(1.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1zx0() == f32x4(1.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1zx1() == f32x4(1.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1zxx() == f32x4(1.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1zxy() == f32x4(1.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1zxz() == f32x4(1.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1zxw() == f32x4(1.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1zy0() == f32x4(1.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1zy1() == f32x4(1.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1zyx() == f32x4(1.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1zyy() == f32x4(1.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1zyz() == f32x4(1.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1zyw() == f32x4(1.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1zz0() == f32x4(1.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1zz1() == f32x4(1.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1zzx() == f32x4(1.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1zzy() == f32x4(1.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1zzz() == f32x4(1.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1zzw() == f32x4(1.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1zw0() == f32x4(1.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1zw1() == f32x4(1.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1zwx() == f32x4(1.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1zwy() == f32x4(1.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1zwz() == f32x4(1.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1zww() == f32x4(1.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp._1w00() == f32x4(1.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp._1w01() == f32x4(1.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp._1w0x() == f32x4(1.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp._1w0y() == f32x4(1.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp._1w0z() == f32x4(1.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp._1w0w() == f32x4(1.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp._1w10() == f32x4(1.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp._1w11() == f32x4(1.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp._1w1x() == f32x4(1.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp._1w1y() == f32x4(1.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp._1w1z() == f32x4(1.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp._1w1w() == f32x4(1.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp._1wx0() == f32x4(1.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp._1wx1() == f32x4(1.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp._1wxx() == f32x4(1.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp._1wxy() == f32x4(1.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp._1wxz() == f32x4(1.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp._1wxw() == f32x4(1.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp._1wy0() == f32x4(1.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp._1wy1() == f32x4(1.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp._1wyx() == f32x4(1.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp._1wyy() == f32x4(1.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp._1wyz() == f32x4(1.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp._1wyw() == f32x4(1.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp._1wz0() == f32x4(1.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp._1wz1() == f32x4(1.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp._1wzx() == f32x4(1.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp._1wzy() == f32x4(1.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp._1wzz() == f32x4(1.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp._1wzw() == f32x4(1.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp._1ww0() == f32x4(1.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp._1ww1() == f32x4(1.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp._1wwx() == f32x4(1.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp._1wwy() == f32x4(1.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp._1wwz() == f32x4(1.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp._1www() == f32x4(1.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.x000() == f32x4(2.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.x001() == f32x4(2.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.x00x() == f32x4(2.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.x00y() == f32x4(2.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.x00z() == f32x4(2.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.x00w() == f32x4(2.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.x010() == f32x4(2.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.x011() == f32x4(2.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.x01x() == f32x4(2.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.x01y() == f32x4(2.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.x01z() == f32x4(2.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.x01w() == f32x4(2.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.x0x0() == f32x4(2.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.x0x1() == f32x4(2.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.x0xx() == f32x4(2.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.x0xy() == f32x4(2.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.x0xz() == f32x4(2.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.x0xw() == f32x4(2.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.x0y0() == f32x4(2.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.x0y1() == f32x4(2.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.x0yx() == f32x4(2.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.x0yy() == f32x4(2.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.x0yz() == f32x4(2.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.x0yw() == f32x4(2.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.x0z0() == f32x4(2.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.x0z1() == f32x4(2.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.x0zx() == f32x4(2.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.x0zy() == f32x4(2.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.x0zz() == f32x4(2.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.x0zw() == f32x4(2.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.x0w0() == f32x4(2.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.x0w1() == f32x4(2.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.x0wx() == f32x4(2.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.x0wy() == f32x4(2.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.x0wz() == f32x4(2.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.x0ww() == f32x4(2.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.x000() == f32x4(2.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.x001() == f32x4(2.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.x00x() == f32x4(2.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.x00y() == f32x4(2.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.x00z() == f32x4(2.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.x00w() == f32x4(2.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.x010() == f32x4(2.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.x011() == f32x4(2.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.x01x() == f32x4(2.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.x01y() == f32x4(2.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.x01z() == f32x4(2.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.x01w() == f32x4(2.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.x0x0() == f32x4(2.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.x0x1() == f32x4(2.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.x0xx() == f32x4(2.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.x0xy() == f32x4(2.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.x0xz() == f32x4(2.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.x0xw() == f32x4(2.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.x0y0() == f32x4(2.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.x0y1() == f32x4(2.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.x0yx() == f32x4(2.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.x0yy() == f32x4(2.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.x0yz() == f32x4(2.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.x0yw() == f32x4(2.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.x0z0() == f32x4(2.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.x0z1() == f32x4(2.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.x0zx() == f32x4(2.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.x0zy() == f32x4(2.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.x0zz() == f32x4(2.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.x0zw() == f32x4(2.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.x0w0() == f32x4(2.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.x0w1() == f32x4(2.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.x0wx() == f32x4(2.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.x0wy() == f32x4(2.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.x0wz() == f32x4(2.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.x0ww() == f32x4(2.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.x100() == f32x4(2.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.x101() == f32x4(2.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.x10x() == f32x4(2.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.x10y() == f32x4(2.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.x10z() == f32x4(2.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.x10w() == f32x4(2.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.x110() == f32x4(2.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.x111() == f32x4(2.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.x11x() == f32x4(2.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.x11y() == f32x4(2.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.x11z() == f32x4(2.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.x11w() == f32x4(2.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.x1x0() == f32x4(2.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.x1x1() == f32x4(2.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.x1xx() == f32x4(2.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.x1xy() == f32x4(2.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.x1xz() == f32x4(2.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.x1xw() == f32x4(2.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.x1y0() == f32x4(2.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.x1y1() == f32x4(2.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.x1yx() == f32x4(2.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.x1yy() == f32x4(2.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.x1yz() == f32x4(2.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.x1yw() == f32x4(2.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.x1z0() == f32x4(2.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.x1z1() == f32x4(2.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.x1zx() == f32x4(2.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.x1zy() == f32x4(2.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.x1zz() == f32x4(2.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.x1zw() == f32x4(2.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.x1w0() == f32x4(2.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.x1w1() == f32x4(2.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.x1wx() == f32x4(2.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.x1wy() == f32x4(2.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.x1wz() == f32x4(2.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.x1ww() == f32x4(2.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xx00() == f32x4(2.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xx01() == f32x4(2.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xx0x() == f32x4(2.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xx0y() == f32x4(2.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xx0z() == f32x4(2.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xx0w() == f32x4(2.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xx10() == f32x4(2.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xx11() == f32x4(2.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xx1x() == f32x4(2.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xx1y() == f32x4(2.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xx1z() == f32x4(2.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xx1w() == f32x4(2.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xxx0() == f32x4(2.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xxx1() == f32x4(2.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xxxx() == f32x4(2.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xxxy() == f32x4(2.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xxxz() == f32x4(2.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xxxw() == f32x4(2.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xxy0() == f32x4(2.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xxy1() == f32x4(2.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xxyx() == f32x4(2.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xxyy() == f32x4(2.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xxyz() == f32x4(2.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xxyw() == f32x4(2.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xxz0() == f32x4(2.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xxz1() == f32x4(2.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xxzx() == f32x4(2.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xxzy() == f32x4(2.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xxzz() == f32x4(2.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xxzw() == f32x4(2.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xxw0() == f32x4(2.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xxw1() == f32x4(2.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xxwx() == f32x4(2.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xxwy() == f32x4(2.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xxwz() == f32x4(2.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xxww() == f32x4(2.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xy00() == f32x4(2.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xy01() == f32x4(2.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xy0x() == f32x4(2.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xy0y() == f32x4(2.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xy0z() == f32x4(2.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xy0w() == f32x4(2.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xy10() == f32x4(2.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xy11() == f32x4(2.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xy1x() == f32x4(2.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xy1y() == f32x4(2.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xy1z() == f32x4(2.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xy1w() == f32x4(2.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xyx0() == f32x4(2.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xyx1() == f32x4(2.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xyxx() == f32x4(2.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xyxy() == f32x4(2.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xyxz() == f32x4(2.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xyxw() == f32x4(2.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xyy0() == f32x4(2.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xyy1() == f32x4(2.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xyyx() == f32x4(2.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xyyy() == f32x4(2.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xyyz() == f32x4(2.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xyyw() == f32x4(2.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xyz0() == f32x4(2.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xyz1() == f32x4(2.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xyzx() == f32x4(2.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xyzy() == f32x4(2.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xyzz() == f32x4(2.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xyzw() == f32x4(2.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xyw0() == f32x4(2.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xyw1() == f32x4(2.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xywx() == f32x4(2.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xywy() == f32x4(2.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xywz() == f32x4(2.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xyww() == f32x4(2.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xz00() == f32x4(2.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xz01() == f32x4(2.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xz0x() == f32x4(2.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xz0y() == f32x4(2.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xz0z() == f32x4(2.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xz0w() == f32x4(2.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xz10() == f32x4(2.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xz11() == f32x4(2.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xz1x() == f32x4(2.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xz1y() == f32x4(2.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xz1z() == f32x4(2.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xz1w() == f32x4(2.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xzx0() == f32x4(2.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xzx1() == f32x4(2.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xzxx() == f32x4(2.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xzxy() == f32x4(2.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xzxz() == f32x4(2.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xzxw() == f32x4(2.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xzy0() == f32x4(2.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xzy1() == f32x4(2.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xzyx() == f32x4(2.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xzyy() == f32x4(2.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xzyz() == f32x4(2.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xzyw() == f32x4(2.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xzz0() == f32x4(2.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xzz1() == f32x4(2.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xzzx() == f32x4(2.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xzzy() == f32x4(2.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xzzz() == f32x4(2.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xzzw() == f32x4(2.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xzw0() == f32x4(2.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xzw1() == f32x4(2.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xzwx() == f32x4(2.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xzwy() == f32x4(2.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xzwz() == f32x4(2.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xzww() == f32x4(2.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.xw00() == f32x4(2.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.xw01() == f32x4(2.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.xw0x() == f32x4(2.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.xw0y() == f32x4(2.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.xw0z() == f32x4(2.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.xw0w() == f32x4(2.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.xw10() == f32x4(2.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.xw11() == f32x4(2.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.xw1x() == f32x4(2.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.xw1y() == f32x4(2.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.xw1z() == f32x4(2.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.xw1w() == f32x4(2.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.xwx0() == f32x4(2.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.xwx1() == f32x4(2.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.xwxx() == f32x4(2.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.xwxy() == f32x4(2.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.xwxz() == f32x4(2.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.xwxw() == f32x4(2.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.xwy0() == f32x4(2.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.xwy1() == f32x4(2.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.xwyx() == f32x4(2.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.xwyy() == f32x4(2.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.xwyz() == f32x4(2.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.xwyw() == f32x4(2.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.xwz0() == f32x4(2.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.xwz1() == f32x4(2.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.xwzx() == f32x4(2.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.xwzy() == f32x4(2.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.xwzz() == f32x4(2.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.xwzw() == f32x4(2.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.xww0() == f32x4(2.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.xww1() == f32x4(2.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.xwwx() == f32x4(2.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.xwwy() == f32x4(2.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.xwwz() == f32x4(2.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.xwww() == f32x4(2.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.y000() == f32x4(3.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.y001() == f32x4(3.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.y00x() == f32x4(3.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.y00y() == f32x4(3.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.y00z() == f32x4(3.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.y00w() == f32x4(3.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.y010() == f32x4(3.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.y011() == f32x4(3.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.y01x() == f32x4(3.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.y01y() == f32x4(3.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.y01z() == f32x4(3.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.y01w() == f32x4(3.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.y0x0() == f32x4(3.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.y0x1() == f32x4(3.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.y0xx() == f32x4(3.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.y0xy() == f32x4(3.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.y0xz() == f32x4(3.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.y0xw() == f32x4(3.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.y0y0() == f32x4(3.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.y0y1() == f32x4(3.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.y0yx() == f32x4(3.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.y0yy() == f32x4(3.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.y0yz() == f32x4(3.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.y0yw() == f32x4(3.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.y0z0() == f32x4(3.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.y0z1() == f32x4(3.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.y0zx() == f32x4(3.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.y0zy() == f32x4(3.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.y0zz() == f32x4(3.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.y0zw() == f32x4(3.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.y0w0() == f32x4(3.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.y0w1() == f32x4(3.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.y0wx() == f32x4(3.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.y0wy() == f32x4(3.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.y0wz() == f32x4(3.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.y0ww() == f32x4(3.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.y000() == f32x4(3.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.y001() == f32x4(3.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.y00x() == f32x4(3.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.y00y() == f32x4(3.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.y00z() == f32x4(3.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.y00w() == f32x4(3.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.y010() == f32x4(3.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.y011() == f32x4(3.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.y01x() == f32x4(3.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.y01y() == f32x4(3.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.y01z() == f32x4(3.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.y01w() == f32x4(3.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.y0x0() == f32x4(3.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.y0x1() == f32x4(3.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.y0xx() == f32x4(3.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.y0xy() == f32x4(3.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.y0xz() == f32x4(3.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.y0xw() == f32x4(3.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.y0y0() == f32x4(3.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.y0y1() == f32x4(3.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.y0yx() == f32x4(3.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.y0yy() == f32x4(3.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.y0yz() == f32x4(3.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.y0yw() == f32x4(3.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.y0z0() == f32x4(3.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.y0z1() == f32x4(3.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.y0zx() == f32x4(3.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.y0zy() == f32x4(3.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.y0zz() == f32x4(3.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.y0zw() == f32x4(3.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.y0w0() == f32x4(3.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.y0w1() == f32x4(3.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.y0wx() == f32x4(3.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.y0wy() == f32x4(3.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.y0wz() == f32x4(3.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.y0ww() == f32x4(3.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.y100() == f32x4(3.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.y101() == f32x4(3.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.y10x() == f32x4(3.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.y10y() == f32x4(3.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.y10z() == f32x4(3.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.y10w() == f32x4(3.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.y110() == f32x4(3.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.y111() == f32x4(3.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.y11x() == f32x4(3.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.y11y() == f32x4(3.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.y11z() == f32x4(3.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.y11w() == f32x4(3.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.y1x0() == f32x4(3.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.y1x1() == f32x4(3.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.y1xx() == f32x4(3.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.y1xy() == f32x4(3.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.y1xz() == f32x4(3.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.y1xw() == f32x4(3.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.y1y0() == f32x4(3.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.y1y1() == f32x4(3.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.y1yx() == f32x4(3.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.y1yy() == f32x4(3.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.y1yz() == f32x4(3.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.y1yw() == f32x4(3.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.y1z0() == f32x4(3.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.y1z1() == f32x4(3.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.y1zx() == f32x4(3.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.y1zy() == f32x4(3.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.y1zz() == f32x4(3.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.y1zw() == f32x4(3.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.y1w0() == f32x4(3.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.y1w1() == f32x4(3.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.y1wx() == f32x4(3.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.y1wy() == f32x4(3.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.y1wz() == f32x4(3.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.y1ww() == f32x4(3.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yx00() == f32x4(3.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yx01() == f32x4(3.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yx0x() == f32x4(3.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yx0y() == f32x4(3.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yx0z() == f32x4(3.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yx0w() == f32x4(3.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yx10() == f32x4(3.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yx11() == f32x4(3.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yx1x() == f32x4(3.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yx1y() == f32x4(3.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yx1z() == f32x4(3.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yx1w() == f32x4(3.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.yxx0() == f32x4(3.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.yxx1() == f32x4(3.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.yxxx() == f32x4(3.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.yxxy() == f32x4(3.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.yxxz() == f32x4(3.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.yxxw() == f32x4(3.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.yxy0() == f32x4(3.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.yxy1() == f32x4(3.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.yxyx() == f32x4(3.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.yxyy() == f32x4(3.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.yxyz() == f32x4(3.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.yxyw() == f32x4(3.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.yxz0() == f32x4(3.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.yxz1() == f32x4(3.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.yxzx() == f32x4(3.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.yxzy() == f32x4(3.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.yxzz() == f32x4(3.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.yxzw() == f32x4(3.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yxw0() == f32x4(3.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yxw1() == f32x4(3.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.yxwx() == f32x4(3.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.yxwy() == f32x4(3.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.yxwz() == f32x4(3.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.yxww() == f32x4(3.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yy00() == f32x4(3.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yy01() == f32x4(3.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yy0x() == f32x4(3.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yy0y() == f32x4(3.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yy0z() == f32x4(3.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yy0w() == f32x4(3.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yy10() == f32x4(3.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yy11() == f32x4(3.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yy1x() == f32x4(3.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yy1y() == f32x4(3.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yy1z() == f32x4(3.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yy1w() == f32x4(3.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.yyx0() == f32x4(3.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.yyx1() == f32x4(3.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.yyxx() == f32x4(3.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.yyxy() == f32x4(3.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.yyxz() == f32x4(3.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.yyxw() == f32x4(3.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.yyy0() == f32x4(3.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.yyy1() == f32x4(3.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.yyyx() == f32x4(3.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.yyyy() == f32x4(3.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.yyyz() == f32x4(3.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.yyyw() == f32x4(3.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.yyz0() == f32x4(3.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.yyz1() == f32x4(3.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.yyzx() == f32x4(3.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.yyzy() == f32x4(3.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.yyzz() == f32x4(3.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.yyzw() == f32x4(3.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yyw0() == f32x4(3.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yyw1() == f32x4(3.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.yywx() == f32x4(3.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.yywy() == f32x4(3.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.yywz() == f32x4(3.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.yyww() == f32x4(3.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yz00() == f32x4(3.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yz01() == f32x4(3.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yz0x() == f32x4(3.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yz0y() == f32x4(3.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yz0z() == f32x4(3.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yz0w() == f32x4(3.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yz10() == f32x4(3.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yz11() == f32x4(3.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yz1x() == f32x4(3.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yz1y() == f32x4(3.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yz1z() == f32x4(3.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yz1w() == f32x4(3.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.yzx0() == f32x4(3.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.yzx1() == f32x4(3.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.yzxx() == f32x4(3.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.yzxy() == f32x4(3.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.yzxz() == f32x4(3.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.yzxw() == f32x4(3.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.yzy0() == f32x4(3.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.yzy1() == f32x4(3.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.yzyx() == f32x4(3.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.yzyy() == f32x4(3.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.yzyz() == f32x4(3.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.yzyw() == f32x4(3.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.yzz0() == f32x4(3.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.yzz1() == f32x4(3.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.yzzx() == f32x4(3.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.yzzy() == f32x4(3.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.yzzz() == f32x4(3.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.yzzw() == f32x4(3.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yzw0() == f32x4(3.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yzw1() == f32x4(3.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.yzwx() == f32x4(3.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.yzwy() == f32x4(3.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.yzwz() == f32x4(3.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.yzww() == f32x4(3.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.yw00() == f32x4(3.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.yw01() == f32x4(3.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.yw0x() == f32x4(3.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.yw0y() == f32x4(3.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.yw0z() == f32x4(3.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.yw0w() == f32x4(3.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.yw10() == f32x4(3.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.yw11() == f32x4(3.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.yw1x() == f32x4(3.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.yw1y() == f32x4(3.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.yw1z() == f32x4(3.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.yw1w() == f32x4(3.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.ywx0() == f32x4(3.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.ywx1() == f32x4(3.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.ywxx() == f32x4(3.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.ywxy() == f32x4(3.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.ywxz() == f32x4(3.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.ywxw() == f32x4(3.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.ywy0() == f32x4(3.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.ywy1() == f32x4(3.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.ywyx() == f32x4(3.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.ywyy() == f32x4(3.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.ywyz() == f32x4(3.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.ywyw() == f32x4(3.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.ywz0() == f32x4(3.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.ywz1() == f32x4(3.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.ywzx() == f32x4(3.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.ywzy() == f32x4(3.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.ywzz() == f32x4(3.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.ywzw() == f32x4(3.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.yww0() == f32x4(3.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.yww1() == f32x4(3.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.ywwx() == f32x4(3.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.ywwy() == f32x4(3.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.ywwz() == f32x4(3.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.ywww() == f32x4(3.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.z000() == f32x4(4.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.z001() == f32x4(4.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.z00x() == f32x4(4.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.z00y() == f32x4(4.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.z00z() == f32x4(4.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.z00w() == f32x4(4.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.z010() == f32x4(4.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.z011() == f32x4(4.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.z01x() == f32x4(4.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.z01y() == f32x4(4.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.z01z() == f32x4(4.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.z01w() == f32x4(4.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.z0x0() == f32x4(4.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.z0x1() == f32x4(4.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.z0xx() == f32x4(4.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.z0xy() == f32x4(4.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.z0xz() == f32x4(4.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.z0xw() == f32x4(4.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.z0y0() == f32x4(4.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.z0y1() == f32x4(4.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.z0yx() == f32x4(4.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.z0yy() == f32x4(4.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.z0yz() == f32x4(4.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.z0yw() == f32x4(4.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.z0z0() == f32x4(4.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.z0z1() == f32x4(4.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.z0zx() == f32x4(4.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.z0zy() == f32x4(4.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.z0zz() == f32x4(4.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.z0zw() == f32x4(4.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.z0w0() == f32x4(4.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.z0w1() == f32x4(4.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.z0wx() == f32x4(4.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.z0wy() == f32x4(4.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.z0wz() == f32x4(4.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.z0ww() == f32x4(4.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.z000() == f32x4(4.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.z001() == f32x4(4.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.z00x() == f32x4(4.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.z00y() == f32x4(4.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.z00z() == f32x4(4.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.z00w() == f32x4(4.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.z010() == f32x4(4.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.z011() == f32x4(4.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.z01x() == f32x4(4.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.z01y() == f32x4(4.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.z01z() == f32x4(4.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.z01w() == f32x4(4.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.z0x0() == f32x4(4.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.z0x1() == f32x4(4.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.z0xx() == f32x4(4.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.z0xy() == f32x4(4.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.z0xz() == f32x4(4.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.z0xw() == f32x4(4.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.z0y0() == f32x4(4.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.z0y1() == f32x4(4.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.z0yx() == f32x4(4.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.z0yy() == f32x4(4.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.z0yz() == f32x4(4.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.z0yw() == f32x4(4.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.z0z0() == f32x4(4.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.z0z1() == f32x4(4.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.z0zx() == f32x4(4.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.z0zy() == f32x4(4.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.z0zz() == f32x4(4.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.z0zw() == f32x4(4.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.z0w0() == f32x4(4.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.z0w1() == f32x4(4.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.z0wx() == f32x4(4.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.z0wy() == f32x4(4.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.z0wz() == f32x4(4.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.z0ww() == f32x4(4.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.z100() == f32x4(4.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.z101() == f32x4(4.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.z10x() == f32x4(4.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.z10y() == f32x4(4.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.z10z() == f32x4(4.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.z10w() == f32x4(4.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.z110() == f32x4(4.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.z111() == f32x4(4.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.z11x() == f32x4(4.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.z11y() == f32x4(4.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.z11z() == f32x4(4.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.z11w() == f32x4(4.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.z1x0() == f32x4(4.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.z1x1() == f32x4(4.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.z1xx() == f32x4(4.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.z1xy() == f32x4(4.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.z1xz() == f32x4(4.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.z1xw() == f32x4(4.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.z1y0() == f32x4(4.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.z1y1() == f32x4(4.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.z1yx() == f32x4(4.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.z1yy() == f32x4(4.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.z1yz() == f32x4(4.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.z1yw() == f32x4(4.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.z1z0() == f32x4(4.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.z1z1() == f32x4(4.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.z1zx() == f32x4(4.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.z1zy() == f32x4(4.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.z1zz() == f32x4(4.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.z1zw() == f32x4(4.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.z1w0() == f32x4(4.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.z1w1() == f32x4(4.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.z1wx() == f32x4(4.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.z1wy() == f32x4(4.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.z1wz() == f32x4(4.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.z1ww() == f32x4(4.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zx00() == f32x4(4.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zx01() == f32x4(4.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zx0x() == f32x4(4.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zx0y() == f32x4(4.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zx0z() == f32x4(4.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zx0w() == f32x4(4.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zx10() == f32x4(4.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zx11() == f32x4(4.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zx1x() == f32x4(4.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zx1y() == f32x4(4.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zx1z() == f32x4(4.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zx1w() == f32x4(4.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zxx0() == f32x4(4.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zxx1() == f32x4(4.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zxxx() == f32x4(4.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zxxy() == f32x4(4.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zxxz() == f32x4(4.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zxxw() == f32x4(4.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zxy0() == f32x4(4.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zxy1() == f32x4(4.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zxyx() == f32x4(4.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zxyy() == f32x4(4.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zxyz() == f32x4(4.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zxyw() == f32x4(4.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zxz0() == f32x4(4.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zxz1() == f32x4(4.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zxzx() == f32x4(4.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zxzy() == f32x4(4.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zxzz() == f32x4(4.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zxzw() == f32x4(4.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zxw0() == f32x4(4.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zxw1() == f32x4(4.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zxwx() == f32x4(4.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zxwy() == f32x4(4.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zxwz() == f32x4(4.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zxww() == f32x4(4.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zy00() == f32x4(4.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zy01() == f32x4(4.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zy0x() == f32x4(4.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zy0y() == f32x4(4.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zy0z() == f32x4(4.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zy0w() == f32x4(4.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zy10() == f32x4(4.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zy11() == f32x4(4.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zy1x() == f32x4(4.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zy1y() == f32x4(4.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zy1z() == f32x4(4.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zy1w() == f32x4(4.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zyx0() == f32x4(4.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zyx1() == f32x4(4.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zyxx() == f32x4(4.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zyxy() == f32x4(4.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zyxz() == f32x4(4.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zyxw() == f32x4(4.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zyy0() == f32x4(4.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zyy1() == f32x4(4.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zyyx() == f32x4(4.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zyyy() == f32x4(4.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zyyz() == f32x4(4.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zyyw() == f32x4(4.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zyz0() == f32x4(4.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zyz1() == f32x4(4.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zyzx() == f32x4(4.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zyzy() == f32x4(4.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zyzz() == f32x4(4.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zyzw() == f32x4(4.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zyw0() == f32x4(4.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zyw1() == f32x4(4.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zywx() == f32x4(4.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zywy() == f32x4(4.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zywz() == f32x4(4.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zyww() == f32x4(4.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zz00() == f32x4(4.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zz01() == f32x4(4.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zz0x() == f32x4(4.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zz0y() == f32x4(4.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zz0z() == f32x4(4.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zz0w() == f32x4(4.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zz10() == f32x4(4.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zz11() == f32x4(4.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zz1x() == f32x4(4.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zz1y() == f32x4(4.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zz1z() == f32x4(4.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zz1w() == f32x4(4.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zzx0() == f32x4(4.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zzx1() == f32x4(4.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zzxx() == f32x4(4.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zzxy() == f32x4(4.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zzxz() == f32x4(4.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zzxw() == f32x4(4.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zzy0() == f32x4(4.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zzy1() == f32x4(4.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zzyx() == f32x4(4.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zzyy() == f32x4(4.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zzyz() == f32x4(4.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zzyw() == f32x4(4.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zzz0() == f32x4(4.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zzz1() == f32x4(4.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zzzx() == f32x4(4.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zzzy() == f32x4(4.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zzzz() == f32x4(4.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zzzw() == f32x4(4.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zzw0() == f32x4(4.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zzw1() == f32x4(4.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zzwx() == f32x4(4.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zzwy() == f32x4(4.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zzwz() == f32x4(4.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zzww() == f32x4(4.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.zw00() == f32x4(4.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.zw01() == f32x4(4.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.zw0x() == f32x4(4.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.zw0y() == f32x4(4.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.zw0z() == f32x4(4.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.zw0w() == f32x4(4.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.zw10() == f32x4(4.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.zw11() == f32x4(4.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.zw1x() == f32x4(4.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.zw1y() == f32x4(4.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.zw1z() == f32x4(4.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.zw1w() == f32x4(4.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.zwx0() == f32x4(4.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.zwx1() == f32x4(4.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.zwxx() == f32x4(4.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.zwxy() == f32x4(4.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.zwxz() == f32x4(4.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.zwxw() == f32x4(4.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.zwy0() == f32x4(4.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.zwy1() == f32x4(4.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.zwyx() == f32x4(4.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.zwyy() == f32x4(4.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.zwyz() == f32x4(4.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.zwyw() == f32x4(4.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.zwz0() == f32x4(4.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.zwz1() == f32x4(4.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.zwzx() == f32x4(4.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.zwzy() == f32x4(4.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.zwzz() == f32x4(4.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.zwzw() == f32x4(4.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.zww0() == f32x4(4.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.zww1() == f32x4(4.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.zwwx() == f32x4(4.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.zwwy() == f32x4(4.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.zwwz() == f32x4(4.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.zwww() == f32x4(4.0f, 5.0f, 5.0f, 5.0f));

    REQUIRE(tmp.w000() == f32x4(5.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.w001() == f32x4(5.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.w00x() == f32x4(5.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.w00y() == f32x4(5.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.w00z() == f32x4(5.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.w00w() == f32x4(5.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.w010() == f32x4(5.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.w011() == f32x4(5.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.w01x() == f32x4(5.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.w01y() == f32x4(5.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.w01z() == f32x4(5.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.w01w() == f32x4(5.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.w0x0() == f32x4(5.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.w0x1() == f32x4(5.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.w0xx() == f32x4(5.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.w0xy() == f32x4(5.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.w0xz() == f32x4(5.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.w0xw() == f32x4(5.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.w0y0() == f32x4(5.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.w0y1() == f32x4(5.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.w0yx() == f32x4(5.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.w0yy() == f32x4(5.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.w0yz() == f32x4(5.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.w0yw() == f32x4(5.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.w0z0() == f32x4(5.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.w0z1() == f32x4(5.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.w0zx() == f32x4(5.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.w0zy() == f32x4(5.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.w0zz() == f32x4(5.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.w0zw() == f32x4(5.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.w0w0() == f32x4(5.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.w0w1() == f32x4(5.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.w0wx() == f32x4(5.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.w0wy() == f32x4(5.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.w0wz() == f32x4(5.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.w0ww() == f32x4(5.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.w000() == f32x4(5.0f, 0.0f, 0.0f, 0.0f));
    REQUIRE(tmp.w001() == f32x4(5.0f, 0.0f, 0.0f, 1.0f));
    REQUIRE(tmp.w00x() == f32x4(5.0f, 0.0f, 0.0f, 2.0f));
    REQUIRE(tmp.w00y() == f32x4(5.0f, 0.0f, 0.0f, 3.0f));
    REQUIRE(tmp.w00z() == f32x4(5.0f, 0.0f, 0.0f, 4.0f));
    REQUIRE(tmp.w00w() == f32x4(5.0f, 0.0f, 0.0f, 5.0f));
    REQUIRE(tmp.w010() == f32x4(5.0f, 0.0f, 1.0f, 0.0f));
    REQUIRE(tmp.w011() == f32x4(5.0f, 0.0f, 1.0f, 1.0f));
    REQUIRE(tmp.w01x() == f32x4(5.0f, 0.0f, 1.0f, 2.0f));
    REQUIRE(tmp.w01y() == f32x4(5.0f, 0.0f, 1.0f, 3.0f));
    REQUIRE(tmp.w01z() == f32x4(5.0f, 0.0f, 1.0f, 4.0f));
    REQUIRE(tmp.w01w() == f32x4(5.0f, 0.0f, 1.0f, 5.0f));
    REQUIRE(tmp.w0x0() == f32x4(5.0f, 0.0f, 2.0f, 0.0f));
    REQUIRE(tmp.w0x1() == f32x4(5.0f, 0.0f, 2.0f, 1.0f));
    REQUIRE(tmp.w0xx() == f32x4(5.0f, 0.0f, 2.0f, 2.0f));
    REQUIRE(tmp.w0xy() == f32x4(5.0f, 0.0f, 2.0f, 3.0f));
    REQUIRE(tmp.w0xz() == f32x4(5.0f, 0.0f, 2.0f, 4.0f));
    REQUIRE(tmp.w0xw() == f32x4(5.0f, 0.0f, 2.0f, 5.0f));
    REQUIRE(tmp.w0y0() == f32x4(5.0f, 0.0f, 3.0f, 0.0f));
    REQUIRE(tmp.w0y1() == f32x4(5.0f, 0.0f, 3.0f, 1.0f));
    REQUIRE(tmp.w0yx() == f32x4(5.0f, 0.0f, 3.0f, 2.0f));
    REQUIRE(tmp.w0yy() == f32x4(5.0f, 0.0f, 3.0f, 3.0f));
    REQUIRE(tmp.w0yz() == f32x4(5.0f, 0.0f, 3.0f, 4.0f));
    REQUIRE(tmp.w0yw() == f32x4(5.0f, 0.0f, 3.0f, 5.0f));
    REQUIRE(tmp.w0z0() == f32x4(5.0f, 0.0f, 4.0f, 0.0f));
    REQUIRE(tmp.w0z1() == f32x4(5.0f, 0.0f, 4.0f, 1.0f));
    REQUIRE(tmp.w0zx() == f32x4(5.0f, 0.0f, 4.0f, 2.0f));
    REQUIRE(tmp.w0zy() == f32x4(5.0f, 0.0f, 4.0f, 3.0f));
    REQUIRE(tmp.w0zz() == f32x4(5.0f, 0.0f, 4.0f, 4.0f));
    REQUIRE(tmp.w0zw() == f32x4(5.0f, 0.0f, 4.0f, 5.0f));
    REQUIRE(tmp.w0w0() == f32x4(5.0f, 0.0f, 5.0f, 0.0f));
    REQUIRE(tmp.w0w1() == f32x4(5.0f, 0.0f, 5.0f, 1.0f));
    REQUIRE(tmp.w0wx() == f32x4(5.0f, 0.0f, 5.0f, 2.0f));
    REQUIRE(tmp.w0wy() == f32x4(5.0f, 0.0f, 5.0f, 3.0f));
    REQUIRE(tmp.w0wz() == f32x4(5.0f, 0.0f, 5.0f, 4.0f));
    REQUIRE(tmp.w0ww() == f32x4(5.0f, 0.0f, 5.0f, 5.0f));
    REQUIRE(tmp.w100() == f32x4(5.0f, 1.0f, 0.0f, 0.0f));
    REQUIRE(tmp.w101() == f32x4(5.0f, 1.0f, 0.0f, 1.0f));
    REQUIRE(tmp.w10x() == f32x4(5.0f, 1.0f, 0.0f, 2.0f));
    REQUIRE(tmp.w10y() == f32x4(5.0f, 1.0f, 0.0f, 3.0f));
    REQUIRE(tmp.w10z() == f32x4(5.0f, 1.0f, 0.0f, 4.0f));
    REQUIRE(tmp.w10w() == f32x4(5.0f, 1.0f, 0.0f, 5.0f));
    REQUIRE(tmp.w110() == f32x4(5.0f, 1.0f, 1.0f, 0.0f));
    REQUIRE(tmp.w111() == f32x4(5.0f, 1.0f, 1.0f, 1.0f));
    REQUIRE(tmp.w11x() == f32x4(5.0f, 1.0f, 1.0f, 2.0f));
    REQUIRE(tmp.w11y() == f32x4(5.0f, 1.0f, 1.0f, 3.0f));
    REQUIRE(tmp.w11z() == f32x4(5.0f, 1.0f, 1.0f, 4.0f));
    REQUIRE(tmp.w11w() == f32x4(5.0f, 1.0f, 1.0f, 5.0f));
    REQUIRE(tmp.w1x0() == f32x4(5.0f, 1.0f, 2.0f, 0.0f));
    REQUIRE(tmp.w1x1() == f32x4(5.0f, 1.0f, 2.0f, 1.0f));
    REQUIRE(tmp.w1xx() == f32x4(5.0f, 1.0f, 2.0f, 2.0f));
    REQUIRE(tmp.w1xy() == f32x4(5.0f, 1.0f, 2.0f, 3.0f));
    REQUIRE(tmp.w1xz() == f32x4(5.0f, 1.0f, 2.0f, 4.0f));
    REQUIRE(tmp.w1xw() == f32x4(5.0f, 1.0f, 2.0f, 5.0f));
    REQUIRE(tmp.w1y0() == f32x4(5.0f, 1.0f, 3.0f, 0.0f));
    REQUIRE(tmp.w1y1() == f32x4(5.0f, 1.0f, 3.0f, 1.0f));
    REQUIRE(tmp.w1yx() == f32x4(5.0f, 1.0f, 3.0f, 2.0f));
    REQUIRE(tmp.w1yy() == f32x4(5.0f, 1.0f, 3.0f, 3.0f));
    REQUIRE(tmp.w1yz() == f32x4(5.0f, 1.0f, 3.0f, 4.0f));
    REQUIRE(tmp.w1yw() == f32x4(5.0f, 1.0f, 3.0f, 5.0f));
    REQUIRE(tmp.w1z0() == f32x4(5.0f, 1.0f, 4.0f, 0.0f));
    REQUIRE(tmp.w1z1() == f32x4(5.0f, 1.0f, 4.0f, 1.0f));
    REQUIRE(tmp.w1zx() == f32x4(5.0f, 1.0f, 4.0f, 2.0f));
    REQUIRE(tmp.w1zy() == f32x4(5.0f, 1.0f, 4.0f, 3.0f));
    REQUIRE(tmp.w1zz() == f32x4(5.0f, 1.0f, 4.0f, 4.0f));
    REQUIRE(tmp.w1zw() == f32x4(5.0f, 1.0f, 4.0f, 5.0f));
    REQUIRE(tmp.w1w0() == f32x4(5.0f, 1.0f, 5.0f, 0.0f));
    REQUIRE(tmp.w1w1() == f32x4(5.0f, 1.0f, 5.0f, 1.0f));
    REQUIRE(tmp.w1wx() == f32x4(5.0f, 1.0f, 5.0f, 2.0f));
    REQUIRE(tmp.w1wy() == f32x4(5.0f, 1.0f, 5.0f, 3.0f));
    REQUIRE(tmp.w1wz() == f32x4(5.0f, 1.0f, 5.0f, 4.0f));
    REQUIRE(tmp.w1ww() == f32x4(5.0f, 1.0f, 5.0f, 5.0f));
    REQUIRE(tmp.wx00() == f32x4(5.0f, 2.0f, 0.0f, 0.0f));
    REQUIRE(tmp.wx01() == f32x4(5.0f, 2.0f, 0.0f, 1.0f));
    REQUIRE(tmp.wx0x() == f32x4(5.0f, 2.0f, 0.0f, 2.0f));
    REQUIRE(tmp.wx0y() == f32x4(5.0f, 2.0f, 0.0f, 3.0f));
    REQUIRE(tmp.wx0z() == f32x4(5.0f, 2.0f, 0.0f, 4.0f));
    REQUIRE(tmp.wx0w() == f32x4(5.0f, 2.0f, 0.0f, 5.0f));
    REQUIRE(tmp.wx10() == f32x4(5.0f, 2.0f, 1.0f, 0.0f));
    REQUIRE(tmp.wx11() == f32x4(5.0f, 2.0f, 1.0f, 1.0f));
    REQUIRE(tmp.wx1x() == f32x4(5.0f, 2.0f, 1.0f, 2.0f));
    REQUIRE(tmp.wx1y() == f32x4(5.0f, 2.0f, 1.0f, 3.0f));
    REQUIRE(tmp.wx1z() == f32x4(5.0f, 2.0f, 1.0f, 4.0f));
    REQUIRE(tmp.wx1w() == f32x4(5.0f, 2.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wxx0() == f32x4(5.0f, 2.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wxx1() == f32x4(5.0f, 2.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wxxx() == f32x4(5.0f, 2.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wxxy() == f32x4(5.0f, 2.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wxxz() == f32x4(5.0f, 2.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wxxw() == f32x4(5.0f, 2.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wxy0() == f32x4(5.0f, 2.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wxy1() == f32x4(5.0f, 2.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wxyx() == f32x4(5.0f, 2.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wxyy() == f32x4(5.0f, 2.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wxyz() == f32x4(5.0f, 2.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wxyw() == f32x4(5.0f, 2.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wxz0() == f32x4(5.0f, 2.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wxz1() == f32x4(5.0f, 2.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wxzx() == f32x4(5.0f, 2.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wxzy() == f32x4(5.0f, 2.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wxzz() == f32x4(5.0f, 2.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wxzw() == f32x4(5.0f, 2.0f, 4.0f, 5.0f));
    REQUIRE(tmp.wxw0() == f32x4(5.0f, 2.0f, 5.0f, 0.0f));
    REQUIRE(tmp.wxw1() == f32x4(5.0f, 2.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wxwx() == f32x4(5.0f, 2.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wxwy() == f32x4(5.0f, 2.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wxwz() == f32x4(5.0f, 2.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wxww() == f32x4(5.0f, 2.0f, 5.0f, 5.0f));
    REQUIRE(tmp.wy00() == f32x4(5.0f, 3.0f, 0.0f, 0.0f));
    REQUIRE(tmp.wy01() == f32x4(5.0f, 3.0f, 0.0f, 1.0f));
    REQUIRE(tmp.wy0x() == f32x4(5.0f, 3.0f, 0.0f, 2.0f));
    REQUIRE(tmp.wy0y() == f32x4(5.0f, 3.0f, 0.0f, 3.0f));
    REQUIRE(tmp.wy0z() == f32x4(5.0f, 3.0f, 0.0f, 4.0f));
    REQUIRE(tmp.wy0w() == f32x4(5.0f, 3.0f, 0.0f, 5.0f));
    REQUIRE(tmp.wy10() == f32x4(5.0f, 3.0f, 1.0f, 0.0f));
    REQUIRE(tmp.wy11() == f32x4(5.0f, 3.0f, 1.0f, 1.0f));
    REQUIRE(tmp.wy1x() == f32x4(5.0f, 3.0f, 1.0f, 2.0f));
    REQUIRE(tmp.wy1y() == f32x4(5.0f, 3.0f, 1.0f, 3.0f));
    REQUIRE(tmp.wy1z() == f32x4(5.0f, 3.0f, 1.0f, 4.0f));
    REQUIRE(tmp.wy1w() == f32x4(5.0f, 3.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wyx0() == f32x4(5.0f, 3.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wyx1() == f32x4(5.0f, 3.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wyxx() == f32x4(5.0f, 3.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wyxy() == f32x4(5.0f, 3.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wyxz() == f32x4(5.0f, 3.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wyxw() == f32x4(5.0f, 3.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wyy0() == f32x4(5.0f, 3.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wyy1() == f32x4(5.0f, 3.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wyyx() == f32x4(5.0f, 3.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wyyy() == f32x4(5.0f, 3.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wyyz() == f32x4(5.0f, 3.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wyyw() == f32x4(5.0f, 3.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wyz0() == f32x4(5.0f, 3.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wyz1() == f32x4(5.0f, 3.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wyzx() == f32x4(5.0f, 3.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wyzy() == f32x4(5.0f, 3.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wyzz() == f32x4(5.0f, 3.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wyzw() == f32x4(5.0f, 3.0f, 4.0f, 5.0f));
    REQUIRE(tmp.wyw0() == f32x4(5.0f, 3.0f, 5.0f, 0.0f));
    REQUIRE(tmp.wyw1() == f32x4(5.0f, 3.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wywx() == f32x4(5.0f, 3.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wywy() == f32x4(5.0f, 3.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wywz() == f32x4(5.0f, 3.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wyww() == f32x4(5.0f, 3.0f, 5.0f, 5.0f));
    REQUIRE(tmp.wz00() == f32x4(5.0f, 4.0f, 0.0f, 0.0f));
    REQUIRE(tmp.wz01() == f32x4(5.0f, 4.0f, 0.0f, 1.0f));
    REQUIRE(tmp.wz0x() == f32x4(5.0f, 4.0f, 0.0f, 2.0f));
    REQUIRE(tmp.wz0y() == f32x4(5.0f, 4.0f, 0.0f, 3.0f));
    REQUIRE(tmp.wz0z() == f32x4(5.0f, 4.0f, 0.0f, 4.0f));
    REQUIRE(tmp.wz0w() == f32x4(5.0f, 4.0f, 0.0f, 5.0f));
    REQUIRE(tmp.wz10() == f32x4(5.0f, 4.0f, 1.0f, 0.0f));
    REQUIRE(tmp.wz11() == f32x4(5.0f, 4.0f, 1.0f, 1.0f));
    REQUIRE(tmp.wz1x() == f32x4(5.0f, 4.0f, 1.0f, 2.0f));
    REQUIRE(tmp.wz1y() == f32x4(5.0f, 4.0f, 1.0f, 3.0f));
    REQUIRE(tmp.wz1z() == f32x4(5.0f, 4.0f, 1.0f, 4.0f));
    REQUIRE(tmp.wz1w() == f32x4(5.0f, 4.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wzx0() == f32x4(5.0f, 4.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wzx1() == f32x4(5.0f, 4.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wzxx() == f32x4(5.0f, 4.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wzxy() == f32x4(5.0f, 4.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wzxz() == f32x4(5.0f, 4.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wzxw() == f32x4(5.0f, 4.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wzy0() == f32x4(5.0f, 4.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wzy1() == f32x4(5.0f, 4.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wzyx() == f32x4(5.0f, 4.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wzyy() == f32x4(5.0f, 4.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wzyz() == f32x4(5.0f, 4.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wzyw() == f32x4(5.0f, 4.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wzz0() == f32x4(5.0f, 4.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wzz1() == f32x4(5.0f, 4.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wzzx() == f32x4(5.0f, 4.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wzzy() == f32x4(5.0f, 4.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wzzz() == f32x4(5.0f, 4.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wzzw() == f32x4(5.0f, 4.0f, 4.0f, 5.0f));
    REQUIRE(tmp.wzw0() == f32x4(5.0f, 4.0f, 5.0f, 0.0f));
    REQUIRE(tmp.wzw1() == f32x4(5.0f, 4.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wzwx() == f32x4(5.0f, 4.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wzwy() == f32x4(5.0f, 4.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wzwz() == f32x4(5.0f, 4.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wzww() == f32x4(5.0f, 4.0f, 5.0f, 5.0f));
    REQUIRE(tmp.ww00() == f32x4(5.0f, 5.0f, 0.0f, 0.0f));
    REQUIRE(tmp.ww01() == f32x4(5.0f, 5.0f, 0.0f, 1.0f));
    REQUIRE(tmp.ww0x() == f32x4(5.0f, 5.0f, 0.0f, 2.0f));
    REQUIRE(tmp.ww0y() == f32x4(5.0f, 5.0f, 0.0f, 3.0f));
    REQUIRE(tmp.ww0z() == f32x4(5.0f, 5.0f, 0.0f, 4.0f));
    REQUIRE(tmp.ww0w() == f32x4(5.0f, 5.0f, 0.0f, 5.0f));
    REQUIRE(tmp.ww10() == f32x4(5.0f, 5.0f, 1.0f, 0.0f));
    REQUIRE(tmp.ww11() == f32x4(5.0f, 5.0f, 1.0f, 1.0f));
    REQUIRE(tmp.ww1x() == f32x4(5.0f, 5.0f, 1.0f, 2.0f));
    REQUIRE(tmp.ww1y() == f32x4(5.0f, 5.0f, 1.0f, 3.0f));
    REQUIRE(tmp.ww1z() == f32x4(5.0f, 5.0f, 1.0f, 4.0f));
    REQUIRE(tmp.ww1w() == f32x4(5.0f, 5.0f, 1.0f, 5.0f));
    REQUIRE(tmp.wwx0() == f32x4(5.0f, 5.0f, 2.0f, 0.0f));
    REQUIRE(tmp.wwx1() == f32x4(5.0f, 5.0f, 2.0f, 1.0f));
    REQUIRE(tmp.wwxx() == f32x4(5.0f, 5.0f, 2.0f, 2.0f));
    REQUIRE(tmp.wwxy() == f32x4(5.0f, 5.0f, 2.0f, 3.0f));
    REQUIRE(tmp.wwxz() == f32x4(5.0f, 5.0f, 2.0f, 4.0f));
    REQUIRE(tmp.wwxw() == f32x4(5.0f, 5.0f, 2.0f, 5.0f));
    REQUIRE(tmp.wwy0() == f32x4(5.0f, 5.0f, 3.0f, 0.0f));
    REQUIRE(tmp.wwy1() == f32x4(5.0f, 5.0f, 3.0f, 1.0f));
    REQUIRE(tmp.wwyx() == f32x4(5.0f, 5.0f, 3.0f, 2.0f));
    REQUIRE(tmp.wwyy() == f32x4(5.0f, 5.0f, 3.0f, 3.0f));
    REQUIRE(tmp.wwyz() == f32x4(5.0f, 5.0f, 3.0f, 4.0f));
    REQUIRE(tmp.wwyw() == f32x4(5.0f, 5.0f, 3.0f, 5.0f));
    REQUIRE(tmp.wwz0() == f32x4(5.0f, 5.0f, 4.0f, 0.0f));
    REQUIRE(tmp.wwz1() == f32x4(5.0f, 5.0f, 4.0f, 1.0f));
    REQUIRE(tmp.wwzx() == f32x4(5.0f, 5.0f, 4.0f, 2.0f));
    REQUIRE(tmp.wwzy() == f32x4(5.0f, 5.0f, 4.0f, 3.0f));
    REQUIRE(tmp.wwzz() == f32x4(5.0f, 5.0f, 4.0f, 4.0f));
    REQUIRE(tmp.wwzw() == f32x4(5.0f, 5.0f, 4.0f, 5.0f));
    REQUIRE(tmp.www0() == f32x4(5.0f, 5.0f, 5.0f, 0.0f));
    REQUIRE(tmp.www1() == f32x4(5.0f, 5.0f, 5.0f, 1.0f));
    REQUIRE(tmp.wwwx() == f32x4(5.0f, 5.0f, 5.0f, 2.0f));
    REQUIRE(tmp.wwwy() == f32x4(5.0f, 5.0f, 5.0f, 3.0f));
    REQUIRE(tmp.wwwz() == f32x4(5.0f, 5.0f, 5.0f, 4.0f));
    REQUIRE(tmp.wwww() == f32x4(5.0f, 5.0f, 5.0f, 5.0f));
}

}
