// Copyright Take Vos 2020-2023.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

#pragma once

#include "semantic_version.hpp"
#include "../utility/utility.hpp"
#include "../macros.hpp"
#include <atomic>
#include <filesystem>
#include <optional>

hi_export_module(hikogui.metadata.library_metadata);

hi_export namespace hi { inline namespace v1 {

[[nodiscard]] constexpr std::string get_library_name() noexcept
{
    return "@HI_LIB_DISPLAY_NAME@";
}

[[nodiscard]] constexpr std::string get_library_slug() noexcept
{
    return "@HI_LIB_NAME@";
}

[[nodiscard]] constexpr std::string get_library_vendor_name() noexcept
{
    return "@HI_LIB_VENDOR@";
}

[[nodiscard]] constexpr semantic_version get_library_version() noexcept
{
    return semantic_version{@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@};
}

[[nodiscard]] constexpr std::string get_library_license() noexcept
{
    return "@HI_LIB_LICENSE@";
}

[[nodiscard]] constexpr std::string get_library_url() noexcept
{
    return "@HI_LIB_HOMEPAGE@";
}

[[nodiscard]] constexpr std::string get_library_description() noexcept
{
    return "@HI_LIB_DESC@";
}

/** The full path where HikoGUI source code is located.
 * 
 * @return The directory where the source code was located during
 *         CMake configuration.
 * @retval std::nullopt The library source directory is not available.
 */
[[nodiscard]] inline std::optional<std::filesystem::path> library_source_dir() noexcept
{
    std::error_code ec;

    auto r = std::filesystem::canonical(std::filesystem::path{"@LIBRARY_SOURCE_DIR@"}, &ec);
    if (ec) {
        return std::nullopt;
    }

    return r;
}

/** The full path where HikoGUI build directory is located.
 * 
 * @return The directory where the source code was located during
 *         CMake configuration.
 * @retval std::nullopt The library source directory is not available.
 */
[[nodiscard]] inline std::optional<std::filesystem::path> library_build_dir() noexcept
{
    std::error_code ec;

    auto r = std::filesystem::canonical(std::filesystem::path{"@LIBRARY_BUILD_DIR@"}, &ec);
    if (ec) {
        return std::nullopt;
    }

    return r;
}

}} // namespace hi::v1
