// Copyright Take Vos 2020-2023.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

#pragma once

#include "semantic_version.hpp"
#include "../utility/utility.hpp"
#include "../macros.hpp"
#include <atomic>
#include <filesystem>

hi_export_module(hikogui.metadata.metadata_library);

hi_export namespace hi { inline namespace v1 {

[[nodiscard]] constexpr std::string get_library_name() noexcept
{
    return "@HI_LIB_DISPLAY_NAME@";
}

[[nodiscard]] constexpr std::string get_library_slug() noexcept
{
    return "@HI_LIB_NAME@";
}

[[nodiscard]] constexpr std::string get_library_vendor_name() noexcept
{
    return "@HI_LIB_VENDOR@";
}

[[nodiscard]] constexpr semantic_version get_library_version() noexcept
{
    return semantic_version{@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@};
}

[[nodiscard]] constexpr std::string get_library_license() noexcept
{
    return "@HI_LIB_LICENSE@";
}

[[nodiscard]] constexpr std::string get_library_url() noexcept
{
    return "@HI_LIB_HOMEPAGE@";
}

[[nodiscard]] constexpr std::string get_library_description() noexcept
{
    return "@HI_LIB_DESC@";
}

/** The path where HikoGUI source code is located at the time of CMake configuration.
 */
[[nodiscard]] inline std::filesystem::path get_library_source_path() noexcept
{
    return std::filesystem::canonical(std::filesystem::path{"@CMAKE_CURRENT_SOURCE_DIR@"});
}

/** The path where HikoGUI build is located at the time of CMake configuration.
 */
[[nodiscard]] inline std::filesystem::path get_library_build_path() noexcept
{
    return std::filesystem::canonical(std::filesystem::path{"@CMAKE_CURRENT_BINARY_DIR@"});
}

/** The path where HikoGUI is currently installed.
 * 
 * If HikoGUI is not currently installed it will be the same as the build directory.
 */
[[nodiscard]] inline std::filesystem::path get_library_install_path() noexcept
{
    // path is:
    //  - /install_dir/include/hikogui/path/path_location_impl.hpp
    //  - /build_dir/src/hikogui/path/path_location_impl.hpp
    // becomes:
    //  - /install_dir/
    //  - /build_dir/
    auto path = std::filesystem::path{__FILE__};
    path.replace_filename("../../..");
    return std::filesystem::canonical(path);
}

/** Check if the HikoGUI library is installed.
 * 
 * @retval true The HikoGUI library is installed.
 * @retval false The HikoGUI library is being build.
 */
[[nodiscard]] inline bool is_library_installed() noexcept
{
    // If the install directory based on `__FILE__` is the same as the build directory
    // then HikoGUI is located in the build directory.
    return get_library_install_path() != get_library_build_path();
}



}} // namespace hi::v1
