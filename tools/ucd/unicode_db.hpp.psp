// This file was generated by generate_unicode_data.py

namespace hi::inline v1 {

#ifdef __INTELLISENSE__
constexpr udb_chunk_indices = std::array<uint16_t, 1>{
#else
constexpr udb_chunk_indices = std::array<uint16_t, $len(indices)$>{\
$for i, index in enumerate(indices):
    $if i == len(indices) - 1:

#endif
    $index$
    $elif i % 16 == 0:
    
    $index$,\
    $else:
 $index$,\
    $end
$end
};

#ifdef __INTELLISENSE__
constexpr udb_compositions = std::array<uint64_t, 1>{
#else
constexpr udb_compositions = std::array<uint64_t, $len(compositions)$>{\
$for i, value in enumerate(compositions):
    $if i == len(compositions) - 1:

#endif
    $"0x{:016x}ULL".format(value)$
    $elif i % 4 == 0:
    
    $"0x{:016x}ULL".format(value)$,\
    $else:
 $"0x{:016x}ULL".format(value)$,\
    $end
$end
};

#ifdef __INTELLISENSE__
constexpr udb_decompositions = std::array<uint64_t, 1>{
#else
constexpr udb_decompositions = std::array<uint64_t, $len(decompositions)$>{\
$for i, value in enumerate(decompositions):
    $if i == len(decompositions) - 1:

#endif
    $"0x{:016x}ULL".format(value)$
    $elif i % 4 == 0:
    
    $"0x{:016x}ULL".format(value)$,\
    $else:
 $"0x{:016x}ULL".format(value)$,\
    $end
$end
};

}
