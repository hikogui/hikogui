// This file was generated by generate_unicode_data.py

#pragma once

#include "../utility/utility.hpp"
#include <cstdint>
#include <optional>
#include <bit>
#include <string_view>
#include <string>

hi_export_module(hikogui.unicode.ucd_bidi_mirroring_glyphs);

hi_export namespace hi {
inline namespace v1 {
namespace detail {

constexpr auto ucd_bidi_mirroring_glyphs_chunk_size = $chunk_size$_uz;
constexpr auto ucd_bidi_mirroring_glyphs_index_width = $index_width$_uz;
constexpr auto ucd_bidi_mirroring_glyphs_indices_size = $indices_size$_uz;
constexpr auto ucd_bidi_mirroring_glyph_width = $bidi_mirroring_glyph_width$_uz;

static_assert(std::has_single_bit(ucd_bidi_mirroring_glyphs_chunk_size));

constexpr uint8_t ucd_bidi_mirroring_glyphs_indices_bytes[$len(indices_bytes)$] = {\
$for i, x in enumerate(indices_bytes):
    $if i % 32 == 0:

   \
    $end
$"{:3},".format(x)$
$end

};

constexpr uint8_t ucd_bidi_mirroring_glyphs_bytes[$len(bidi_mirroring_glyphs_bytes)$] = {\
$for i, x in enumerate(bidi_mirroring_glyphs_bytes):
    $if i % 32 == 0:

   \
    $end
$"{:3},".format(x)$
$end

};

} // namespace detail

/** Get the bidi-mirroring-glyph for a code-point.
 *
 * @param code_point The code-point to query
 * @return The mirroring glyph, or U+0000 when the mirroring glyph was not found.
 */
[[nodiscard]] constexpr char32_t ucd_get_bidi_mirroring_glyph(char32_t code_point) noexcept
{
    constexpr auto max_code_point_hi = detail::ucd_bidi_mirroring_glyphs_indices_size - 1;

    auto code_point_hi = code_point / detail::ucd_bidi_mirroring_glyphs_chunk_size;
    auto const code_point_lo = code_point % detail::ucd_bidi_mirroring_glyphs_chunk_size;

    if (code_point_hi > max_code_point_hi) {
        code_point_hi = max_code_point_hi;
    }

    auto const chunk_index = load_bits_be<detail::ucd_bidi_mirroring_glyphs_index_width>(
        detail::ucd_bidi_mirroring_glyphs_indices_bytes,
        code_point_hi * detail::ucd_bidi_mirroring_glyphs_index_width);

    // Add back in the lower-bits of the code-point.
    auto const index = (chunk_index * detail::ucd_bidi_mirroring_glyphs_chunk_size) + code_point_lo;

    // Get the canonical combining class from the table.
    auto const value = load_bits_be<detail::ucd_bidi_mirroring_glyph_width>(
        detail::ucd_bidi_mirroring_glyphs_bytes, index * detail::ucd_bidi_mirroring_glyph_width);

    return char_cast<char32_t>(value);
}

}} // namespace hi::v1

