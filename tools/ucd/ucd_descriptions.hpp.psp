// This file was generated by generate_unicode_data.py

#pragma once

#include "unicode_general_category.hpp"
#include "unicode_bidi_bracket_type.hpp"
#include "unicode_bidi_class.hpp"
#include "unicode_grapheme_cluster_break.hpp"
#include "unicode_line_break.hpp"
#include "unicode_word_break.hpp"
#include "unicode_sentence_break.hpp"
#include "unicode_east_asian_width.hpp"
#include "unicode_script.hpp"
#include "unicode_decomposition_type.hpp"
#include "unicode_description.hpp"
#include <array>
#include <cstdint>


namespace hi::inline v1 {

#define XD unicode_description
#define XGC unicode_general_category
#define XGB unicode_grapheme_cluster_break
#define XLB unicode_line_break_class
#define XWB unicode_word_break_property
#define XSB unicode_sentence_break_property
#define XEA unicode_east_asian_width
#define XSC unicode_script
#define XBC unicode_bidi_class
#define XBB unicode_bidi_bracket_type
#define XDT unicode_decomposition_type

$chunk_size = chunks[0].size

#ifdef __INTELLISENSE__
constexpr auto ucd_descriptions = std::array{
$for chunk_index, chunk in enumerate(chunks):
    // $chunk.comment(chunk_index)$
    $for description in chunk.descriptions:
    $description.instantiation()$,
    $end
    $break
$end
};
#else
constexpr auto ucd_descriptions = std::array{\
$for chunk_index, chunk in enumerate(chunks):
    // $chunk.comment(chunk_index)$
    $for description in chunk.descriptions:
    $description.instantiation()$,
    $end
$end
};
#endif

#undef XD
#undef XGC
#undef XGB
#undef XLB
#undef XWB
#undef XSB
#undef XEA
#undef XSC
#undef XBC
#undef XBB
#undef XDT

}
