import ucd
import argparse
import sys

def parse_options():
    parser = argparse.ArgumentParser(description='Build c++ source files from Unicode ucd text files.')

    parser.add_argument("--bidi-brackets", dest="bidi_brackets_path", action="store", required=True)
    parser.add_argument("--bidi-classes-output", dest="bidi_classes_output_path", action="store", required=True)
    parser.add_argument("--bidi-classes-template", dest="bidi_classes_template_path", action="store", required=True)
    parser.add_argument("--bidi-mirroring", dest="bidi_mirroring_path", action="store", required=True)
    parser.add_argument("--bidi-mirroring-glyphs-output", dest="bidi_mirroring_glyphs_output_path", action="store", required=True)
    parser.add_argument("--bidi-mirroring-glyphs-template", dest="bidi_mirroring_glyphs_template_path", action="store", required=True)
    parser.add_argument("--bidi-paired-bracket-types-output", dest="bidi_paired_bracket_types_output_path", action="store", required=True)
    parser.add_argument("--bidi-paired-bracket-types-template", dest="bidi_paired_bracket_types_template_path", action="store", required=True)
    parser.add_argument("--canonical-combining-classes-output", dest="canonical_combining_classes_output_path", action="store", required=True)
    parser.add_argument("--canonical-combining-classes-template", dest="canonical_combining_classes_template_path", action="store", required=True)
    parser.add_argument("--composition-exclusions", dest="composition_exclusions_path", action="store", required=True)
    parser.add_argument("--compositions-output", dest="compositions_output_path", action="store", required=True)
    parser.add_argument("--compositions-template", dest="compositions_template_path", action="store", required=True)
    parser.add_argument("--decompositions-output", dest="decompositions_output_path", action="store", required=True)
    parser.add_argument("--decompositions-template", dest="decompositions_template_path", action="store", required=True)
    parser.add_argument("--descriptions-output", dest="descriptions_output_path", action="store", required=True)
    parser.add_argument("--descriptions-template", dest="descriptions_template_path", action="store", required=True)
    parser.add_argument("--east-asian-width", dest="east_asian_width_path", action="store", required=True)
    parser.add_argument("--east-asian-widths-output", dest="east_asian_widths_output_path", action="store", required=True)
    parser.add_argument("--east-asian-widths-template", dest="east_asian_widths_template_path", action="store", required=True)
    parser.add_argument("--emoji-data", dest="emoji_data_path", action="store", required=True)
    parser.add_argument("--general-categories-output", dest="general_categories_output_path", action="store", required=True)
    parser.add_argument("--general-categories-template", dest="general_categories_template_path", action="store", required=True)
    parser.add_argument("--grapheme-break-property", dest="grapheme_break_property_path", action="store", required=True)
    parser.add_argument("--grapheme-cluster-breaks-output", dest="grapheme_cluster_breaks_output_path", action="store", required=True)
    parser.add_argument("--grapheme-cluster-breaks-template", dest="grapheme_cluster_breaks_template_path", action="store", required=True)
    parser.add_argument("--index-output", dest="index_output_path", action="store", required=True)
    parser.add_argument("--index-template", dest="index_template_path", action="store", required=True)
    parser.add_argument("--lexical-classes-output", dest="lexical_classes_output_path", action="store", required=True)
    parser.add_argument("--lexical-classes-template", dest="lexical_classes_template_path", action="store", required=True)
    parser.add_argument("--line-break", dest="line_break_class_path", action="store", required=True)
    parser.add_argument("--line-break-classes-output", dest="line_break_classes_output_path", action="store", required=True)
    parser.add_argument("--line-break-classes-template", dest="line_break_classes_template_path", action="store", required=True)
    parser.add_argument("--prop-list", dest="prop_list_path", action="store", required=True)
    parser.add_argument("--scripts", dest="scripts_path", action="store", required=True)
    parser.add_argument("--scripts-output", dest="scripts_output_path", action="store", required=True)
    parser.add_argument("--scripts-template", dest="scripts_template_path", action="store", required=True)
    parser.add_argument("--sentence-break-properties-output", dest="sentence_break_properties_output_path", action="store", required=True)
    parser.add_argument("--sentence-break-properties-template", dest="sentence_break_properties_template_path", action="store", required=True)
    parser.add_argument("--sentence-break-property", dest="sentence_break_property_path", action="store", required=True)
    parser.add_argument("--unicode-data", dest="unicode_data_path", action="store", required=True)
    parser.add_argument("--word-break-properties-output", dest="word_break_properties_output_path", action="store", required=True)
    parser.add_argument("--word-break-properties-template", dest="word_break_properties_template_path", action="store", required=True)
    parser.add_argument("--word-break-property", dest="word_break_property_path", action="store", required=True)
    return parser.parse_args()

def main():
    options = parse_options()

    descriptions = ucd.initialize_descriptions()
    ucd.parse_bidi_brackets(options.bidi_brackets_path, descriptions)
    ucd.parse_bidi_mirroring(options.bidi_mirroring_path, descriptions)
    ucd.parse_composition_exclusions(options.composition_exclusions_path, descriptions)
    ucd.parse_east_asian_width(options.east_asian_width_path, descriptions)
    ucd.parse_emoji_data(options.emoji_data_path, descriptions)
    ucd.parse_prop_list(options.prop_list_path, descriptions)
    ucd.parse_grapheme_break_property(options.grapheme_break_property_path, descriptions)
    ucd.parse_line_break(options.line_break_class_path, descriptions)
    ucd.parse_scripts(options.scripts_path, descriptions)
    ucd.parse_sentence_break_property(options.sentence_break_property_path, descriptions)
    ucd.parse_unicode_data(options.unicode_data_path, descriptions)
    ucd.parse_word_break_property(options.word_break_property_path, descriptions)
    ucd.add_hangul_decompositions(descriptions)

    ucd.generate_bidi_classes(options.bidi_classes_template_path, options.bidi_classes_output_path, descriptions)
    ucd.generate_bidi_mirroring_glyphs(options.bidi_mirroring_glyphs_template_path, options.bidi_mirroring_glyphs_output_path, descriptions)
    ucd.generate_bidi_paired_bracket_types(options.bidi_paired_bracket_types_template_path, options.bidi_paired_bracket_types_output_path, descriptions)
    ucd.generate_canonical_combining_classes(options.canonical_combining_classes_template_path, options.canonical_combining_classes_output_path, descriptions)
    ucd.generate_compositions(options.compositions_template_path, options.compositions_output_path, descriptions)
    ucd.generate_decompositions(options.decompositions_template_path, options.decompositions_output_path, descriptions)
    ucd.generate_east_asian_widths(options.east_asian_widths_template_path, options.east_asian_widths_output_path, descriptions)
    ucd.generate_general_categories(options.general_categories_template_path, options.general_categories_output_path, descriptions)
    ucd.generate_grapheme_cluster_breaks(options.grapheme_cluster_breaks_template_path, options.grapheme_cluster_breaks_output_path, descriptions)
    ucd.generate_lexical_classes(options.lexical_classes_template_path, options.lexical_classes_output_path, descriptions)
    ucd.generate_line_break_classes(options.line_break_classes_template_path, options.line_break_classes_output_path, descriptions)
    ucd.generate_scripts(options.scripts_template_path, options.scripts_output_path, descriptions)
    ucd.generate_sentence_break_properties(options.sentence_break_properties_template_path, options.sentence_break_properties_output_path, descriptions)
    ucd.generate_word_break_properties(options.word_break_properties_template_path, options.word_break_properties_output_path, descriptions)


if __name__ == "__main__":
    main()
